
BCU_INPUTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004850  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a2c  08004a2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a34  08004a34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000010  08004a48  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004a48  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b80  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022cf  00000000  00000000  00032bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00034e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022878  00000000  00000000  00036d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d1d  00000000  00000000  000595d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd639  00000000  00000000  0006a2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  0014797c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080049cc 	.word	0x080049cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080049cc 	.word	0x080049cc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc8d 	bl	8000dee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f832 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9c8 	bl	800086c <MX_GPIO_Init>
  MX_CAN1_Init();
 80004dc:	f000 f89a 	bl	8000614 <MX_CAN1_Init>
  MX_TIM2_Init();
 80004e0:	f000 f8ce 	bl	8000680 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 f992 	bl	800080c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80004e8:	f000 f942 	bl	8000770 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004ec:	2100      	movs	r1, #0
 80004ee:	4812      	ldr	r0, [pc, #72]	; (8000538 <main+0x6c>)
 80004f0:	f002 fde8 	bl	80030c4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  htim2.Instance->CCR1 = 50;  // duty cycle is 1ms  0deg
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <main+0x6c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2232      	movs	r2, #50	; 0x32
 80004fa:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(2000);
 80004fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000500:	f000 fcea 	bl	8000ed8 <HAL_Delay>
		  htim2.Instance->CCR1 = 100;  // duty cycle is 2 ms 180deg
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <main+0x6c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(2000);
 800050c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000510:	f000 fce2 	bl	8000ed8 <HAL_Delay>
		  htim2.Instance->CCR1 = 75;  // duty cycle is 1.5 ms  90deg
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <main+0x6c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	224b      	movs	r2, #75	; 0x4b
 800051a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(2000);
 800051c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000520:	f000 fcda 	bl	8000ed8 <HAL_Delay>
		  htim2.Instance->CCR1 = 50;  // duty cycle is  1ms  0deg
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <main+0x6c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2232      	movs	r2, #50	; 0x32
 800052a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(2000);
 800052c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000530:	f000 fcd2 	bl	8000ed8 <HAL_Delay>
	  	  htim2.Instance->CCR1 = 50;  // duty cycle is 1ms  0deg
 8000534:	e7de      	b.n	80004f4 <main+0x28>
 8000536:	bf00      	nop
 8000538:	20000270 	.word	0x20000270

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0b0      	sub	sp, #192	; 0xc0
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000546:	2244      	movs	r2, #68	; 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 fa36 	bl	80049bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2268      	movs	r2, #104	; 0x68
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fa28 	bl	80049bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	2303      	movs	r3, #3
 8000580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000584:	2301      	movs	r3, #1
 8000586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 800058a:	2314      	movs	r3, #20
 800058c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000590:	2307      	movs	r3, #7
 8000592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fb50 	bl	8001c4c <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005b2:	f000 fa27 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005ce:	2104      	movs	r1, #4
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 ff5b 	bl	800248c <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005dc:	f000 fa12 	bl	8000a04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80005e0:	2304      	movs	r3, #4
 80005e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f954 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005f6:	f000 fa05 	bl	8000a04 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f001 facf 	bl	8001ba0 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000608:	f000 f9fc 	bl	8000a04 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	37c0      	adds	r7, #192	; 0xc0
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_CAN1_Init+0x64>)
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <MX_CAN1_Init+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_CAN1_Init+0x64>)
 8000620:	2210      	movs	r2, #16
 8000622:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_CAN1_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_CAN1_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_CAN1_Init+0x64>)
 8000632:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000636:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_CAN1_Init+0x64>)
 800063a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800063e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_CAN1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_CAN1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_CAN1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_CAN1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_CAN1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_CAN1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_CAN1_Init+0x64>)
 8000666:	f000 fc5b 	bl	8000f20 <HAL_CAN_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000670:	f000 f9c8 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000164 	.word	0x20000164
 800067c:	40006400 	.word	0x40006400

08000680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08e      	sub	sp, #56	; 0x38
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_TIM2_Init+0xec>)
 80006b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_TIM2_Init+0xec>)
 80006bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80006c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <MX_TIM2_Init+0xec>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_TIM2_Init+0xec>)
 80006ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_TIM2_Init+0xec>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_TIM2_Init+0xec>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006dc:	4823      	ldr	r0, [pc, #140]	; (800076c <MX_TIM2_Init+0xec>)
 80006de:	f002 fc39 	bl	8002f54 <HAL_TIM_Base_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80006e8:	f000 f98c 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f6:	4619      	mov	r1, r3
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <MX_TIM2_Init+0xec>)
 80006fa:	f002 fff9 	bl	80036f0 <HAL_TIM_ConfigClockSource>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000704:	f000 f97e 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <MX_TIM2_Init+0xec>)
 800070a:	f002 fc7a 	bl	8003002 <HAL_TIM_PWM_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000714:	f000 f976 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_TIM2_Init+0xec>)
 8000728:	f003 fc86 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000732:	f000 f967 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000736:	2360      	movs	r3, #96	; 0x60
 8000738:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <MX_TIM2_Init+0xec>)
 800074e:	f002 febf 	bl	80034d0 <HAL_TIM_PWM_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000758:	f000 f954 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <MX_TIM2_Init+0xec>)
 800075e:	f000 fa17 	bl	8000b90 <HAL_TIM_MspPostInit>

}
 8000762:	bf00      	nop
 8000764:	3738      	adds	r7, #56	; 0x38
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000270 	.word	0x20000270

08000770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_TIM3_Init+0x94>)
 8000790:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <MX_TIM3_Init+0x98>)
 8000792:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_TIM3_Init+0x94>)
 8000796:	2204      	movs	r2, #4
 8000798:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM3_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM3_Init+0x94>)
 80007a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80007a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_TIM3_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM3_Init+0x94>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <MX_TIM3_Init+0x94>)
 80007b6:	f002 fbcd 	bl	8002f54 <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007c0:	f000 f920 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_TIM3_Init+0x94>)
 80007d2:	f002 ff8d 	bl	80036f0 <HAL_TIM_ConfigClockSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 f912 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_TIM3_Init+0x94>)
 80007ee:	f003 fc23 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f904 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000224 	.word	0x20000224
 8000808:	40000400 	.word	0x40000400

0800080c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART3_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART3_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000850:	f003 fc7e 	bl	8004150 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f8d3 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000005c 	.word	0x2000005c
 8000868:	40004800 	.word	0x40004800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b5c      	ldr	r3, [pc, #368]	; (80009f4 <MX_GPIO_Init+0x188>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a5b      	ldr	r2, [pc, #364]	; (80009f4 <MX_GPIO_Init+0x188>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <MX_GPIO_Init+0x188>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <MX_GPIO_Init+0x188>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a55      	ldr	r2, [pc, #340]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b50      	ldr	r3, [pc, #320]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a49      	ldr	r2, [pc, #292]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a43      	ldr	r2, [pc, #268]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x188>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOBILE_CHARGER_Pin|NUMBER_PLATE_Pin|HIGH_BEAM_Pin|R_INDI_LIGHT_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f648 1140 	movw	r1, #35136	; 0x8940
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f001 f926 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STORAGE_LIGHT_Pin|GPIO_PIN_14|_OP_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f244 0121 	movw	r1, #16417	; 0x4021
 800090e:	483a      	ldr	r0, [pc, #232]	; (80009f8 <MX_GPIO_Init+0x18c>)
 8000910:	f001 f920 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BRAKE_LIGHT_GPIO_Port, BRAKE_LIGHT_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4838      	ldr	r0, [pc, #224]	; (80009fc <MX_GPIO_Init+0x190>)
 800091a:	f001 f91b 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_INDI_LIGHT_GPIO_Port, L_INDI_LIGHT_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2104      	movs	r1, #4
 8000922:	4837      	ldr	r0, [pc, #220]	; (8000a00 <MX_GPIO_Init+0x194>)
 8000924:	f001 f916 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AUX_Pin RIGHT_INDICATOR_Pin LEFT_INDICATOR_Pin PC6
                           PC8 IGNITION_Pin KILL_SWITCH_Pin KEY_IN_Pin
                           HIGH_BEAMC12_Pin */
  GPIO_InitStruct.Pin = AUX_Pin|RIGHT_INDICATOR_Pin|LEFT_INDICATOR_Pin|GPIO_PIN_6
 8000928:	f643 734c 	movw	r3, #16204	; 0x3f4c
 800092c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|IGNITION_Pin|KILL_SWITCH_Pin|KEY_IN_Pin
                          |HIGH_BEAMC12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	482f      	ldr	r0, [pc, #188]	; (80009fc <MX_GPIO_Init+0x190>)
 800093e:	f000 ff8f 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIDDLE_INDICATOR_Pin PA4 PA7 */
  GPIO_InitStruct.Pin = MIDDLE_INDICATOR_Pin|GPIO_PIN_4|GPIO_PIN_7;
 8000942:	2391      	movs	r3, #145	; 0x91
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f000 ff82 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOBILE_CHARGER_Pin NUMBER_PLATE_Pin HIGH_BEAM_Pin R_INDI_LIGHT_Pin */
  GPIO_InitStruct.Pin = MOBILE_CHARGER_Pin|NUMBER_PLATE_Pin|HIGH_BEAM_Pin|R_INDI_LIGHT_Pin;
 800095c:	f648 1340 	movw	r3, #35136	; 0x8940
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 ff72 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : STORAGE_LIGHT_Pin PB14 _OP_Pin */
  GPIO_InitStruct.Pin = STORAGE_LIGHT_Pin|GPIO_PIN_14|_OP_Pin;
 800097c:	f244 0321 	movw	r3, #16417	; 0x4021
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4818      	ldr	r0, [pc, #96]	; (80009f8 <MX_GPIO_Init+0x18c>)
 8000996:	f000 ff63 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 BRAKE_FRONT_Pin BRAKE_COMBO_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|BRAKE_FRONT_Pin|BRAKE_COMBO_Pin;
 800099a:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_GPIO_Init+0x18c>)
 80009b0:	f000 ff56 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRAKE_LIGHT_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_Pin;
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BRAKE_LIGHT_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <MX_GPIO_Init+0x190>)
 80009cc:	f000 ff48 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_INDI_LIGHT_Pin */
  GPIO_InitStruct.Pin = L_INDI_LIGHT_Pin;
 80009d0:	2304      	movs	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L_INDI_LIGHT_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <MX_GPIO_Init+0x194>)
 80009e8:	f000 ff3a 	bl	8001860 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000400 	.word	0x48000400
 80009fc:	48000800 	.word	0x48000800
 8000a00:	48000c00 	.word	0x48000c00

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	; 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <HAL_CAN_MspInit+0xbc>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d148      	bne.n	8000b0c <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <HAL_CAN_MspInit+0xc0>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <HAL_CAN_MspInit+0xc0>)
 8000a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a84:	6593      	str	r3, [r2, #88]	; 0x58
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_CAN_MspInit+0xc0>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_CAN_MspInit+0xc0>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <HAL_CAN_MspInit+0xc0>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <HAL_CAN_MspInit+0xc0>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000aaa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000abc:	230a      	movs	r3, #10
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4815      	ldr	r0, [pc, #84]	; (8000b1c <HAL_CAN_MspInit+0xc4>)
 8000ac8:	f000 feca 	bl	8001860 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2013      	movs	r0, #19
 8000ad2:	f000 fe8e 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ad6:	2013      	movs	r0, #19
 8000ad8:	f000 fea7 	bl	800182a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2014      	movs	r0, #20
 8000ae2:	f000 fe86 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ae6:	2014      	movs	r0, #20
 8000ae8:	f000 fe9f 	bl	800182a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2015      	movs	r0, #21
 8000af2:	f000 fe7e 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000af6:	2015      	movs	r0, #21
 8000af8:	f000 fe97 	bl	800182a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2016      	movs	r0, #22
 8000b02:	f000 fe76 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000b06:	2016      	movs	r0, #22
 8000b08:	f000 fe8f 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40006400 	.word	0x40006400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000400 	.word	0x48000400

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b30:	d10c      	bne.n	8000b4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_TIM_Base_MspInit+0x68>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_TIM_Base_MspInit+0x68>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_TIM_Base_MspInit+0x68>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b4a:	e018      	b.n	8000b7e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_TIM_Base_MspInit+0x6c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d113      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_TIM_Base_MspInit+0x68>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <HAL_TIM_Base_MspInit+0x68>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6593      	str	r3, [r2, #88]	; 0x58
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_TIM_Base_MspInit+0x68>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	201d      	movs	r0, #29
 8000b74:	f000 fe3d 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b78:	201d      	movs	r0, #29
 8000b7a:	f000 fe56 	bl	800182a <HAL_NVIC_EnableIRQ>
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40000400 	.word	0x40000400

08000b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb0:	d11c      	bne.n	8000bec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_TIM_MspPostInit+0x64>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_TIM_MspPostInit+0x64>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_TIM_MspPostInit+0x64>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 fe3a 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0x7c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d127      	bne.n	8000c6a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c4a:	2330      	movs	r3, #48	; 0x30
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_UART_MspInit+0x84>)
 8000c66:	f000 fdfb 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004800 	.word	0x40004800
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000800 	.word	0x48000800

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8e4 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <CAN1_TX_IRQHandler+0x10>)
 8000cda:	f000 fa67 	bl	80011ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000164 	.word	0x20000164

08000ce8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <CAN1_RX0_IRQHandler+0x10>)
 8000cee:	f000 fa5d 	bl	80011ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000164 	.word	0x20000164

08000cfc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <CAN1_RX1_IRQHandler+0x10>)
 8000d02:	f000 fa53 	bl	80011ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000164 	.word	0x20000164

08000d10 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <CAN1_SCE_IRQHandler+0x10>)
 8000d16:	f000 fa49 	bl	80011ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000164 	.word	0x20000164

08000d24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM3_IRQHandler+0x10>)
 8000d2a:	f002 fab1 	bl	8003290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000224 	.word	0x20000224

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <SystemInit+0x5c>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <SystemInit+0x5c>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SystemInit+0x60>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <SystemInit+0x60>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <SystemInit+0x60>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <SystemInit+0x60>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <SystemInit+0x60>)
 8000d64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <SystemInit+0x60>)
 8000d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SystemInit+0x60>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <SystemInit+0x60>)
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SystemInit+0x60>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	40021000 	.word	0x40021000

08000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff ffca 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000da4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000db0:	480a      	ldr	r0, [pc, #40]	; (8000ddc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000db6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
	ldr	r2, =_sbss
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dc0:	f842 3b04 	str.w	r3, [r2], #4

08000dc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <LoopForever+0x16>)
	cmp	r2, r3
 8000dc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f003 fdd3 	bl	8004974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dce:	f7ff fb7d 	bl	80004cc <main>

08000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd2:	e7fe      	b.n	8000dd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd4:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000dd8:	08004a3c 	.word	0x08004a3c
	ldr	r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000de0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000de4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000de8:	200002c0 	.word	0x200002c0

08000dec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC1_IRQHandler>

08000dee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 fcef 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f80e 	bl	8000e20 <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e001      	b.n	8000e14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e10:	f7ff fdfe 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d023      	beq.n	8000e7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_InitTick+0x70>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fcfb 	bl	8001846 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10f      	bne.n	8000e76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d809      	bhi.n	8000e70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 fcc5 	bl	80017f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_InitTick+0x74>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e007      	b.n	8000e80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e004      	b.n	8000e80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e001      	b.n	8000e80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200002bc 	.word	0x200002bc

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200002bc 	.word	0x200002bc

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e11c      	b.n	800116c <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d131      	bne.n	8000fa2 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a8c      	ldr	r2, [pc, #560]	; (8001174 <HAL_CAN_Init+0x254>)
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a8c      	ldr	r2, [pc, #560]	; (8001178 <HAL_CAN_Init+0x258>)
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a8b      	ldr	r2, [pc, #556]	; (800117c <HAL_CAN_Init+0x25c>)
 8000f4e:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a8b      	ldr	r2, [pc, #556]	; (8001180 <HAL_CAN_Init+0x260>)
 8000f54:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a8a      	ldr	r2, [pc, #552]	; (8001184 <HAL_CAN_Init+0x264>)
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a8a      	ldr	r2, [pc, #552]	; (8001188 <HAL_CAN_Init+0x268>)
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a89      	ldr	r2, [pc, #548]	; (800118c <HAL_CAN_Init+0x26c>)
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a89      	ldr	r2, [pc, #548]	; (8001190 <HAL_CAN_Init+0x270>)
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a88      	ldr	r2, [pc, #544]	; (8001194 <HAL_CAN_Init+0x274>)
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a88      	ldr	r2, [pc, #544]	; (8001198 <HAL_CAN_Init+0x278>)
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a87      	ldr	r2, [pc, #540]	; (800119c <HAL_CAN_Init+0x27c>)
 8000f7e:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a87      	ldr	r2, [pc, #540]	; (80011a0 <HAL_CAN_Init+0x280>)
 8000f84:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a86      	ldr	r2, [pc, #536]	; (80011a4 <HAL_CAN_Init+0x284>)
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a84      	ldr	r2, [pc, #528]	; (80011a8 <HAL_CAN_Init+0x288>)
 8000f98:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0202 	bic.w	r2, r2, #2
 8000fb0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb2:	f7ff ff85 	bl	8000ec0 <HAL_GetTick>
 8000fb6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fb8:	e012      	b.n	8000fe0 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fba:	f7ff ff81 	bl	8000ec0 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b0a      	cmp	r3, #10
 8000fc6:	d90b      	bls.n	8000fe0 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0c5      	b.n	800116c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1e5      	bne.n	8000fba <HAL_CAN_Init+0x9a>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ffe:	f7ff ff5f 	bl	8000ec0 <HAL_GetTick>
 8001002:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001004:	e012      	b.n	800102c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001006:	f7ff ff5b 	bl	8000ec0 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b0a      	cmp	r3, #10
 8001012:	d90b      	bls.n	800102c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2205      	movs	r2, #5
 8001024:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e09f      	b.n	800116c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0e5      	beq.n	8001006 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7e1b      	ldrb	r3, [r3, #24]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d108      	bne.n	8001054 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e007      	b.n	8001064 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001062:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7e5b      	ldrb	r3, [r3, #25]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d108      	bne.n	800107e <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e007      	b.n	800108e <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7e9b      	ldrb	r3, [r3, #26]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d108      	bne.n	80010a8 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0220 	orr.w	r2, r2, #32
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0220 	bic.w	r2, r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7edb      	ldrb	r3, [r3, #27]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0210 	bic.w	r2, r2, #16
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0210 	orr.w	r2, r2, #16
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7f1b      	ldrb	r3, [r3, #28]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d108      	bne.n	80010fc <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0208 	orr.w	r2, r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e007      	b.n	800110c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0208 	bic.w	r2, r2, #8
 800110a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7f5b      	ldrb	r3, [r3, #29]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0204 	orr.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e007      	b.n	8001136 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0204 	bic.w	r2, r2, #4
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	ea42 0103 	orr.w	r1, r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	080015af 	.word	0x080015af
 8001178:	080015c3 	.word	0x080015c3
 800117c:	080015d7 	.word	0x080015d7
 8001180:	080015eb 	.word	0x080015eb
 8001184:	08001537 	.word	0x08001537
 8001188:	0800154b 	.word	0x0800154b
 800118c:	0800155f 	.word	0x0800155f
 8001190:	08001573 	.word	0x08001573
 8001194:	08001587 	.word	0x08001587
 8001198:	0800159b 	.word	0x0800159b
 800119c:	080015ff 	.word	0x080015ff
 80011a0:	08001613 	.word	0x08001613
 80011a4:	08001627 	.word	0x08001627
 80011a8:	08000a59 	.word	0x08000a59

080011ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8083 	beq.w	80012fa <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d025      	beq.n	800124a <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2201      	movs	r2, #1
 8001204:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	4798      	blx	r3
 8001218:	e017      	b.n	800124a <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
 800122c:	e00d      	b.n	800124a <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	e003      	b.n	800124a <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d026      	beq.n	80012a2 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	4798      	blx	r3
 8001270:	e017      	b.n	80012a2 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
 8001284:	e00d      	b.n	80012a2 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800128c:	2b00      	cmp	r3, #0
 800128e:	d004      	beq.n	800129a <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	e003      	b.n	80012a2 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d026      	beq.n	80012fa <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	4798      	blx	r3
 80012c8:	e017      	b.n	80012fa <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
 80012dc:	e00d      	b.n	80012fa <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
 80012f0:	e003      	b.n	80012fa <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00c      	beq.n	800131e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001314:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2210      	movs	r2, #16
 800131c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00c      	beq.n	8001342 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2208      	movs	r2, #8
 8001338:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00a      	beq.n	8001362 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2210      	movs	r2, #16
 8001384:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00c      	beq.n	80013aa <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2208      	movs	r2, #8
 80013a0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00a      	beq.n	80013ca <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00c      	beq.n	80013ee <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2210      	movs	r2, #16
 80013e4:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00c      	beq.n	8001412 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2208      	movs	r2, #8
 8001408:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d07b      	beq.n	8001514 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d072      	beq.n	800150c <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001480:	2b00      	cmp	r3, #0
 8001482:	d043      	beq.n	800150c <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03e      	beq.n	800150c <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001494:	2b60      	cmp	r3, #96	; 0x60
 8001496:	d02b      	beq.n	80014f0 <HAL_CAN_IRQHandler+0x344>
 8001498:	2b60      	cmp	r3, #96	; 0x60
 800149a:	d82e      	bhi.n	80014fa <HAL_CAN_IRQHandler+0x34e>
 800149c:	2b50      	cmp	r3, #80	; 0x50
 800149e:	d022      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x33a>
 80014a0:	2b50      	cmp	r3, #80	; 0x50
 80014a2:	d82a      	bhi.n	80014fa <HAL_CAN_IRQHandler+0x34e>
 80014a4:	2b40      	cmp	r3, #64	; 0x40
 80014a6:	d019      	beq.n	80014dc <HAL_CAN_IRQHandler+0x330>
 80014a8:	2b40      	cmp	r3, #64	; 0x40
 80014aa:	d826      	bhi.n	80014fa <HAL_CAN_IRQHandler+0x34e>
 80014ac:	2b30      	cmp	r3, #48	; 0x30
 80014ae:	d010      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x326>
 80014b0:	2b30      	cmp	r3, #48	; 0x30
 80014b2:	d822      	bhi.n	80014fa <HAL_CAN_IRQHandler+0x34e>
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d002      	beq.n	80014be <HAL_CAN_IRQHandler+0x312>
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	d005      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014bc:	e01d      	b.n	80014fa <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014c6:	e019      	b.n	80014fc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014d0:	e014      	b.n	80014fc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014da:	e00f      	b.n	80014fc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014e4:	e00a      	b.n	80014fc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014ee:	e005      	b.n	80014fc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014f8:	e000      	b.n	80014fc <HAL_CAN_IRQHandler+0x350>
            break;
 80014fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800150a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2204      	movs	r2, #4
 8001512:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff29 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff3e 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff8e 	bl	8001730 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff31 	bl	80016a0 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa2 	bl	8001798 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186e:	e154      	b.n	8001b1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8146 	beq.w	8001b14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d00b      	beq.n	80018a8 <HAL_GPIO_Init+0x48>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d007      	beq.n	80018a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189c:	2b11      	cmp	r3, #17
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b12      	cmp	r3, #18
 80018a6:	d130      	bne.n	800190a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018de:	2201      	movs	r2, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	f003 0201 	and.w	r2, r3, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0xea>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b12      	cmp	r3, #18
 8001948:	d123      	bne.n	8001992 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	08da      	lsrs	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3208      	adds	r2, #8
 8001952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3208      	adds	r2, #8
 800198c:	6939      	ldr	r1, [r7, #16]
 800198e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0203 	and.w	r2, r3, #3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80a0 	beq.w	8001b14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d4:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_GPIO_Init+0x2d8>)
 80019d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d8:	4a57      	ldr	r2, [pc, #348]	; (8001b38 <HAL_GPIO_Init+0x2d8>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6613      	str	r3, [r2, #96]	; 0x60
 80019e0:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <HAL_GPIO_Init+0x2d8>)
 80019e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ec:	4a53      	ldr	r2, [pc, #332]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a16:	d019      	beq.n	8001a4c <HAL_GPIO_Init+0x1ec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a49      	ldr	r2, [pc, #292]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d013      	beq.n	8001a48 <HAL_GPIO_Init+0x1e8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_GPIO_Init+0x2e4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00d      	beq.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a47      	ldr	r2, [pc, #284]	; (8001b48 <HAL_GPIO_Init+0x2e8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d007      	beq.n	8001a40 <HAL_GPIO_Init+0x1e0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a46      	ldr	r2, [pc, #280]	; (8001b4c <HAL_GPIO_Init+0x2ec>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_GPIO_Init+0x1dc>
 8001a38:	2304      	movs	r3, #4
 8001a3a:	e008      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	e006      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e004      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	f002 0203 	and.w	r2, r2, #3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4093      	lsls	r3, r2
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a5e:	4937      	ldr	r1, [pc, #220]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a90:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f aea3 	bne.w	8001870 <HAL_GPIO_Init+0x10>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000c00 	.word	0x48000c00
 8001b4c:	48001000 	.word	0x48001000
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40007000 	.word	0x40007000

08001ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bae:	d130      	bne.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bbc:	d038      	beq.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2232      	movs	r2, #50	; 0x32
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9b      	lsrs	r3, r3, #18
 8001be0:	3301      	adds	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be4:	e002      	b.n	8001bec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf8:	d102      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f2      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0c:	d110      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e00f      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1e:	d007      	beq.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c28:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40007000 	.word	0x40007000
 8001c44:	20000000 	.word	0x20000000
 8001c48:	431bde83 	.word	0x431bde83

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f000 bc11 	b.w	8002482 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c60:	4ba0      	ldr	r3, [pc, #640]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c6a:	4b9e      	ldr	r3, [pc, #632]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80e4 	beq.w	8001e4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4c>
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	f040 808b 	bne.w	8001da6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	f040 8087 	bne.w	8001da6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c98:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x64>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e3e8      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1a      	ldr	r2, [r3, #32]
 8001cb4:	4b8b      	ldr	r3, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <HAL_RCC_OscConfig+0x7e>
 8001cc0:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc8:	e005      	b.n	8001cd6 <HAL_RCC_OscConfig+0x8a>
 8001cca:	4b86      	ldr	r3, [pc, #536]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d223      	bcs.n	8001d22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fd7a 	bl	80027d8 <RCC_SetFlashLatencyFromMSIRange>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e3c9      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cee:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7c      	ldr	r2, [pc, #496]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b7a      	ldr	r3, [pc, #488]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4977      	ldr	r1, [pc, #476]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0c:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	4972      	ldr	r1, [pc, #456]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
 8001d20:	e025      	b.n	8001d6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d22:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6f      	ldr	r2, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	496a      	ldr	r1, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d40:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	4965      	ldr	r1, [pc, #404]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fd3a 	bl	80027d8 <RCC_SetFlashLatencyFromMSIRange>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e389      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d6e:	f000 fc6f 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	495a      	ldr	r1, [pc, #360]	; (8001ee8 <HAL_RCC_OscConfig+0x29c>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_RCC_OscConfig+0x2a0>)
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d8e:	4b58      	ldr	r3, [pc, #352]	; (8001ef0 <HAL_RCC_OscConfig+0x2a4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f844 	bl	8000e20 <HAL_InitTick>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d052      	beq.n	8001e48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	e36d      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d032      	beq.n	8001e14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dae:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dba:	f7ff f881 	bl	8000ec0 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f87d 	bl	8000ec0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e356      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd4:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de0:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3f      	ldr	r2, [pc, #252]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	493a      	ldr	r1, [pc, #232]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dfe:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	4935      	ldr	r1, [pc, #212]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
 8001e12:	e01a      	b.n	8001e4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e20:	f7ff f84e 	bl	8000ec0 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e28:	f7ff f84a 	bl	8000ec0 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e323      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1dc>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d073      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x21c>
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d10e      	bne.n	8001e80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d063      	beq.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d15f      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e300      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x24c>
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0x288>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x270>
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x288>
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <HAL_RCC_OscConfig+0x298>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7fe fff0 	bl	8000ec0 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee2:	e010      	b.n	8001f06 <HAL_RCC_OscConfig+0x2ba>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	080049e4 	.word	0x080049e4
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe ffe4 	bl	8000ec0 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e2bd      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	4baf      	ldr	r3, [pc, #700]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x2a8>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe ffd4 	bl	8000ec0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ffd0 	bl	8000ec0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e2a9      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2e:	4ba5      	ldr	r3, [pc, #660]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2d0>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d060      	beq.n	800200c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x310>
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d119      	bne.n	8001f8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d116      	bne.n	8001f8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	4b99      	ldr	r3, [pc, #612]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x328>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e286      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b93      	ldr	r3, [pc, #588]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	4990      	ldr	r1, [pc, #576]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f88:	e040      	b.n	800200c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d023      	beq.n	8001fda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f92:	4b8c      	ldr	r3, [pc, #560]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a8b      	ldr	r2, [pc, #556]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe ff8f 	bl	8000ec0 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7fe ff8b 	bl	8000ec0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e264      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	4b82      	ldr	r3, [pc, #520]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b7f      	ldr	r3, [pc, #508]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	497c      	ldr	r1, [pc, #496]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e018      	b.n	800200c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b7a      	ldr	r3, [pc, #488]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a79      	ldr	r2, [pc, #484]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe ff6b 	bl	8000ec0 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fee:	f7fe ff67 	bl	8000ec0 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e240      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002000:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03c      	beq.n	8002092 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01c      	beq.n	800205a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002026:	4a67      	ldr	r2, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe ff46 	bl	8000ec0 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7fe ff42 	bl	8000ec0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e21b      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204a:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 800204c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ef      	beq.n	8002038 <HAL_RCC_OscConfig+0x3ec>
 8002058:	e01b      	b.n	8002092 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 800205c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002060:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7fe ff29 	bl	8000ec0 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe ff25 	bl	8000ec0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1fe      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	4b4f      	ldr	r3, [pc, #316]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ef      	bne.n	8002072 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80a6 	beq.w	80021ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020a4:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10d      	bne.n	80020cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 80020b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ba:	6593      	str	r3, [r2, #88]	; 0x58
 80020bc:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_OscConfig+0x57c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d118      	bne.n	800210a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_OscConfig+0x57c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <HAL_RCC_OscConfig+0x57c>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e4:	f7fe feec 	bl	8000ec0 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ec:	f7fe fee8 	bl	8000ec0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1c1      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <HAL_RCC_OscConfig+0x57c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x4d8>
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002122:	e024      	b.n	800216e <HAL_RCC_OscConfig+0x522>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d110      	bne.n	800214e <HAL_RCC_OscConfig+0x502>
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	4a24      	ldr	r2, [pc, #144]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800214c:	e00f      	b.n	800216e <HAL_RCC_OscConfig+0x522>
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002176:	f7fe fea3 	bl	8000ec0 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fe9f 	bl	8000ec0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e176      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x578>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ed      	beq.n	800217e <HAL_RCC_OscConfig+0x532>
 80021a2:	e01a      	b.n	80021da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe fe8c 	bl	8000ec0 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021aa:	e00f      	b.n	80021cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe fe88 	bl	8000ec0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d906      	bls.n	80021cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e15f      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021cc:	4baa      	ldr	r3, [pc, #680]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e8      	bne.n	80021ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4ba5      	ldr	r3, [pc, #660]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	4aa4      	ldr	r2, [pc, #656]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d03c      	beq.n	8002272 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01c      	beq.n	800223a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002200:	4b9d      	ldr	r3, [pc, #628]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002206:	4a9c      	ldr	r2, [pc, #624]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe fe56 	bl	8000ec0 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002218:	f7fe fe52 	bl	8000ec0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e12b      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800222a:	4b93      	ldr	r3, [pc, #588]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 800222c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ef      	beq.n	8002218 <HAL_RCC_OscConfig+0x5cc>
 8002238:	e01b      	b.n	8002272 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800223a:	4b8f      	ldr	r3, [pc, #572]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 800223c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002240:	4a8d      	ldr	r2, [pc, #564]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7fe fe39 	bl	8000ec0 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002252:	f7fe fe35 	bl	8000ec0 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e10e      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002264:	4b84      	ldr	r3, [pc, #528]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ef      	bne.n	8002252 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8102 	beq.w	8002480 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	2b02      	cmp	r3, #2
 8002282:	f040 80c5 	bne.w	8002410 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002286:	4b7c      	ldr	r3, [pc, #496]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0203 	and.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	429a      	cmp	r2, r3
 8002298:	d12c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	3b01      	subs	r3, #1
 80022a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d123      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d11b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d113      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	3b01      	subs	r3, #1
 80022da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d109      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d067      	beq.n	80023c4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d062      	beq.n	80023c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0bb      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800230a:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002314:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002316:	f7fe fdd3 	bl	8000ec0 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe fdcf 	bl	8000ec0 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0a8      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	4b51      	ldr	r3, [pc, #324]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b4e      	ldr	r3, [pc, #312]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b4e      	ldr	r3, [pc, #312]	; (800247c <HAL_RCC_OscConfig+0x830>)
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800234c:	3a01      	subs	r2, #1
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002356:	0212      	lsls	r2, r2, #8
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800235e:	0852      	lsrs	r2, r2, #1
 8002360:	3a01      	subs	r2, #1
 8002362:	0552      	lsls	r2, r2, #21
 8002364:	4311      	orrs	r1, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800236a:	0852      	lsrs	r2, r2, #1
 800236c:	3a01      	subs	r2, #1
 800236e:	0652      	lsls	r2, r2, #25
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002376:	06d2      	lsls	r2, r2, #27
 8002378:	430a      	orrs	r2, r1
 800237a:	493f      	ldr	r1, [pc, #252]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002380:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800238c:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a39      	ldr	r2, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002398:	f7fe fd92 	bl	8000ec0 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fd8e 	bl	8000ec0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e067      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023be:	e05f      	b.n	8002480 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e05e      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d157      	bne.n	8002480 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023d0:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a28      	ldr	r2, [pc, #160]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e8:	f7fe fd6a 	bl	8000ec0 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fd66 	bl	8000ec0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e03f      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
 800240e:	e037      	b.n	8002480 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d02d      	beq.n	8002472 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a17      	ldr	r2, [pc, #92]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 800241c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002420:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002434:	f023 0303 	bic.w	r3, r3, #3
 8002438:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002440:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002448:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fd39 	bl	8000ec0 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fd35 	bl	8000ec0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e00e      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <HAL_RCC_OscConfig+0x82c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x806>
 8002470:	e006      	b.n	8002480 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e005      	b.n	8002482 <HAL_RCC_OscConfig+0x836>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0c8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_RCC_ClockConfig+0x1b0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d910      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCC_ClockConfig+0x1b0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4961      	ldr	r1, [pc, #388]	; (800263c <HAL_RCC_ClockConfig+0x1b0>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b5f      	ldr	r3, [pc, #380]	; (800263c <HAL_RCC_ClockConfig+0x1b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0b0      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d04c      	beq.n	8002576 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e4:	4b56      	ldr	r3, [pc, #344]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d121      	bne.n	8002534 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e09e      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d107      	bne.n	800250c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d115      	bne.n	8002534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e092      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002514:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e086      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002524:	4b46      	ldr	r3, [pc, #280]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e07e      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 0203 	bic.w	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	493f      	ldr	r1, [pc, #252]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002546:	f7fe fcbb 	bl	8000ec0 <HAL_GetTick>
 800254a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254c:	e00a      	b.n	8002564 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254e:	f7fe fcb7 	bl	8000ec0 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e066      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002564:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 020c 	and.w	r2, r3, #12
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	429a      	cmp	r2, r3
 8002574:	d1eb      	bne.n	800254e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	492c      	ldr	r1, [pc, #176]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCC_ClockConfig+0x1b0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d210      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_RCC_ClockConfig+0x1b0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 0207 	bic.w	r2, r3, #7
 80025aa:	4924      	ldr	r1, [pc, #144]	; (800263c <HAL_RCC_ClockConfig+0x1b0>)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x1b0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e036      	b.n	8002632 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4918      	ldr	r1, [pc, #96]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4910      	ldr	r1, [pc, #64]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002602:	f000 f825 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8002606:	4602      	mov	r2, r0
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_ClockConfig+0x1b4>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	490c      	ldr	r1, [pc, #48]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	5ccb      	ldrb	r3, [r1, r3]
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fbfa 	bl	8000e20 <HAL_InitTick>
 800262c:	4603      	mov	r3, r0
 800262e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002630:	7afb      	ldrb	r3, [r7, #11]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40022000 	.word	0x40022000
 8002640:	40021000 	.word	0x40021000
 8002644:	080049e4 	.word	0x080049e4
 8002648:	20000000 	.word	0x20000000
 800264c:	20000004 	.word	0x20000004

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265e:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002668:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x34>
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d121      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d11e      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002684:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002690:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e005      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026ac:	4a2b      	ldr	r2, [pc, #172]	; (800275c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d102      	bne.n	80026ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	e004      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_RCC_GetSysClockFreq+0x114>)
 80026d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d134      	bne.n	8002748 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d003      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0xac>
 80026f4:	e005      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCC_GetSysClockFreq+0x110>)
 80026f8:	617b      	str	r3, [r7, #20]
      break;
 80026fa:	e005      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_GetSysClockFreq+0x114>)
 80026fe:	617b      	str	r3, [r7, #20]
      break;
 8002700:	e002      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	617b      	str	r3, [r7, #20]
      break;
 8002706:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	3301      	adds	r3, #1
 8002714:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	fb02 f203 	mul.w	r2, r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	0e5b      	lsrs	r3, r3, #25
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	3301      	adds	r3, #1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002748:	69bb      	ldr	r3, [r7, #24]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	080049fc 	.word	0x080049fc
 8002760:	00f42400 	.word	0x00f42400
 8002764:	007a1200 	.word	0x007a1200

08002768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000000 	.word	0x20000000

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4904      	ldr	r1, [pc, #16]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	080049f4 	.word	0x080049f4

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027b0:	f7ff ffda 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0adb      	lsrs	r3, r3, #11
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4904      	ldr	r1, [pc, #16]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	080049f4 	.word	0x080049f4

080027d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027e4:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027f0:	f7ff f9c8 	bl	8001b84 <HAL_PWREx_GetVoltageRange>
 80027f4:	6178      	str	r0, [r7, #20]
 80027f6:	e014      	b.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a24      	ldr	r2, [pc, #144]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002810:	f7ff f9b8 	bl	8001b84 <HAL_PWREx_GetVoltageRange>
 8002814:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002820:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002828:	d10b      	bne.n	8002842 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d919      	bls.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2ba0      	cmp	r3, #160	; 0xa0
 8002834:	d902      	bls.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002836:	2302      	movs	r3, #2
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e013      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800283c:	2301      	movs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e010      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d902      	bls.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002848:	2303      	movs	r3, #3
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	e00a      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d102      	bne.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002854:	2302      	movs	r3, #2
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e004      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b70      	cmp	r3, #112	; 0x70
 800285e:	d101      	bne.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 0207 	bic.w	r2, r3, #7
 800286c:	4909      	ldr	r1, [pc, #36]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40022000 	.word	0x40022000

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a0:	2300      	movs	r3, #0
 80028a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a4:	2300      	movs	r3, #0
 80028a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d031      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028bc:	d01a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028c2:	d814      	bhi.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028cc:	d10f      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4a5c      	ldr	r2, [pc, #368]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028da:	e00c      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fa44 	bl	8002d70 <RCCEx_PLLSAI1_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ec:	e003      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	74fb      	strb	r3, [r7, #19]
      break;
 80028f2:	e000      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80028f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028fc:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	494e      	ldr	r1, [pc, #312]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002912:	e001      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 809e 	beq.w	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800293a:	2300      	movs	r3, #0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00d      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	4a3f      	ldr	r2, [pc, #252]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6593      	str	r3, [r2, #88]	; 0x58
 800294c:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002958:	2301      	movs	r3, #1
 800295a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295c:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a39      	ldr	r2, [pc, #228]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002968:	f7fe faaa 	bl	8000ec0 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800296e:	e009      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002970:	f7fe faa6 	bl	8000ec0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d902      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	74fb      	strb	r3, [r7, #19]
        break;
 8002982:	e005      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002984:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ef      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d15a      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002996:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01e      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d019      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d016      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fa66 	bl	8000ec0 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f6:	e00b      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fa62 	bl	8000ec0 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d902      	bls.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	74fb      	strb	r3, [r7, #19]
            break;
 8002a0e:	e006      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ec      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a1e:	7cfb      	ldrb	r3, [r7, #19]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a32:	4904      	ldr	r1, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a3a:	e009      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
 8002a40:	e006      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a50:	7c7b      	ldrb	r3, [r7, #17]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d105      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4b9e      	ldr	r3, [pc, #632]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	4a9d      	ldr	r2, [pc, #628]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6e:	4b98      	ldr	r3, [pc, #608]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 0203 	bic.w	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4994      	ldr	r1, [pc, #592]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a90:	4b8f      	ldr	r3, [pc, #572]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 020c 	bic.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	498c      	ldr	r1, [pc, #560]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ab2:	4b87      	ldr	r3, [pc, #540]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	4983      	ldr	r1, [pc, #524]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ad4:	4b7e      	ldr	r3, [pc, #504]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	497b      	ldr	r1, [pc, #492]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002af6:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	4972      	ldr	r1, [pc, #456]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b18:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	496a      	ldr	r1, [pc, #424]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	4961      	ldr	r1, [pc, #388]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5c:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	4959      	ldr	r1, [pc, #356]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b7e:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	4950      	ldr	r1, [pc, #320]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	4948      	ldr	r1, [pc, #288]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc8:	f023 0203 	bic.w	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	493f      	ldr	r1, [pc, #252]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d028      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002be4:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf2:	4937      	ldr	r1, [pc, #220]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a31      	ldr	r2, [pc, #196]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0e:	60d3      	str	r3, [r2, #12]
 8002c10:	e011      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f8a4 	bl	8002d70 <RCCEx_PLLSAI1_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d028      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	491f      	ldr	r1, [pc, #124]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c60:	d106      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6c:	60d3      	str	r3, [r2, #12]
 8002c6e:	e011      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f875 	bl	8002d70 <RCCEx_PLLSAI1_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d02b      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cbe:	d109      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a02      	ldr	r2, [pc, #8]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cca:	60d3      	str	r3, [r2, #12]
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f843 	bl	8002d70 <RCCEx_PLLSAI1_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01c      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	4916      	ldr	r1, [pc, #88]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d22:	d10c      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	2102      	movs	r1, #2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f820 	bl	8002d70 <RCCEx_PLLSAI1_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	4904      	ldr	r1, [pc, #16]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d60:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d7e:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d8a:	4b71      	ldr	r3, [pc, #452]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0203 	and.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d10d      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002da2:	4b6b      	ldr	r3, [pc, #428]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
       ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d047      	beq.n	8002e46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e044      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d018      	beq.n	8002df6 <RCCEx_PLLSAI1_Config+0x86>
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d825      	bhi.n	8002e14 <RCCEx_PLLSAI1_Config+0xa4>
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d002      	beq.n	8002dd2 <RCCEx_PLLSAI1_Config+0x62>
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d009      	beq.n	8002de4 <RCCEx_PLLSAI1_Config+0x74>
 8002dd0:	e020      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11d      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de2:	e01a      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de4:	4b5a      	ldr	r3, [pc, #360]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d116      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df4:	e013      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002df6:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e02:	4b53      	ldr	r3, [pc, #332]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e12:	e006      	b.n	8002e22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      break;
 8002e18:	e004      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e002      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	4943      	ldr	r1, [pc, #268]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d17c      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e4c:	4b40      	ldr	r3, [pc, #256]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3f      	ldr	r2, [pc, #252]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e58:	f7fe f832 	bl	8000ec0 <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e5e:	e009      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e60:	f7fe f82e 	bl	8000ec0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d902      	bls.n	8002e74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	73fb      	strb	r3, [r7, #15]
        break;
 8002e72:	e005      	b.n	8002e80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e74:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ef      	bne.n	8002e60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d15f      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d110      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6892      	ldr	r2, [r2, #8]
 8002e9c:	0211      	lsls	r1, r2, #8
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68d2      	ldr	r2, [r2, #12]
 8002ea2:	06d2      	lsls	r2, r2, #27
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	492a      	ldr	r1, [pc, #168]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	610b      	str	r3, [r1, #16]
 8002eac:	e027      	b.n	8002efe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d112      	bne.n	8002eda <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ebc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6912      	ldr	r2, [r2, #16]
 8002eca:	0852      	lsrs	r2, r2, #1
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	0552      	lsls	r2, r2, #21
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	491f      	ldr	r1, [pc, #124]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	610b      	str	r3, [r1, #16]
 8002ed8:	e011      	b.n	8002efe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ee2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6892      	ldr	r2, [r2, #8]
 8002eea:	0211      	lsls	r1, r2, #8
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6952      	ldr	r2, [r2, #20]
 8002ef0:	0852      	lsrs	r2, r2, #1
 8002ef2:	3a01      	subs	r2, #1
 8002ef4:	0652      	lsls	r2, r2, #25
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	4915      	ldr	r1, [pc, #84]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fd ffd9 	bl	8000ec0 <HAL_GetTick>
 8002f0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f10:	e009      	b.n	8002f26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f12:	f7fd ffd5 	bl	8000ec0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d902      	bls.n	8002f26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	73fb      	strb	r3, [r7, #15]
          break;
 8002f24:	e005      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0ef      	beq.n	8002f12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4903      	ldr	r1, [pc, #12]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000

08002f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e049      	b.n	8002ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd fdd0 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f000 fca4 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e049      	b.n	80030a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d106      	bne.n	800302e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f841 	bl	80030b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2202      	movs	r2, #2
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f000 fc4d 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_TIM_PWM_Start+0x24>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e03c      	b.n	8003162 <HAL_TIM_PWM_Start+0x9e>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d109      	bne.n	8003102 <HAL_TIM_PWM_Start+0x3e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e02f      	b.n	8003162 <HAL_TIM_PWM_Start+0x9e>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d109      	bne.n	800311c <HAL_TIM_PWM_Start+0x58>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e022      	b.n	8003162 <HAL_TIM_PWM_Start+0x9e>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d109      	bne.n	8003136 <HAL_TIM_PWM_Start+0x72>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	bf14      	ite	ne
 800312e:	2301      	movne	r3, #1
 8003130:	2300      	moveq	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	e015      	b.n	8003162 <HAL_TIM_PWM_Start+0x9e>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b10      	cmp	r3, #16
 800313a:	d109      	bne.n	8003150 <HAL_TIM_PWM_Start+0x8c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	bf14      	ite	ne
 8003148:	2301      	movne	r3, #1
 800314a:	2300      	moveq	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e008      	b.n	8003162 <HAL_TIM_PWM_Start+0x9e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e083      	b.n	8003272 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <HAL_TIM_PWM_Start+0xb6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003178:	e023      	b.n	80031c2 <HAL_TIM_PWM_Start+0xfe>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d104      	bne.n	800318a <HAL_TIM_PWM_Start+0xc6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003188:	e01b      	b.n	80031c2 <HAL_TIM_PWM_Start+0xfe>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start+0xd6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003198:	e013      	b.n	80031c2 <HAL_TIM_PWM_Start+0xfe>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d104      	bne.n	80031aa <HAL_TIM_PWM_Start+0xe6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a8:	e00b      	b.n	80031c2 <HAL_TIM_PWM_Start+0xfe>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_PWM_Start+0xf6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b8:	e003      	b.n	80031c2 <HAL_TIM_PWM_Start+0xfe>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2201      	movs	r2, #1
 80031c8:	6839      	ldr	r1, [r7, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 ff0e 	bl	8003fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <HAL_TIM_PWM_Start+0x1b8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_TIM_PWM_Start+0x12a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a28      	ldr	r2, [pc, #160]	; (8003280 <HAL_TIM_PWM_Start+0x1bc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_TIM_PWM_Start+0x12a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <HAL_TIM_PWM_Start+0x1c0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_PWM_Start+0x12e>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_TIM_PWM_Start+0x130>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1b      	ldr	r2, [pc, #108]	; (800327c <HAL_TIM_PWM_Start+0x1b8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_TIM_PWM_Start+0x16c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d009      	beq.n	8003230 <HAL_TIM_PWM_Start+0x16c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_TIM_PWM_Start+0x1c4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_PWM_Start+0x16c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <HAL_TIM_PWM_Start+0x1bc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d115      	bne.n	800325c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_TIM_PWM_Start+0x1c8>)
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b06      	cmp	r3, #6
 8003240:	d015      	beq.n	800326e <HAL_TIM_PWM_Start+0x1aa>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003248:	d011      	beq.n	800326e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	e008      	b.n	800326e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e000      	b.n	8003270 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40000400 	.word	0x40000400
 800328c:	00010007 	.word	0x00010007

08003290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0202 	mvn.w	r2, #2
 80032bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fae6 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fad8 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fae9 	bl	80038b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d122      	bne.n	8003340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b04      	cmp	r3, #4
 8003306:	d11b      	bne.n	8003340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0204 	mvn.w	r2, #4
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fabc 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 faae 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fabf 	bl	80038b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b08      	cmp	r3, #8
 800334c:	d122      	bne.n	8003394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b08      	cmp	r3, #8
 800335a:	d11b      	bne.n	8003394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0208 	mvn.w	r2, #8
 8003364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2204      	movs	r2, #4
 800336a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa92 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa84 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fa95 	bl	80038b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d122      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d11b      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0210 	mvn.w	r2, #16
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2208      	movs	r2, #8
 80033be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fa68 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa5a 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fa6b 	bl	80038b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0201 	mvn.w	r2, #1
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fa34 	bl	800387c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fe74 	bl	8004128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344e:	d10e      	bne.n	800346e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b80      	cmp	r3, #128	; 0x80
 800345c:	d107      	bne.n	800346e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fe67 	bl	800413c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d10e      	bne.n	800349a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d107      	bne.n	800349a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fa19 	bl	80038cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d10e      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d107      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f06f 0220 	mvn.w	r2, #32
 80034be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fe27 	bl	8004114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0fd      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b14      	cmp	r3, #20
 80034f6:	f200 80f0 	bhi.w	80036da <HAL_TIM_PWM_ConfigChannel+0x20a>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003555 	.word	0x08003555
 8003504:	080036db 	.word	0x080036db
 8003508:	080036db 	.word	0x080036db
 800350c:	080036db 	.word	0x080036db
 8003510:	08003595 	.word	0x08003595
 8003514:	080036db 	.word	0x080036db
 8003518:	080036db 	.word	0x080036db
 800351c:	080036db 	.word	0x080036db
 8003520:	080035d7 	.word	0x080035d7
 8003524:	080036db 	.word	0x080036db
 8003528:	080036db 	.word	0x080036db
 800352c:	080036db 	.word	0x080036db
 8003530:	08003617 	.word	0x08003617
 8003534:	080036db 	.word	0x080036db
 8003538:	080036db 	.word	0x080036db
 800353c:	080036db 	.word	0x080036db
 8003540:	08003659 	.word	0x08003659
 8003544:	080036db 	.word	0x080036db
 8003548:	080036db 	.word	0x080036db
 800354c:	080036db 	.word	0x080036db
 8003550:	08003699 	.word	0x08003699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fa2e 	bl	80039bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0208 	orr.w	r2, r2, #8
 800356e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6999      	ldr	r1, [r3, #24]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	619a      	str	r2, [r3, #24]
      break;
 8003592:	e0a3      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fa8a 	bl	8003ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6999      	ldr	r1, [r3, #24]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	021a      	lsls	r2, r3, #8
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	619a      	str	r2, [r3, #24]
      break;
 80035d4:	e082      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fae3 	bl	8003ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0208 	orr.w	r2, r2, #8
 80035f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0204 	bic.w	r2, r2, #4
 8003600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69d9      	ldr	r1, [r3, #28]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	61da      	str	r2, [r3, #28]
      break;
 8003614:	e062      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fb3b 	bl	8003c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69d9      	ldr	r1, [r3, #28]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	021a      	lsls	r2, r3, #8
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	61da      	str	r2, [r3, #28]
      break;
 8003656:	e041      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fb78 	bl	8003d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0208 	orr.w	r2, r2, #8
 8003672:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003696:	e021      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fbb0 	bl	8003e04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036d8:	e000      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80036da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop

080036f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIM_ConfigClockSource+0x18>
 8003704:	2302      	movs	r3, #2
 8003706:	e0b5      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x184>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800372a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003732:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003744:	d03e      	beq.n	80037c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374a:	f200 8087 	bhi.w	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003752:	f000 8085 	beq.w	8003860 <HAL_TIM_ConfigClockSource+0x170>
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	d87f      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b70      	cmp	r3, #112	; 0x70
 800375e:	d01a      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0xa6>
 8003760:	2b70      	cmp	r3, #112	; 0x70
 8003762:	d87b      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b60      	cmp	r3, #96	; 0x60
 8003766:	d050      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x11a>
 8003768:	2b60      	cmp	r3, #96	; 0x60
 800376a:	d877      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b50      	cmp	r3, #80	; 0x50
 800376e:	d03c      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0xfa>
 8003770:	2b50      	cmp	r3, #80	; 0x50
 8003772:	d873      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d058      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x13a>
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d86f      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b30      	cmp	r3, #48	; 0x30
 800377e:	d064      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	2b30      	cmp	r3, #48	; 0x30
 8003782:	d86b      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b20      	cmp	r3, #32
 8003786:	d060      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	2b20      	cmp	r3, #32
 800378a:	d867      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d05c      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x15a>
 8003790:	2b10      	cmp	r3, #16
 8003792:	d05a      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003794:	e062      	b.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6899      	ldr	r1, [r3, #8]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f000 fc01 	bl	8003fac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	609a      	str	r2, [r3, #8]
      break;
 80037c2:	e04e      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f000 fbea 	bl	8003fac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e6:	609a      	str	r2, [r3, #8]
      break;
 80037e8:	e03b      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 fb5e 	bl	8003eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2150      	movs	r1, #80	; 0x50
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fbb7 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003808:	e02b      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	461a      	mov	r2, r3
 8003818:	f000 fb7d 	bl	8003f16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2160      	movs	r1, #96	; 0x60
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fba7 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003828:	e01b      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	461a      	mov	r2, r3
 8003838:	f000 fb3e 	bl	8003eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2140      	movs	r1, #64	; 0x40
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fb97 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003848:	e00b      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f000 fb8e 	bl	8003f76 <TIM_ITRx_SetConfig>
        break;
 800385a:	e002      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003860:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a2e      	ldr	r2, [pc, #184]	; (80039ac <TIM_Base_SetConfig+0xcc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_Base_SetConfig+0x28>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d003      	beq.n	8003908 <TIM_Base_SetConfig+0x28>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a2b      	ldr	r2, [pc, #172]	; (80039b0 <TIM_Base_SetConfig+0xd0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a23      	ldr	r2, [pc, #140]	; (80039ac <TIM_Base_SetConfig+0xcc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00f      	beq.n	8003942 <TIM_Base_SetConfig+0x62>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003928:	d00b      	beq.n	8003942 <TIM_Base_SetConfig+0x62>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a20      	ldr	r2, [pc, #128]	; (80039b0 <TIM_Base_SetConfig+0xd0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_Base_SetConfig+0x62>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <TIM_Base_SetConfig+0xd4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0x62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <TIM_Base_SetConfig+0xd8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <TIM_Base_SetConfig+0xcc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0xb0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <TIM_Base_SetConfig+0xd4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0xb0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <TIM_Base_SetConfig+0xd8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400

080039bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0201 	bic.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 0302 	bic.w	r3, r3, #2
 8003a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a24      	ldr	r2, [pc, #144]	; (8003aa8 <TIM_OC1_SetConfig+0xec>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <TIM_OC1_SetConfig+0x70>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a23      	ldr	r2, [pc, #140]	; (8003aac <TIM_OC1_SetConfig+0xf0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_OC1_SetConfig+0x70>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <TIM_OC1_SetConfig+0xf4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d10c      	bne.n	8003a46 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0308 	bic.w	r3, r3, #8
 8003a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 0304 	bic.w	r3, r3, #4
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <TIM_OC1_SetConfig+0xec>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <TIM_OC1_SetConfig+0xa2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a16      	ldr	r2, [pc, #88]	; (8003aac <TIM_OC1_SetConfig+0xf0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d003      	beq.n	8003a5e <TIM_OC1_SetConfig+0xa2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <TIM_OC1_SetConfig+0xf4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d111      	bne.n	8003a82 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	621a      	str	r2, [r3, #32]
}
 8003a9c:	bf00      	nop
 8003a9e:	371c      	adds	r7, #28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400

08003ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f023 0210 	bic.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0320 	bic.w	r3, r3, #32
 8003b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <TIM_OC2_SetConfig+0xe8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10d      	bne.n	8003b34 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <TIM_OC2_SetConfig+0xe8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <TIM_OC2_SetConfig+0x98>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <TIM_OC2_SetConfig+0xec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_OC2_SetConfig+0x98>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <TIM_OC2_SetConfig+0xf0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d113      	bne.n	8003b74 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	621a      	str	r2, [r3, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400

08003ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0303 	bic.w	r3, r3, #3
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <TIM_OC3_SetConfig+0xe4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10d      	bne.n	8003c26 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <TIM_OC3_SetConfig+0xe4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d007      	beq.n	8003c3e <TIM_OC3_SetConfig+0x96>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <TIM_OC3_SetConfig+0xe8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <TIM_OC3_SetConfig+0x96>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <TIM_OC3_SetConfig+0xec>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d113      	bne.n	8003c66 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40014400 	.word	0x40014400

08003c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <TIM_OC4_SetConfig+0xb0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d007      	beq.n	8003d0c <TIM_OC4_SetConfig+0x74>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <TIM_OC4_SetConfig+0xb4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC4_SetConfig+0x74>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <TIM_OC4_SetConfig+0xb8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d109      	bne.n	8003d20 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400

08003d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <TIM_OC5_SetConfig+0xa4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_OC5_SetConfig+0x6a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <TIM_OC5_SetConfig+0xa8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC5_SetConfig+0x6a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <TIM_OC5_SetConfig+0xac>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d109      	bne.n	8003dd2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400

08003e04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	051b      	lsls	r3, r3, #20
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <TIM_OC6_SetConfig+0xa8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d007      	beq.n	8003e70 <TIM_OC6_SetConfig+0x6c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <TIM_OC6_SetConfig+0xac>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_OC6_SetConfig+0x6c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <TIM_OC6_SetConfig+0xb0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d109      	bne.n	8003e84 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	029b      	lsls	r3, r3, #10
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400

08003eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f023 0201 	bic.w	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f023 030a 	bic.w	r3, r3, #10
 8003ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b087      	sub	sp, #28
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0210 	bic.w	r2, r3, #16
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	031b      	lsls	r3, r3, #12
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f043 0307 	orr.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	609a      	str	r2, [r3, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	609a      	str	r2, [r3, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2201      	movs	r2, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	43db      	mvns	r3, r3
 800400e:	401a      	ands	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e054      	b.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a24      	ldr	r2, [pc, #144]	; (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00e      	beq.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d009      	beq.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d10c      	bne.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40000400 	.word	0x40000400
 8004110:	40014000 	.word	0x40014000

08004114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e040      	b.n	80041e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc fd40 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	; 0x24
 800417c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f82c 	bl	80041ec <UART_SetConfig>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e022      	b.n	80041e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa7c 	bl	80046a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fb03 	bl	80047e8 <UART_CheckIdleState>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4313      	orrs	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4ba4      	ldr	r3, [pc, #656]	; (80044a8 <UART_SetConfig+0x2bc>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	69f9      	ldr	r1, [r7, #28]
 8004220:	430b      	orrs	r3, r1
 8004222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a99      	ldr	r2, [pc, #612]	; (80044ac <UART_SetConfig+0x2c0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	4313      	orrs	r3, r2
 8004252:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <UART_SetConfig+0x2c4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d121      	bne.n	80042b6 <UART_SetConfig+0xca>
 8004272:	4b90      	ldr	r3, [pc, #576]	; (80044b4 <UART_SetConfig+0x2c8>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d817      	bhi.n	80042b0 <UART_SetConfig+0xc4>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0x9c>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	08004299 	.word	0x08004299
 800428c:	080042a5 	.word	0x080042a5
 8004290:	0800429f 	.word	0x0800429f
 8004294:	080042ab 	.word	0x080042ab
 8004298:	2301      	movs	r3, #1
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e0bc      	b.n	8004418 <UART_SetConfig+0x22c>
 800429e:	2302      	movs	r3, #2
 80042a0:	76fb      	strb	r3, [r7, #27]
 80042a2:	e0b9      	b.n	8004418 <UART_SetConfig+0x22c>
 80042a4:	2304      	movs	r3, #4
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	e0b6      	b.n	8004418 <UART_SetConfig+0x22c>
 80042aa:	2308      	movs	r3, #8
 80042ac:	76fb      	strb	r3, [r7, #27]
 80042ae:	e0b3      	b.n	8004418 <UART_SetConfig+0x22c>
 80042b0:	2310      	movs	r3, #16
 80042b2:	76fb      	strb	r3, [r7, #27]
 80042b4:	e0b0      	b.n	8004418 <UART_SetConfig+0x22c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7f      	ldr	r2, [pc, #508]	; (80044b8 <UART_SetConfig+0x2cc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d132      	bne.n	8004326 <UART_SetConfig+0x13a>
 80042c0:	4b7c      	ldr	r3, [pc, #496]	; (80044b4 <UART_SetConfig+0x2c8>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d828      	bhi.n	8004320 <UART_SetConfig+0x134>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0xe8>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004321 	.word	0x08004321
 80042dc:	08004321 	.word	0x08004321
 80042e0:	08004321 	.word	0x08004321
 80042e4:	08004315 	.word	0x08004315
 80042e8:	08004321 	.word	0x08004321
 80042ec:	08004321 	.word	0x08004321
 80042f0:	08004321 	.word	0x08004321
 80042f4:	0800430f 	.word	0x0800430f
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004321 	.word	0x08004321
 8004304:	0800431b 	.word	0x0800431b
 8004308:	2300      	movs	r3, #0
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e084      	b.n	8004418 <UART_SetConfig+0x22c>
 800430e:	2302      	movs	r3, #2
 8004310:	76fb      	strb	r3, [r7, #27]
 8004312:	e081      	b.n	8004418 <UART_SetConfig+0x22c>
 8004314:	2304      	movs	r3, #4
 8004316:	76fb      	strb	r3, [r7, #27]
 8004318:	e07e      	b.n	8004418 <UART_SetConfig+0x22c>
 800431a:	2308      	movs	r3, #8
 800431c:	76fb      	strb	r3, [r7, #27]
 800431e:	e07b      	b.n	8004418 <UART_SetConfig+0x22c>
 8004320:	2310      	movs	r3, #16
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	e078      	b.n	8004418 <UART_SetConfig+0x22c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a64      	ldr	r2, [pc, #400]	; (80044bc <UART_SetConfig+0x2d0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d120      	bne.n	8004372 <UART_SetConfig+0x186>
 8004330:	4b60      	ldr	r3, [pc, #384]	; (80044b4 <UART_SetConfig+0x2c8>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800433a:	2b30      	cmp	r3, #48	; 0x30
 800433c:	d013      	beq.n	8004366 <UART_SetConfig+0x17a>
 800433e:	2b30      	cmp	r3, #48	; 0x30
 8004340:	d814      	bhi.n	800436c <UART_SetConfig+0x180>
 8004342:	2b20      	cmp	r3, #32
 8004344:	d009      	beq.n	800435a <UART_SetConfig+0x16e>
 8004346:	2b20      	cmp	r3, #32
 8004348:	d810      	bhi.n	800436c <UART_SetConfig+0x180>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <UART_SetConfig+0x168>
 800434e:	2b10      	cmp	r3, #16
 8004350:	d006      	beq.n	8004360 <UART_SetConfig+0x174>
 8004352:	e00b      	b.n	800436c <UART_SetConfig+0x180>
 8004354:	2300      	movs	r3, #0
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e05e      	b.n	8004418 <UART_SetConfig+0x22c>
 800435a:	2302      	movs	r3, #2
 800435c:	76fb      	strb	r3, [r7, #27]
 800435e:	e05b      	b.n	8004418 <UART_SetConfig+0x22c>
 8004360:	2304      	movs	r3, #4
 8004362:	76fb      	strb	r3, [r7, #27]
 8004364:	e058      	b.n	8004418 <UART_SetConfig+0x22c>
 8004366:	2308      	movs	r3, #8
 8004368:	76fb      	strb	r3, [r7, #27]
 800436a:	e055      	b.n	8004418 <UART_SetConfig+0x22c>
 800436c:	2310      	movs	r3, #16
 800436e:	76fb      	strb	r3, [r7, #27]
 8004370:	e052      	b.n	8004418 <UART_SetConfig+0x22c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a52      	ldr	r2, [pc, #328]	; (80044c0 <UART_SetConfig+0x2d4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d120      	bne.n	80043be <UART_SetConfig+0x1d2>
 800437c:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <UART_SetConfig+0x2c8>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004386:	2bc0      	cmp	r3, #192	; 0xc0
 8004388:	d013      	beq.n	80043b2 <UART_SetConfig+0x1c6>
 800438a:	2bc0      	cmp	r3, #192	; 0xc0
 800438c:	d814      	bhi.n	80043b8 <UART_SetConfig+0x1cc>
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d009      	beq.n	80043a6 <UART_SetConfig+0x1ba>
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d810      	bhi.n	80043b8 <UART_SetConfig+0x1cc>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <UART_SetConfig+0x1b4>
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d006      	beq.n	80043ac <UART_SetConfig+0x1c0>
 800439e:	e00b      	b.n	80043b8 <UART_SetConfig+0x1cc>
 80043a0:	2300      	movs	r3, #0
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e038      	b.n	8004418 <UART_SetConfig+0x22c>
 80043a6:	2302      	movs	r3, #2
 80043a8:	76fb      	strb	r3, [r7, #27]
 80043aa:	e035      	b.n	8004418 <UART_SetConfig+0x22c>
 80043ac:	2304      	movs	r3, #4
 80043ae:	76fb      	strb	r3, [r7, #27]
 80043b0:	e032      	b.n	8004418 <UART_SetConfig+0x22c>
 80043b2:	2308      	movs	r3, #8
 80043b4:	76fb      	strb	r3, [r7, #27]
 80043b6:	e02f      	b.n	8004418 <UART_SetConfig+0x22c>
 80043b8:	2310      	movs	r3, #16
 80043ba:	76fb      	strb	r3, [r7, #27]
 80043bc:	e02c      	b.n	8004418 <UART_SetConfig+0x22c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3a      	ldr	r2, [pc, #232]	; (80044ac <UART_SetConfig+0x2c0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d125      	bne.n	8004414 <UART_SetConfig+0x228>
 80043c8:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <UART_SetConfig+0x2c8>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043d6:	d017      	beq.n	8004408 <UART_SetConfig+0x21c>
 80043d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043dc:	d817      	bhi.n	800440e <UART_SetConfig+0x222>
 80043de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e2:	d00b      	beq.n	80043fc <UART_SetConfig+0x210>
 80043e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e8:	d811      	bhi.n	800440e <UART_SetConfig+0x222>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <UART_SetConfig+0x20a>
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f2:	d006      	beq.n	8004402 <UART_SetConfig+0x216>
 80043f4:	e00b      	b.n	800440e <UART_SetConfig+0x222>
 80043f6:	2300      	movs	r3, #0
 80043f8:	76fb      	strb	r3, [r7, #27]
 80043fa:	e00d      	b.n	8004418 <UART_SetConfig+0x22c>
 80043fc:	2302      	movs	r3, #2
 80043fe:	76fb      	strb	r3, [r7, #27]
 8004400:	e00a      	b.n	8004418 <UART_SetConfig+0x22c>
 8004402:	2304      	movs	r3, #4
 8004404:	76fb      	strb	r3, [r7, #27]
 8004406:	e007      	b.n	8004418 <UART_SetConfig+0x22c>
 8004408:	2308      	movs	r3, #8
 800440a:	76fb      	strb	r3, [r7, #27]
 800440c:	e004      	b.n	8004418 <UART_SetConfig+0x22c>
 800440e:	2310      	movs	r3, #16
 8004410:	76fb      	strb	r3, [r7, #27]
 8004412:	e001      	b.n	8004418 <UART_SetConfig+0x22c>
 8004414:	2310      	movs	r3, #16
 8004416:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a23      	ldr	r2, [pc, #140]	; (80044ac <UART_SetConfig+0x2c0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f040 8084 	bne.w	800452c <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004424:	7efb      	ldrb	r3, [r7, #27]
 8004426:	2b08      	cmp	r3, #8
 8004428:	d823      	bhi.n	8004472 <UART_SetConfig+0x286>
 800442a:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <UART_SetConfig+0x244>)
 800442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004430:	08004455 	.word	0x08004455
 8004434:	08004473 	.word	0x08004473
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004473 	.word	0x08004473
 8004440:	08004463 	.word	0x08004463
 8004444:	08004473 	.word	0x08004473
 8004448:	08004473 	.word	0x08004473
 800444c:	08004473 	.word	0x08004473
 8004450:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004454:	f7fe f994 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004458:	6178      	str	r0, [r7, #20]
        break;
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <UART_SetConfig+0x2d8>)
 800445e:	617b      	str	r3, [r7, #20]
        break;
 8004460:	e00c      	b.n	800447c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7fe f8f5 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8004466:	6178      	str	r0, [r7, #20]
        break;
 8004468:	e008      	b.n	800447c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	617b      	str	r3, [r7, #20]
        break;
 8004470:	e004      	b.n	800447c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	76bb      	strb	r3, [r7, #26]
        break;
 800447a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8102 	beq.w	8004688 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	429a      	cmp	r2, r3
 8004492:	d305      	bcc.n	80044a0 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	429a      	cmp	r2, r3
 800449e:	d913      	bls.n	80044c8 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	76bb      	strb	r3, [r7, #26]
 80044a4:	e0f0      	b.n	8004688 <UART_SetConfig+0x49c>
 80044a6:	bf00      	nop
 80044a8:	efff69f3 	.word	0xefff69f3
 80044ac:	40008000 	.word	0x40008000
 80044b0:	40013800 	.word	0x40013800
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40004400 	.word	0x40004400
 80044bc:	40004800 	.word	0x40004800
 80044c0:	40004c00 	.word	0x40004c00
 80044c4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f04f 0100 	mov.w	r1, #0
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	020b      	lsls	r3, r1, #8
 80044da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044de:	0202      	lsls	r2, r0, #8
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	6849      	ldr	r1, [r1, #4]
 80044e4:	0849      	lsrs	r1, r1, #1
 80044e6:	4608      	mov	r0, r1
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	1814      	adds	r4, r2, r0
 80044ee:	eb43 0501 	adc.w	r5, r3, r1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	f7fb fe68 	bl	80001d4 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4613      	mov	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004512:	d308      	bcc.n	8004526 <UART_SetConfig+0x33a>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d204      	bcs.n	8004526 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	e0b0      	b.n	8004688 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	76bb      	strb	r3, [r7, #26]
 800452a:	e0ad      	b.n	8004688 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004534:	d15c      	bne.n	80045f0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004536:	7efb      	ldrb	r3, [r7, #27]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d828      	bhi.n	800458e <UART_SetConfig+0x3a2>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x358>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004569 	.word	0x08004569
 8004548:	08004571 	.word	0x08004571
 800454c:	08004579 	.word	0x08004579
 8004550:	0800458f 	.word	0x0800458f
 8004554:	0800457f 	.word	0x0800457f
 8004558:	0800458f 	.word	0x0800458f
 800455c:	0800458f 	.word	0x0800458f
 8004560:	0800458f 	.word	0x0800458f
 8004564:	08004587 	.word	0x08004587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004568:	f7fe f90a 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 800456c:	6178      	str	r0, [r7, #20]
        break;
 800456e:	e013      	b.n	8004598 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004570:	f7fe f91c 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8004574:	6178      	str	r0, [r7, #20]
        break;
 8004576:	e00f      	b.n	8004598 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004578:	4b49      	ldr	r3, [pc, #292]	; (80046a0 <UART_SetConfig+0x4b4>)
 800457a:	617b      	str	r3, [r7, #20]
        break;
 800457c:	e00c      	b.n	8004598 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457e:	f7fe f867 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8004582:	6178      	str	r0, [r7, #20]
        break;
 8004584:	e008      	b.n	8004598 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458a:	617b      	str	r3, [r7, #20]
        break;
 800458c:	e004      	b.n	8004598 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	76bb      	strb	r3, [r7, #26]
        break;
 8004596:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d074      	beq.n	8004688 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	005a      	lsls	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d916      	bls.n	80045ea <UART_SetConfig+0x3fe>
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c2:	d212      	bcs.n	80045ea <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f023 030f 	bic.w	r3, r3, #15
 80045cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	b29a      	uxth	r2, r3
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	4313      	orrs	r3, r2
 80045de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	89fa      	ldrh	r2, [r7, #14]
 80045e6:	60da      	str	r2, [r3, #12]
 80045e8:	e04e      	b.n	8004688 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	76bb      	strb	r3, [r7, #26]
 80045ee:	e04b      	b.n	8004688 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f0:	7efb      	ldrb	r3, [r7, #27]
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d827      	bhi.n	8004646 <UART_SetConfig+0x45a>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x410>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004629 	.word	0x08004629
 8004604:	08004631 	.word	0x08004631
 8004608:	08004647 	.word	0x08004647
 800460c:	08004637 	.word	0x08004637
 8004610:	08004647 	.word	0x08004647
 8004614:	08004647 	.word	0x08004647
 8004618:	08004647 	.word	0x08004647
 800461c:	0800463f 	.word	0x0800463f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004620:	f7fe f8ae 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004624:	6178      	str	r0, [r7, #20]
        break;
 8004626:	e013      	b.n	8004650 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7fe f8c0 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 800462c:	6178      	str	r0, [r7, #20]
        break;
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <UART_SetConfig+0x4b4>)
 8004632:	617b      	str	r3, [r7, #20]
        break;
 8004634:	e00c      	b.n	8004650 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004636:	f7fe f80b 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800463a:	6178      	str	r0, [r7, #20]
        break;
 800463c:	e008      	b.n	8004650 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004642:	617b      	str	r3, [r7, #20]
        break;
 8004644:	e004      	b.n	8004650 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	76bb      	strb	r3, [r7, #26]
        break;
 800464e:	bf00      	nop
    }

    if (pclk != 0U)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	085a      	lsrs	r2, r3, #1
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	441a      	add	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	b29b      	uxth	r3, r3
 800466a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	d908      	bls.n	8004684 <UART_SetConfig+0x498>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004678:	d204      	bcs.n	8004684 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	e001      	b.n	8004688 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004694:	7ebb      	ldrb	r3, [r7, #26]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bdb0      	pop	{r4, r5, r7, pc}
 800469e:	bf00      	nop
 80046a0:	00f42400 	.word	0x00f42400

080046a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01a      	beq.n	80047ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a2:	d10a      	bne.n	80047ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f8:	f7fc fb62 	bl	8000ec0 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10e      	bne.n	800482a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800480c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f82d 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e023      	b.n	8004872 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d10e      	bne.n	8004856 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f817 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e00d      	b.n	8004872 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	e05e      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d05a      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004894:	f7fc fb14 	bl	8000ec0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <UART_WaitOnFlagUntilTimeout+0x30>
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d11b      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e043      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d02c      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fe:	d124      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004908:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004918:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e00f      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	429a      	cmp	r2, r3
 8004966:	d091      	beq.n	800488c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <__libc_init_array>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	4d0d      	ldr	r5, [pc, #52]	; (80049ac <__libc_init_array+0x38>)
 8004978:	4c0d      	ldr	r4, [pc, #52]	; (80049b0 <__libc_init_array+0x3c>)
 800497a:	1b64      	subs	r4, r4, r5
 800497c:	10a4      	asrs	r4, r4, #2
 800497e:	2600      	movs	r6, #0
 8004980:	42a6      	cmp	r6, r4
 8004982:	d109      	bne.n	8004998 <__libc_init_array+0x24>
 8004984:	4d0b      	ldr	r5, [pc, #44]	; (80049b4 <__libc_init_array+0x40>)
 8004986:	4c0c      	ldr	r4, [pc, #48]	; (80049b8 <__libc_init_array+0x44>)
 8004988:	f000 f820 	bl	80049cc <_init>
 800498c:	1b64      	subs	r4, r4, r5
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	2600      	movs	r6, #0
 8004992:	42a6      	cmp	r6, r4
 8004994:	d105      	bne.n	80049a2 <__libc_init_array+0x2e>
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	f855 3b04 	ldr.w	r3, [r5], #4
 800499c:	4798      	blx	r3
 800499e:	3601      	adds	r6, #1
 80049a0:	e7ee      	b.n	8004980 <__libc_init_array+0xc>
 80049a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a6:	4798      	blx	r3
 80049a8:	3601      	adds	r6, #1
 80049aa:	e7f2      	b.n	8004992 <__libc_init_array+0x1e>
 80049ac:	08004a34 	.word	0x08004a34
 80049b0:	08004a34 	.word	0x08004a34
 80049b4:	08004a34 	.word	0x08004a34
 80049b8:	08004a38 	.word	0x08004a38

080049bc <memset>:
 80049bc:	4402      	add	r2, r0
 80049be:	4603      	mov	r3, r0
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d100      	bne.n	80049c6 <memset+0xa>
 80049c4:	4770      	bx	lr
 80049c6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ca:	e7f9      	b.n	80049c0 <memset+0x4>

080049cc <_init>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr

080049d8 <_fini>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr
