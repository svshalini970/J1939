
BCU-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a9c  08004a9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a9c  08004a9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a9c  08004a9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  20000010  08004ab0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08004ab0  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014388  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fb  00000000  00000000  000343c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00036cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00037af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bd0  00000000  00000000  00038828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001027c  00000000  00000000  0005c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8664  00000000  00000000  0006c674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  00144d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004a44 	.word	0x08004a44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004a44 	.word	0x08004a44

080001d4 <SendOneMessage>:
/**
* @param[in] J1939_MESSAGE *
* @note sends *MsgPtr information, all data fields (such as data length, priority, and source address) must have been set. \n
*/
void SendOneMessage(J1939_MESSAGE *MsgPtr)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    //Set the last part of the message to ensure that the DataLength specification. (Refer to CAN B2.0)
    MsgPtr->Mxe.Res = 0; //Refer to the data link layer of J1939 (SAE J1939-21)
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	7813      	ldrb	r3, [r2, #0]
 80001e0:	f36f 0341 	bfc	r3, #1, #1
 80001e4:	7013      	strb	r3, [r2, #0]
    MsgPtr->Mxe.RTR = 0;
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	7913      	ldrb	r3, [r2, #4]
 80001ea:	f36f 1307 	bfc	r3, #4, #4
 80001ee:	7113      	strb	r3, [r2, #4]
    if (MsgPtr->Mxe.DataLength > 8)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	791b      	ldrb	r3, [r3, #4]
 80001f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	2b08      	cmp	r3, #8
 80001fc:	d905      	bls.n	800020a <SendOneMessage+0x36>
        MsgPtr->Mxe.DataLength = 8;
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	7913      	ldrb	r3, [r2, #4]
 8000202:	2108      	movs	r1, #8
 8000204:	f361 0303 	bfi	r3, r1, #0, #4
 8000208:	7113      	strb	r3, [r2, #4]
    //Send a frame of message and load all the messages in J1939_MESSAGE into the own structure of the can module
    Port_CAN_Transmit(MsgPtr);
 800020a:	6878      	ldr	r0, [r7, #4]
 800020c:	f001 f8dc 	bl	80013c8 <J1939_CAN_Transmit>
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <J1939_EnqueueMessage>:
* @note This program puts *MsgPtr in the message queue\n
If the information cannot be enqueued or sent, there will be a corresponding return prompt,\n
If the transmit interrupt is set (available), when the message is queued, the transmit interrupt is enabled
*/
j1939_uint8_t J1939_EnqueueMessage(J1939_MESSAGE *MsgPtr)
{
 8000218:	b4b0      	push	{r4, r5, r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    j1939_uint8_t _rc = RC_SUCCESS;
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]

    if (0)
        _rc = RC_CANNOTTRANSMIT;
    else
    {
        if ((J1939_OVERWRITE_TX_QUEUE == J1939_TRUE) ||
 8000224:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <J1939_EnqueueMessage+0x80>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b04      	cmp	r3, #4
 800022a:	d82d      	bhi.n	8000288 <J1939_EnqueueMessage+0x70>
            (TTXQueueCount < J1939_TX_QUEUE_SIZE))
        {
            if (TTXQueueCount < J1939_TX_QUEUE_SIZE)
 800022c:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <J1939_EnqueueMessage+0x80>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b04      	cmp	r3, #4
 8000232:	d813      	bhi.n	800025c <J1939_EnqueueMessage+0x44>
            {
                TTXQueueCount++;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <J1939_EnqueueMessage+0x80>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	b2da      	uxtb	r2, r3
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <J1939_EnqueueMessage+0x80>)
 800023e:	701a      	strb	r2, [r3, #0]
                TXTail++;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <J1939_EnqueueMessage+0x84>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	3301      	adds	r3, #1
 8000246:	b2da      	uxtb	r2, r3
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <J1939_EnqueueMessage+0x84>)
 800024a:	701a      	strb	r2, [r3, #0]
                if (TXTail >= J1939_TX_QUEUE_SIZE)
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <J1939_EnqueueMessage+0x84>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b04      	cmp	r3, #4
 8000252:	d908      	bls.n	8000266 <J1939_EnqueueMessage+0x4e>
                    TXTail = 0;
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <J1939_EnqueueMessage+0x84>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
 800025a:	e004      	b.n	8000266 <J1939_EnqueueMessage+0x4e>
            }
            else
            {
                J1939_Flags.TransmitMessagesdCover = 1; //Send data is covered, the previous frame data is covered
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <J1939_EnqueueMessage+0x88>)
 800025e:	7813      	ldrb	r3, [r2, #0]
 8000260:	f043 0301 	orr.w	r3, r3, #1
 8000264:	7013      	strb	r3, [r2, #0]
            }
            TXQueue[TXTail] = *MsgPtr;
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <J1939_EnqueueMessage+0x84>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4619      	mov	r1, r3
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <J1939_EnqueueMessage+0x8c>)
 800026e:	460b      	mov	r3, r1
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	440b      	add	r3, r1
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	441a      	add	r2, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4614      	mov	r4, r2
 800027c:	461d      	mov	r5, r3
 800027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000282:	682b      	ldr	r3, [r5, #0]
 8000284:	6023      	str	r3, [r4, #0]
 8000286:	e001      	b.n	800028c <J1939_EnqueueMessage+0x74>
        }
        else
            _rc = RC_QUEUEFULL;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
#if J1939_POLL_ECAN == J1939_FALSE
    Port_TXinterruptEnable();
    //Trigger to send interrupt
    Port_TXinterruptOk();
#endif
    return _rc;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bcb0      	pop	{r4, r5, r7}
 8000296:	4770      	bx	lr
 8000298:	20000170 	.word	0x20000170
 800029c:	2000033c 	.word	0x2000033c
 80002a0:	20000148 	.word	0x20000148
 80002a4:	20000350 	.word	0x20000350

080002a8 <J1939_Send_Message>:
* @return RC_QUEUEFULL Sending the message is unsuccessful, the sending queue is full, and the message entering the queue fails
* @return RC_CANNOTTRANSMIT Sending the message is unsuccessful, the system cannot send the message currently
* @note If the message cannot be enqueued or sent, there will be a corresponding return prompt,\n
*/
j1939_uint8_t J1939_Send_Message(J1939_MESSAGE *MsgPtr)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
    return J1939_EnqueueMessage(MsgPtr);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f7ff ffb1 	bl	8000218 <J1939_EnqueueMessage>
 80002b6:	4603      	mov	r3, r0
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <J1939_Initialization>:
*
* @note This code is called during system initialization, (placed after CAN device initialization)\n
Initialize J1939 global variables\n
*/
void J1939_Initialization()
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    /*Initialize global variables*/
    J1939_Flags.FlagVal = 0; //No address is declared, other flags will be set to 0 (reset)
 80002c4:	4b29      	ldr	r3, [pc, #164]	; (800036c <J1939_Initialization+0xac>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]

    /*Initialize receiving and sending queues*/
    TXHead = 0;
 80002ca:	4b29      	ldr	r3, [pc, #164]	; (8000370 <J1939_Initialization+0xb0>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
    TXTail = 0xFF;
 80002d0:	4b28      	ldr	r3, [pc, #160]	; (8000374 <J1939_Initialization+0xb4>)
 80002d2:	22ff      	movs	r2, #255	; 0xff
 80002d4:	701a      	strb	r2, [r3, #0]
    RXHead = 0;
 80002d6:	4b28      	ldr	r3, [pc, #160]	; (8000378 <J1939_Initialization+0xb8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
    RXTail = 0xFF;
 80002dc:	4b27      	ldr	r3, [pc, #156]	; (800037c <J1939_Initialization+0xbc>)
 80002de:	22ff      	movs	r2, #255	; 0xff
 80002e0:	701a      	strb	r2, [r3, #0]
    TTXQueueCount = 0;
 80002e2:	4b27      	ldr	r3, [pc, #156]	; (8000380 <J1939_Initialization+0xc0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
    RXQueueCount = 0;
 80002e8:	4b26      	ldr	r3, [pc, #152]	; (8000384 <J1939_Initialization+0xc4>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]
    /*Initialize node address*/
    NodeAddress = J1939_STARTING_ADDRESS_1;
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <J1939_Initialization+0xc8>)
 80002f0:	2211      	movs	r2, #17
 80002f2:	701a      	strb	r2, [r3, #0]

    /*Initialize the selection of CAN nodes*/
    /*Initialize the request list*/
    REQUEST_LIST.PGN = 0;
 80002f4:	4b25      	ldr	r3, [pc, #148]	; (800038c <J1939_Initialization+0xcc>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
    REQUEST_LIST.data = J1939_NULL;
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <J1939_Initialization+0xcc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
    REQUEST_LIST.update = J1939_NULL;
 8000300:	4b22      	ldr	r3, [pc, #136]	; (800038c <J1939_Initialization+0xcc>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
    REQUEST_LIST.lenght = 0;
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <J1939_Initialization+0xcc>)
 8000308:	2200      	movs	r2, #0
 800030a:	809a      	strh	r2, [r3, #4]

    REQUEST_LIST.next = J1939_NULL;
 800030c:	4b1f      	ldr	r3, [pc, #124]	; (800038c <J1939_Initialization+0xcc>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
    /*Set the TP protocol to idle*/
#if J1939_TP_RX_TX
    J1939_TP_State_t = J1939_TP_NULL;
 8000312:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <J1939_Initialization+0xd0>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]

    TP_TX_MSG.packets_request_num = 0;
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <J1939_Initialization+0xd4>)
 800031a:	2200      	movs	r2, #0
 800031c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_TX_MSG.packets_total = 0;
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <J1939_Initialization+0xd4>)
 8000322:	2200      	movs	r2, #0
 8000324:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    TP_TX_MSG.packet_offset_p = 0;
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <J1939_Initialization+0xd4>)
 800032a:	2200      	movs	r2, #0
 800032c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    TP_TX_MSG.time = 0;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <J1939_Initialization+0xd4>)
 8000332:	2200      	movs	r2, #0
 8000334:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    TP_TX_MSG.state = J1939_TP_TX_WAIT;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <J1939_Initialization+0xd4>)
 800033a:	2200      	movs	r2, #0
 800033c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    TP_RX_MSG.packets_ok_num = 0;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <J1939_Initialization+0xd8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
    TP_RX_MSG.packets_total = 0;
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <J1939_Initialization+0xd8>)
 800034a:	2200      	movs	r2, #0
 800034c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_RX_MSG.time = 0;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <J1939_Initialization+0xd8>)
 8000352:	2200      	movs	r2, #0
 8000354:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    TP_RX_MSG.state = J1939_TP_RX_WAIT;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <J1939_Initialization+0xd8>)
 800035a:	2200      	movs	r2, #0
 800035c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
#endif
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20000148 	.word	0x20000148
 8000370:	200003c8 	.word	0x200003c8
 8000374:	2000033c 	.word	0x2000033c
 8000378:	20000144 	.word	0x20000144
 800037c:	2000003e 	.word	0x2000003e
 8000380:	20000170 	.word	0x20000170
 8000384:	20000149 	.word	0x20000149
 8000388:	2000003c 	.word	0x2000003c
 800038c:	200003b4 	.word	0x200003b4
 8000390:	2000003d 	.word	0x2000003d
 8000394:	2000023c 	.word	0x2000023c
 8000398:	20000044 	.word	0x20000044

0800039c <J1939_Poll>:
        If the interrupt mode is used, this program will not process receiving and sending messages, only address contention timeout. \n
*/
//Declare TP polling function
void J1939_TP_Poll();
void J1939_Poll()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
    //We must call the J1939_ReceiveMessages accept function before the time is reset to 0.
#if J1939_POLL_ECAN == J1939_TRUE

    //J1939_Address = NodeAddress;//TODO :remove
    J1939_ReceiveMessages();
 80003a0:	f000 f830 	bl	8000404 <J1939_ReceiveMessages>
    J1939_TransmitMessages();
 80003a4:	f000 fa9a 	bl	80008dc <J1939_TransmitMessages>

#if J1939_TP_RX_TX
    J1939_TP_Poll();
 80003a8:	f000 fd64 	bl	8000e74 <J1939_TP_Poll>
#endif //J1939_TP_RX_TX
#endif //J1939_POLL_ECAN == J1939_TRUE
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <J1939_Messages_Filter>:
        1. Set filter 0 to only accept broadcast information (PF = 240 -255).
        2. Set filter 1, 2 only accept global address (J1939_GLOBAL_ADDRESS)
        3. As the program runs, filter 2 will be changed to adapt to the program logic.
*/
j1939_uint8_t J1939_Messages_Filter(J1939_MESSAGE *MsgPtr)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
    /*Filter 0*/
    if ((MsgPtr->Mxe.PDUFormat) >= 240)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	785b      	ldrb	r3, [r3, #1]
 80003bc:	2bef      	cmp	r3, #239	; 0xef
 80003be:	d901      	bls.n	80003c4 <J1939_Messages_Filter+0x14>
    {
        return RC_SUCCESS;
 80003c0:	2300      	movs	r3, #0
 80003c2:	e016      	b.n	80003f2 <J1939_Messages_Filter+0x42>
    }
    /*Filter 1*/
    if (((MsgPtr->Mxe.PDUFormat) < 240) && (MsgPtr->Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS))
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	785b      	ldrb	r3, [r3, #1]
 80003c8:	2bef      	cmp	r3, #239	; 0xef
 80003ca:	d805      	bhi.n	80003d8 <J1939_Messages_Filter+0x28>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	789b      	ldrb	r3, [r3, #2]
 80003d0:	2bff      	cmp	r3, #255	; 0xff
 80003d2:	d101      	bne.n	80003d8 <J1939_Messages_Filter+0x28>
    {
        return RC_SUCCESS;
 80003d4:	2300      	movs	r3, #0
 80003d6:	e00c      	b.n	80003f2 <J1939_Messages_Filter+0x42>
    }

        if (((MsgPtr->Mxe.PDUFormat) < 240) && (MsgPtr->Mxe.PDUSpecific == NodeAddress))
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	785b      	ldrb	r3, [r3, #1]
 80003dc:	2bef      	cmp	r3, #239	; 0xef
 80003de:	d807      	bhi.n	80003f0 <J1939_Messages_Filter+0x40>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	789a      	ldrb	r2, [r3, #2]
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <J1939_Messages_Filter+0x50>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d101      	bne.n	80003f0 <J1939_Messages_Filter+0x40>
        {
            return RC_SUCCESS;
 80003ec:	2300      	movs	r3, #0
 80003ee:	e000      	b.n	80003f2 <J1939_Messages_Filter+0x42>
        }

    return RC_CANNOTTRANSMIT;
 80003f0:	2302      	movs	r3, #2
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	2000003c 	.word	0x2000003c

08000404 <J1939_ReceiveMessages>:
        If the information is a network management information or long frame transmission (TP), the received information will be processed in this function. \n
        Otherwise, the information will be placed in the user's receiving queue. \n
        Note: The interrupt is disabled during the running of this program. \n
*/
void J1939_ReceiveMessages(void)
{
 8000404:	b5b0      	push	{r4, r5, r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
#if J1939_TP_RX_TX
    j1939_uint32_t _pgn = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
#endif //J1939_TP_RX_TX
    /*Read information from the receiving cache to OneMessage, OneMessage is a global variable*/
    /*Port_CAN_Receive function reads data and returns 1, and returns 0 if there is no data*/
    if (Port_CAN_Receive(&OneMessage))
 800040e:	4873      	ldr	r0, [pc, #460]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000410:	f001 f830 	bl	8001474 <J1939_CAN_Receive>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	f000 8251 	beq.w	80008be <J1939_ReceiveMessages+0x4ba>
    {
#if J1939SoftwareFilterEn == J1939_TRUE
        if (J1939_Messages_Filter(&OneMessage) != RC_SUCCESS)
 800041c:	486f      	ldr	r0, [pc, #444]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 800041e:	f7ff ffc7 	bl	80003b0 <J1939_Messages_Filter>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	f040 8247 	bne.w	80008b8 <J1939_ReceiveMessages+0x4b4>
        {
            return;
        }
#endif //J1939SoftwareFilterEn
        switch (OneMessage.Mxe.PDUFormat)
 800042a:	4b6c      	ldr	r3, [pc, #432]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 800042c:	785b      	ldrb	r3, [r3, #1]
 800042e:	2bec      	cmp	r3, #236	; 0xec
 8000430:	d009      	beq.n	8000446 <J1939_ReceiveMessages+0x42>
 8000432:	2bec      	cmp	r3, #236	; 0xec
 8000434:	f300 81bc 	bgt.w	80007b0 <J1939_ReceiveMessages+0x3ac>
 8000438:	2bea      	cmp	r3, #234	; 0xea
 800043a:	f000 8170 	beq.w	800071e <J1939_ReceiveMessages+0x31a>
 800043e:	2beb      	cmp	r3, #235	; 0xeb
 8000440:	f000 80d4 	beq.w	80005ec <J1939_ReceiveMessages+0x1e8>
 8000444:	e1b4      	b.n	80007b0 <J1939_ReceiveMessages+0x3ac>
        {
#if J1939_TP_RX_TX
        case J1939_PF_TP_CM: //Refer to J1939-21 TP multi-frame transmission protocol
            _pgn = (j1939_uint32_t)((OneMessage.Mxe.Data[7] << 16) & 0xFF0000) + (j1939_uint32_t)((OneMessage.Mxe.Data[6] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[5]) & 0xFF);
 8000446:	4b65      	ldr	r3, [pc, #404]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000448:	7b1b      	ldrb	r3, [r3, #12]
 800044a:	041b      	lsls	r3, r3, #16
 800044c:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000450:	4b62      	ldr	r3, [pc, #392]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000452:	7adb      	ldrb	r3, [r3, #11]
 8000454:	021b      	lsls	r3, r3, #8
 8000456:	b29b      	uxth	r3, r3
 8000458:	4313      	orrs	r3, r2
 800045a:	4a60      	ldr	r2, [pc, #384]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 800045c:	7a92      	ldrb	r2, [r2, #10]
 800045e:	4413      	add	r3, r2
 8000460:	607b      	str	r3, [r7, #4]
            if ((J1939_TP_State_t == J1939_TP_NULL) && (TP_RX_MSG.state == J1939_TP_RX_WAIT))
 8000462:	4b5f      	ldr	r3, [pc, #380]	; (80005e0 <J1939_ReceiveMessages+0x1dc>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d154      	bne.n	8000514 <J1939_ReceiveMessages+0x110>
 800046a:	4b5e      	ldr	r3, [pc, #376]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 800046c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8000470:	2b00      	cmp	r3, #0
 8000472:	d14f      	bne.n	8000514 <J1939_ReceiveMessages+0x110>
            {
                if (OneMessage.Mxe.Data[0] == 16)
 8000474:	4b59      	ldr	r3, [pc, #356]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000476:	795b      	ldrb	r3, [r3, #5]
 8000478:	2b10      	cmp	r3, #16
 800047a:	f040 8196 	bne.w	80007aa <J1939_ReceiveMessages+0x3a6>
                {
                    J1939_TP_State_t = J1939_TP_RX;
 800047e:	4b58      	ldr	r3, [pc, #352]	; (80005e0 <J1939_ReceiveMessages+0x1dc>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]

                    TP_RX_MSG.tp_rx_msg.SA = OneMessage.Mxe.SourceAddress;
 8000484:	4b55      	ldr	r3, [pc, #340]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000486:	78da      	ldrb	r2, [r3, #3]
 8000488:	4b56      	ldr	r3, [pc, #344]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 800048a:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
                    TP_RX_MSG.tp_rx_msg.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[7] << 16) & 0xFF0000) + (j1939_uint32_t)((OneMessage.Mxe.Data[6] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[5]) & 0xFF);
 800048e:	4b53      	ldr	r3, [pc, #332]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000490:	7b1b      	ldrb	r3, [r3, #12]
 8000492:	041b      	lsls	r3, r3, #16
 8000494:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000498:	4b50      	ldr	r3, [pc, #320]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 800049a:	7adb      	ldrb	r3, [r3, #11]
 800049c:	021b      	lsls	r3, r3, #8
 800049e:	b29b      	uxth	r3, r3
 80004a0:	4313      	orrs	r3, r2
 80004a2:	4a4e      	ldr	r2, [pc, #312]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 80004a4:	7a92      	ldrb	r2, [r2, #10]
 80004a6:	4413      	add	r3, r2
 80004a8:	4a4e      	ldr	r2, [pc, #312]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 80004aa:	6013      	str	r3, [r2, #0]
                    /*If the system is busy*/
                    if (TP_RX_MSG.osbusy)
 80004ac:	4b4d      	ldr	r3, [pc, #308]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 80004ae:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d004      	beq.n	80004c0 <J1939_ReceiveMessages+0xbc>
                    {
                        TP_RX_MSG.state = J1939_TP_RX_ERROR;
 80004b6:	4b4b      	ldr	r3, [pc, #300]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 80004b8:	2203      	movs	r2, #3
 80004ba:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                        break;
 80004be:	e1fe      	b.n	80008be <J1939_ReceiveMessages+0x4ba>
                    }
                    /* Determine whether there is enough memory to receive data, if not directly, disconnect the connection*/
                    if (((j1939_uint32_t)((OneMessage.Mxe.Data[2] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[1]) & 0xFF)) > J1939_TP_MAX_MESSAGE_LENGTH)
 80004c0:	4b46      	ldr	r3, [pc, #280]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 80004c2:	79db      	ldrb	r3, [r3, #7]
 80004c4:	021b      	lsls	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	4a44      	ldr	r2, [pc, #272]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 80004ca:	7992      	ldrb	r2, [r2, #6]
 80004cc:	4413      	add	r3, r2
 80004ce:	2bf0      	cmp	r3, #240	; 0xf0
 80004d0:	d904      	bls.n	80004dc <J1939_ReceiveMessages+0xd8>
                    {
                        TP_RX_MSG.state = J1939_TP_RX_ERROR;
 80004d2:	4b44      	ldr	r3, [pc, #272]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 80004d4:	2203      	movs	r2, #3
 80004d6:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                        break;
 80004da:	e1f0      	b.n	80008be <J1939_ReceiveMessages+0x4ba>
                    }
                    TP_RX_MSG.tp_rx_msg.byte_count = ((j1939_uint32_t)((OneMessage.Mxe.Data[2] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[1]) & 0xFF));
 80004dc:	4b3f      	ldr	r3, [pc, #252]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 80004de:	79db      	ldrb	r3, [r3, #7]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 80004e8:	799b      	ldrb	r3, [r3, #6]
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	4413      	add	r3, r2
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	4b3c      	ldr	r3, [pc, #240]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 80004f2:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
                    TP_RX_MSG.packets_total = OneMessage.Mxe.Data[3];
 80004f6:	4b39      	ldr	r3, [pc, #228]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 80004f8:	7a1a      	ldrb	r2, [r3, #8]
 80004fa:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 80004fc:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                    TP_RX_MSG.time = J1939_TP_T2;
 8000500:	4b38      	ldr	r3, [pc, #224]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 8000502:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000506:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
                    TP_RX_MSG.state = J1939_TP_RX_READ_DATA;
 800050a:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <J1939_ReceiveMessages+0x1e0>)
 800050c:	2201      	movs	r2, #1
 800050e:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                    break;
 8000512:	e1d4      	b.n	80008be <J1939_ReceiveMessages+0x4ba>
                }
                goto PutInReceiveQueue;
                break;
            }
            if (J1939_TP_State_t == J1939_TP_TX)
 8000514:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <J1939_ReceiveMessages+0x1dc>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d152      	bne.n	80005c2 <J1939_ReceiveMessages+0x1be>
            {
                /*Check PGN*/
                if (_pgn == TP_TX_MSG.tp_tx_msg.PGN)
 800051c:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	429a      	cmp	r2, r3
 8000524:	d14d      	bne.n	80005c2 <J1939_ReceiveMessages+0x1be>
                {
                    switch (OneMessage.Mxe.Data[0])
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	2bff      	cmp	r3, #255	; 0xff
 800052c:	d04b      	beq.n	80005c6 <J1939_ReceiveMessages+0x1c2>
 800052e:	2bff      	cmp	r3, #255	; 0xff
 8000530:	dc4b      	bgt.n	80005ca <J1939_ReceiveMessages+0x1c6>
 8000532:	2b13      	cmp	r3, #19
 8000534:	d03b      	beq.n	80005ae <J1939_ReceiveMessages+0x1aa>
 8000536:	2b13      	cmp	r3, #19
 8000538:	dc47      	bgt.n	80005ca <J1939_ReceiveMessages+0x1c6>
 800053a:	2b10      	cmp	r3, #16
 800053c:	d047      	beq.n	80005ce <J1939_ReceiveMessages+0x1ca>
 800053e:	2b11      	cmp	r3, #17
 8000540:	d143      	bne.n	80005ca <J1939_ReceiveMessages+0x1c6>
                    case J1939_RTS_CONTROL_BYTE:
                        /* The program runs here, indicating that a virtual link has been established with device 1 in the network (as the sender), but a link request from device 2 has been received, and the same PGN message request*/
                        /* According to the data link layer of J1939-21, we need to keep the original link and do nothing. Device 2 will automatically give up the link for timeout */
                        break;
                    case J1939_CTS_CONTROL_BYTE:
                        if ((J1939_TP_TX_CM_WAIT == TP_TX_MSG.state) || (J1939_TP_WAIT_ACK == TP_TX_MSG.state))
 8000542:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 8000544:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000548:	2b02      	cmp	r3, #2
 800054a:	d004      	beq.n	8000556 <J1939_ReceiveMessages+0x152>
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 800054e:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000552:	2b04      	cmp	r3, #4
 8000554:	d13d      	bne.n	80005d2 <J1939_ReceiveMessages+0x1ce>
                        {
                            /* Send and wait to be held */
                            if (0x00u == OneMessage.Mxe.Data[1])
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000558:	799b      	ldrb	r3, [r3, #6]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d105      	bne.n	800056a <J1939_ReceiveMessages+0x166>
                            {
                                /* Refresh waiting counter */
                                TP_TX_MSG.time = J1939_TP_T4;
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 8000560:	f240 421a 	movw	r2, #1050	; 0x41a
 8000564:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
                                    TP_TX_MSG.packet_offset_p = (j1939_uint8_t)(OneMessage.Mxe.Data[2] - 1);
                                    TP_TX_MSG.state = J1939_TP_TX_DT;
                                }
                            }
                        }
                        break;
 8000568:	e033      	b.n	80005d2 <J1939_ReceiveMessages+0x1ce>
                                if ((OneMessage.Mxe.Data[2] + OneMessage.Mxe.Data[1]) > (TP_TX_MSG.packets_total + 1))
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 800056c:	79db      	ldrb	r3, [r3, #7]
 800056e:	461a      	mov	r2, r3
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000572:	799b      	ldrb	r3, [r3, #6]
 8000574:	441a      	add	r2, r3
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 8000578:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800057c:	3301      	adds	r3, #1
 800057e:	429a      	cmp	r2, r3
 8000580:	dd04      	ble.n	800058c <J1939_ReceiveMessages+0x188>
                                    TP_TX_MSG.state = J1939_TP_TX_ERROR;
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 8000584:	2205      	movs	r2, #5
 8000586:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        break;
 800058a:	e022      	b.n	80005d2 <J1939_ReceiveMessages+0x1ce>
                                    TP_TX_MSG.packets_request_num = OneMessage.Mxe.Data[1];
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 800058e:	799a      	ldrb	r2, [r3, #6]
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 8000592:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                                    TP_TX_MSG.packet_offset_p = (j1939_uint8_t)(OneMessage.Mxe.Data[2] - 1);
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <J1939_ReceiveMessages+0x1d8>)
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	3b01      	subs	r3, #1
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 80005a0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
                                    TP_TX_MSG.state = J1939_TP_TX_DT;
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        break;
 80005ac:	e011      	b.n	80005d2 <J1939_ReceiveMessages+0x1ce>
                    case J1939_EOMACK_CONTROL_BYTE:
                        if (J1939_TP_WAIT_ACK == TP_TX_MSG.state)
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 80005b0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d10e      	bne.n	80005d6 <J1939_ReceiveMessages+0x1d2>
                        {
                            TP_TX_MSG.state = J1939_TX_DONE;
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <J1939_ReceiveMessages+0x1e4>)
 80005ba:	2206      	movs	r2, #6
 80005bc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        }
                        //Here can add a verification of the data
                        break;
 80005c0:	e009      	b.n	80005d6 <J1939_ReceiveMessages+0x1d2>
                        //Receive a connection abandonment, do nothing, the agreement will actively abandon the connection after a delay
                        break;
                    default:
                        break;
                    }
                }
 80005c2:	bf00      	nop
 80005c4:	e0f4      	b.n	80007b0 <J1939_ReceiveMessages+0x3ac>
                        break;
 80005c6:	bf00      	nop
 80005c8:	e0f2      	b.n	80007b0 <J1939_ReceiveMessages+0x3ac>
                        break;
 80005ca:	bf00      	nop
 80005cc:	e0f0      	b.n	80007b0 <J1939_ReceiveMessages+0x3ac>
                        break;
 80005ce:	bf00      	nop
 80005d0:	e0ee      	b.n	80007b0 <J1939_ReceiveMessages+0x3ac>
                        break;
 80005d2:	bf00      	nop
 80005d4:	e0ec      	b.n	80007b0 <J1939_ReceiveMessages+0x3ac>
                        break;
 80005d6:	bf00      	nop
            }
            goto PutInReceiveQueue;
 80005d8:	e0ea      	b.n	80007b0 <J1939_ReceiveMessages+0x3ac>
 80005da:	bf00      	nop
 80005dc:	2000014c 	.word	0x2000014c
 80005e0:	2000003d 	.word	0x2000003d
 80005e4:	20000044 	.word	0x20000044
 80005e8:	2000023c 	.word	0x2000023c
            break;
#endif //J1939_TP_RX_TX

#if J1939_TP_RX_TX
        case J1939_PF_DT:
            if ((TP_RX_MSG.state == J1939_TP_RX_DATA_WAIT) && (TP_RX_MSG.tp_rx_msg.SA == OneMessage.Mxe.SourceAddress))
 80005ec:	4bb5      	ldr	r3, [pc, #724]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80005ee:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	f040 80db 	bne.w	80007ae <J1939_ReceiveMessages+0x3aa>
 80005f8:	4bb2      	ldr	r3, [pc, #712]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80005fa:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 80005fe:	4bb2      	ldr	r3, [pc, #712]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000600:	78db      	ldrb	r3, [r3, #3]
 8000602:	429a      	cmp	r2, r3
 8000604:	f040 80d3 	bne.w	80007ae <J1939_ReceiveMessages+0x3aa>
            {
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u] = OneMessage.Mxe.Data[1];
 8000608:	4baf      	ldr	r3, [pc, #700]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800060a:	795b      	ldrb	r3, [r3, #5]
 800060c:	3b01      	subs	r3, #1
 800060e:	461a      	mov	r2, r3
 8000610:	4613      	mov	r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	1a9b      	subs	r3, r3, r2
 8000616:	4aac      	ldr	r2, [pc, #688]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000618:	7991      	ldrb	r1, [r2, #6]
 800061a:	4aaa      	ldr	r2, [pc, #680]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 800061c:	4413      	add	r3, r2
 800061e:	460a      	mov	r2, r1
 8000620:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 1] = OneMessage.Mxe.Data[2];
 8000622:	4ba9      	ldr	r3, [pc, #676]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000624:	795b      	ldrb	r3, [r3, #5]
 8000626:	3b01      	subs	r3, #1
 8000628:	461a      	mov	r2, r3
 800062a:	4613      	mov	r3, r2
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	3301      	adds	r3, #1
 8000632:	4aa5      	ldr	r2, [pc, #660]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000634:	79d1      	ldrb	r1, [r2, #7]
 8000636:	4aa3      	ldr	r2, [pc, #652]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 8000638:	4413      	add	r3, r2
 800063a:	460a      	mov	r2, r1
 800063c:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 2] = OneMessage.Mxe.Data[3];
 800063e:	4ba2      	ldr	r3, [pc, #648]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	3b01      	subs	r3, #1
 8000644:	461a      	mov	r2, r3
 8000646:	4613      	mov	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	3302      	adds	r3, #2
 800064e:	4a9e      	ldr	r2, [pc, #632]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000650:	7a11      	ldrb	r1, [r2, #8]
 8000652:	4a9c      	ldr	r2, [pc, #624]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 8000654:	4413      	add	r3, r2
 8000656:	460a      	mov	r2, r1
 8000658:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 3] = OneMessage.Mxe.Data[4];
 800065a:	4b9b      	ldr	r3, [pc, #620]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800065c:	795b      	ldrb	r3, [r3, #5]
 800065e:	3b01      	subs	r3, #1
 8000660:	461a      	mov	r2, r3
 8000662:	4613      	mov	r3, r2
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	3303      	adds	r3, #3
 800066a:	4a97      	ldr	r2, [pc, #604]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800066c:	7a51      	ldrb	r1, [r2, #9]
 800066e:	4a95      	ldr	r2, [pc, #596]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 8000670:	4413      	add	r3, r2
 8000672:	460a      	mov	r2, r1
 8000674:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 4] = OneMessage.Mxe.Data[5];
 8000676:	4b94      	ldr	r3, [pc, #592]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	3b01      	subs	r3, #1
 800067c:	461a      	mov	r2, r3
 800067e:	4613      	mov	r3, r2
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	1a9b      	subs	r3, r3, r2
 8000684:	3304      	adds	r3, #4
 8000686:	4a90      	ldr	r2, [pc, #576]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000688:	7a91      	ldrb	r1, [r2, #10]
 800068a:	4a8e      	ldr	r2, [pc, #568]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 800068c:	4413      	add	r3, r2
 800068e:	460a      	mov	r2, r1
 8000690:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 5] = OneMessage.Mxe.Data[6];
 8000692:	4b8d      	ldr	r3, [pc, #564]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000694:	795b      	ldrb	r3, [r3, #5]
 8000696:	3b01      	subs	r3, #1
 8000698:	461a      	mov	r2, r3
 800069a:	4613      	mov	r3, r2
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	3305      	adds	r3, #5
 80006a2:	4a89      	ldr	r2, [pc, #548]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80006a4:	7ad1      	ldrb	r1, [r2, #11]
 80006a6:	4a87      	ldr	r2, [pc, #540]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80006a8:	4413      	add	r3, r2
 80006aa:	460a      	mov	r2, r1
 80006ac:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 6] = OneMessage.Mxe.Data[7];
 80006ae:	4b86      	ldr	r3, [pc, #536]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80006b0:	795b      	ldrb	r3, [r3, #5]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	461a      	mov	r2, r3
 80006b6:	4613      	mov	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	1a9b      	subs	r3, r3, r2
 80006bc:	3306      	adds	r3, #6
 80006be:	4a82      	ldr	r2, [pc, #520]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80006c0:	7b11      	ldrb	r1, [r2, #12]
 80006c2:	4a80      	ldr	r2, [pc, #512]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80006c4:	4413      	add	r3, r2
 80006c6:	460a      	mov	r2, r1
 80006c8:	711a      	strb	r2, [r3, #4]
                /*Special processing to re-accept the received data packet*/
                if ((OneMessage.Mxe.Data[0]) > TP_RX_MSG.packets_ok_num)
 80006ca:	4b7f      	ldr	r3, [pc, #508]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80006cc:	795a      	ldrb	r2, [r3, #5]
 80006ce:	4b7d      	ldr	r3, [pc, #500]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80006d0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d907      	bls.n	80006e8 <J1939_ReceiveMessages+0x2e4>
                {
                    TP_RX_MSG.packets_ok_num++;
 80006d8:	4b7a      	ldr	r3, [pc, #488]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80006da:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80006de:	3301      	adds	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b78      	ldr	r3, [pc, #480]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80006e4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                }
                TP_RX_MSG.time = J1939_TP_T1;
 80006e8:	4b76      	ldr	r3, [pc, #472]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80006ea:	f240 22ee 	movw	r2, #750	; 0x2ee
 80006ee:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
                /*Determine whether an even number of data packets have been received or the last data packet has been read*/
                if ((TP_RX_MSG.packets_ok_num % 2 == 0) || (TP_RX_MSG.packets_ok_num == TP_RX_MSG.packets_total))
 80006f2:	4b74      	ldr	r3, [pc, #464]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 80006f4:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <J1939_ReceiveMessages+0x310>
 8000702:	4b70      	ldr	r3, [pc, #448]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 8000704:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8000708:	4b6e      	ldr	r3, [pc, #440]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 800070a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800070e:	429a      	cmp	r2, r3
 8000710:	f040 80d4 	bne.w	80008bc <J1939_ReceiveMessages+0x4b8>
                {
                    TP_RX_MSG.state = J1939_TP_RX_READ_DATA;
 8000714:	4b6b      	ldr	r3, [pc, #428]	; (80008c4 <J1939_ReceiveMessages+0x4c0>)
 8000716:	2201      	movs	r2, #1
 8000718:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                    break;
 800071c:	e0cf      	b.n	80008be <J1939_ReceiveMessages+0x4ba>
            //The program cannot run to this point, but we can't give up the received data packet
            goto PutInReceiveQueue;
#endif //J1939_TP_RX_TX
        case J1939_PF_REQUEST:
            /*Use OneMessage.Mxe.PGN to store the requested PGN*/
            if (OneMessage.Mxe.Data[1] < 240)
 800071e:	4b6a      	ldr	r3, [pc, #424]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	2bef      	cmp	r3, #239	; 0xef
 8000724:	d81b      	bhi.n	800075e <J1939_ReceiveMessages+0x35a>
            {
                OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[2] << 16) & 0x030000) + (j1939_uint32_t)((OneMessage.Mxe.Data[1] << 8) & 0xFF00) + 0x00;
 8000726:	4b68      	ldr	r3, [pc, #416]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000728:	79db      	ldrb	r3, [r3, #7]
 800072a:	041b      	lsls	r3, r3, #16
 800072c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000730:	4b65      	ldr	r3, [pc, #404]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000732:	799b      	ldrb	r3, [r3, #6]
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	b29b      	uxth	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800073e:	4b62      	ldr	r3, [pc, #392]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000740:	b2d1      	uxtb	r1, r2
 8000742:	2000      	movs	r0, #0
 8000744:	4301      	orrs	r1, r0
 8000746:	7359      	strb	r1, [r3, #13]
 8000748:	0a11      	lsrs	r1, r2, #8
 800074a:	b2c9      	uxtb	r1, r1
 800074c:	2000      	movs	r0, #0
 800074e:	4301      	orrs	r1, r0
 8000750:	7399      	strb	r1, [r3, #14]
 8000752:	0c12      	lsrs	r2, r2, #16
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	2100      	movs	r1, #0
 8000758:	430a      	orrs	r2, r1
 800075a:	73da      	strb	r2, [r3, #15]
 800075c:	e01d      	b.n	800079a <J1939_ReceiveMessages+0x396>
            }
            else
            {
                OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[2] << 16) & 0x030000) + (j1939_uint32_t)((OneMessage.Mxe.Data[1] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[0]) & 0xFF);
 800075e:	4b5a      	ldr	r3, [pc, #360]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000760:	79db      	ldrb	r3, [r3, #7]
 8000762:	041b      	lsls	r3, r3, #16
 8000764:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000768:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800076a:	799b      	ldrb	r3, [r3, #6]
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b29b      	uxth	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	4a55      	ldr	r2, [pc, #340]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000774:	7952      	ldrb	r2, [r2, #5]
 8000776:	4413      	add	r3, r2
 8000778:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800077c:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800077e:	b2d1      	uxtb	r1, r2
 8000780:	2000      	movs	r0, #0
 8000782:	4301      	orrs	r1, r0
 8000784:	7359      	strb	r1, [r3, #13]
 8000786:	0a11      	lsrs	r1, r2, #8
 8000788:	b2c9      	uxtb	r1, r1
 800078a:	2000      	movs	r0, #0
 800078c:	4301      	orrs	r1, r0
 800078e:	7399      	strb	r1, [r3, #14]
 8000790:	0c12      	lsrs	r2, r2, #16
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	2100      	movs	r1, #0
 8000796:	430a      	orrs	r2, r1
 8000798:	73da      	strb	r2, [r3, #15]
            }
            J1939_Response(OneMessage.Mxe.PGN);
 800079a:	4b4b      	ldr	r3, [pc, #300]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fc84 	bl	80010b0 <J1939_Response>
            break;
 80007a8:	e089      	b.n	80008be <J1939_ReceiveMessages+0x4ba>
                goto PutInReceiveQueue;
 80007aa:	bf00      	nop
 80007ac:	e000      	b.n	80007b0 <J1939_ReceiveMessages+0x3ac>
            goto PutInReceiveQueue;
 80007ae:	bf00      	nop
OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Array[0]<<16)&0x030000)
+(j1939_uint32_t)((OneMessage.Array[1]<<8)&0xFF00)
+(j1939_uint32_t)((OneMessage.Array[2])&0xFF);
}
*/
            if (OneMessage.Mxe.PDUFormat < 240)
 80007b0:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2bef      	cmp	r3, #239	; 0xef
 80007b6:	d822      	bhi.n	80007fe <J1939_ReceiveMessages+0x3fa>
            {
                OneMessage.Mxe.PGN = (OneMessage.Mxe.Res << 17) + (OneMessage.Mxe.DataPage << 16) + (OneMessage.Mxe.PDUFormat << 8);
 80007b8:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	045a      	lsls	r2, r3, #17
 80007c4:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	041b      	lsls	r3, r3, #16
 80007d0:	441a      	add	r2, r3
 80007d2:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80007d4:	785b      	ldrb	r3, [r3, #1]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	4413      	add	r3, r2
 80007da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80007de:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 80007e0:	b2d1      	uxtb	r1, r2
 80007e2:	2000      	movs	r0, #0
 80007e4:	4301      	orrs	r1, r0
 80007e6:	7359      	strb	r1, [r3, #13]
 80007e8:	0a11      	lsrs	r1, r2, #8
 80007ea:	b2c9      	uxtb	r1, r1
 80007ec:	2000      	movs	r0, #0
 80007ee:	4301      	orrs	r1, r0
 80007f0:	7399      	strb	r1, [r3, #14]
 80007f2:	0c12      	lsrs	r2, r2, #16
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	2100      	movs	r1, #0
 80007f8:	430a      	orrs	r2, r1
 80007fa:	73da      	strb	r2, [r3, #15]
 80007fc:	e024      	b.n	8000848 <J1939_ReceiveMessages+0x444>
            }
            else
            {
                OneMessage.Mxe.PGN = (OneMessage.Mxe.Res << 17) + (OneMessage.Mxe.DataPage << 16) + (OneMessage.Mxe.PDUFormat << 8) + OneMessage.Mxe.PDUSpecific;
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	045a      	lsls	r2, r3, #17
 800080a:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	041b      	lsls	r3, r3, #16
 8000816:	441a      	add	r2, r3
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	4413      	add	r3, r2
 8000820:	4a29      	ldr	r2, [pc, #164]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 8000822:	7892      	ldrb	r2, [r2, #2]
 8000824:	4413      	add	r3, r2
 8000826:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800082c:	b2d1      	uxtb	r1, r2
 800082e:	2000      	movs	r0, #0
 8000830:	4301      	orrs	r1, r0
 8000832:	7359      	strb	r1, [r3, #13]
 8000834:	0a11      	lsrs	r1, r2, #8
 8000836:	b2c9      	uxtb	r1, r1
 8000838:	2000      	movs	r0, #0
 800083a:	4301      	orrs	r1, r0
 800083c:	7399      	strb	r1, [r3, #14]
 800083e:	0c12      	lsrs	r2, r2, #16
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	2100      	movs	r1, #0
 8000844:	430a      	orrs	r2, r1
 8000846:	73da      	strb	r2, [r3, #15]
            }


                if ((J1939_OVERWRITE_RX_QUEUE == J1939_TRUE) ||
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <J1939_ReceiveMessages+0x4c8>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b09      	cmp	r3, #9
 800084e:	d82d      	bhi.n	80008ac <J1939_ReceiveMessages+0x4a8>
                    (RXQueueCount < J1939_RX_QUEUE_SIZE))
                {
                    if (RXQueueCount < J1939_RX_QUEUE_SIZE)
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <J1939_ReceiveMessages+0x4c8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d813      	bhi.n	8000880 <J1939_ReceiveMessages+0x47c>
                    {
                        RXQueueCount++;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <J1939_ReceiveMessages+0x4c8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <J1939_ReceiveMessages+0x4c8>)
 8000862:	701a      	strb	r2, [r3, #0]
                        RXTail++;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <J1939_ReceiveMessages+0x4cc>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <J1939_ReceiveMessages+0x4cc>)
 800086e:	701a      	strb	r2, [r3, #0]
                        if (RXTail >= J1939_RX_QUEUE_SIZE)
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <J1939_ReceiveMessages+0x4cc>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b09      	cmp	r3, #9
 8000876:	d908      	bls.n	800088a <J1939_ReceiveMessages+0x486>
                            RXTail = 0;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <J1939_ReceiveMessages+0x4cc>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e004      	b.n	800088a <J1939_ReceiveMessages+0x486>
                    }
                    else
                    {
                        J1939_Flags.ReceivedMessagesdCover = 1; //Generate data coverage
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <J1939_ReceiveMessages+0x4d0>)
 8000882:	7813      	ldrb	r3, [r2, #0]
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	7013      	strb	r3, [r2, #0]
                    }
                    RXQueue[RXTail] = OneMessage;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <J1939_ReceiveMessages+0x4cc>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <J1939_ReceiveMessages+0x4d4>)
 8000892:	460b      	mov	r3, r1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <J1939_ReceiveMessages+0x4c4>)
 800089e:	461c      	mov	r4, r3
 80008a0:	4615      	mov	r5, r2
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	682b      	ldr	r3, [r5, #0]
 80008a8:	6023      	str	r3, [r4, #0]
 80008aa:	e008      	b.n	80008be <J1939_ReceiveMessages+0x4ba>
                }
                else
                    J1939_Flags.ReceivedMessagesDropped = 1; //Data overflow occurs
 80008ac:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <J1939_ReceiveMessages+0x4d0>)
 80008ae:	7813      	ldrb	r3, [r2, #0]
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	7013      	strb	r3, [r2, #0]
 80008b6:	e002      	b.n	80008be <J1939_ReceiveMessages+0x4ba>
            return;
 80008b8:	bf00      	nop
 80008ba:	e000      	b.n	80008be <J1939_ReceiveMessages+0x4ba>
                break;
 80008bc:	bf00      	nop


        }
        }
    }
}
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bdb0      	pop	{r4, r5, r7, pc}
 80008c4:	20000044 	.word	0x20000044
 80008c8:	2000014c 	.word	0x2000014c
 80008cc:	20000149 	.word	0x20000149
 80008d0:	2000003e 	.word	0x2000003e
 80008d4:	20000148 	.word	0x20000148
 80008d8:	20000174 	.word	0x20000174

080008dc <J1939_TransmitMessages>:
* @return RC_CANNOTTRANSMIT The system did not send a message, there is no message to send, or the wrong CAN device
* @note After calling this function, if there is a message in the sending message queue, the message will be sent. If the message cannot be sent, the related error code will be returned. \n
             During the running of the program, the interrupt is disabled.
*/
 j1939_uint8_t J1939_TransmitMessages()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

        if (TTXQueueCount == 0)
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <J1939_TransmitMessages+0x78>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d12e      	bne.n	8000946 <J1939_TransmitMessages+0x6a>
        {
//If there is no message to be sent from the sending message queue, resume interruption (clear the sending flag)
#if J1939_POLL_ECAN == J1939_FALSE
            Port_TXinterruptEnable();
#endif
            return RC_CANNOTTRANSMIT;
 80008e8:	2302      	movs	r3, #2
 80008ea:	e031      	b.n	8000950 <J1939_TransmitMessages+0x74>
            while (TTXQueueCount > 0)
            {
                /*Ensure that the last data was sent successfully*/
                /**************A judgment function can be added ****************************/

                TXQueue[TXHead].Mxe.SourceAddress = NodeAddress;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <J1939_TransmitMessages+0x7c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <J1939_TransmitMessages+0x80>)
 80008f4:	7818      	ldrb	r0, [r3, #0]
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <J1939_TransmitMessages+0x84>)
 80008f8:	460b      	mov	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	3303      	adds	r3, #3
 8000904:	4602      	mov	r2, r0
 8000906:	701a      	strb	r2, [r3, #0]

                SendOneMessage((J1939_MESSAGE *)&(TXQueue[TXHead]));
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <J1939_TransmitMessages+0x7c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <J1939_TransmitMessages+0x84>)
 8000918:	4413      	add	r3, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fc5a 	bl	80001d4 <SendOneMessage>
                TXHead++;
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <J1939_TransmitMessages+0x7c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <J1939_TransmitMessages+0x7c>)
 800092a:	701a      	strb	r2, [r3, #0]
                if (TXHead >= J1939_TX_QUEUE_SIZE)
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <J1939_TransmitMessages+0x7c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b04      	cmp	r3, #4
 8000932:	d902      	bls.n	800093a <J1939_TransmitMessages+0x5e>
                    TXHead = 0;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <J1939_TransmitMessages+0x7c>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
                TTXQueueCount--;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <J1939_TransmitMessages+0x78>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	3b01      	subs	r3, #1
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <J1939_TransmitMessages+0x78>)
 8000944:	701a      	strb	r2, [r3, #0]
            while (TTXQueueCount > 0)
 8000946:	4b03      	ldr	r3, [pc, #12]	; (8000954 <J1939_TransmitMessages+0x78>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1ce      	bne.n	80008ec <J1939_TransmitMessages+0x10>
            Port_TXinterruptEnable();
#endif
        }


    return RC_SUCCESS;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000170 	.word	0x20000170
 8000958:	200003c8 	.word	0x200003c8
 800095c:	2000003c 	.word	0x2000003c
 8000960:	20000350 	.word	0x20000350

08000964 <J1939_TP_DT_Packet_send>:
#if J1939_TP_RX_TX
/**
* @note sends TP.DT, refer to J1939-21
*/
void J1939_TP_DT_Packet_send(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint16_t _packet_offset_p;
    j1939_int32_t _i = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    _msg.Mxe.Priority = J1939_TP_DT_PRIORITY;
 800096e:	793b      	ldrb	r3, [r7, #4]
 8000970:	f043 031c 	orr.w	r3, r3, #28
 8000974:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.DataPage = 0;
 8000976:	793b      	ldrb	r3, [r7, #4]
 8000978:	f36f 0300 	bfc	r3, #0, #1
 800097c:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.PDUFormat = J1939_PF_DT;
 800097e:	23eb      	movs	r3, #235	; 0xeb
 8000980:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000982:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000984:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000988:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.DataLength = 8;
 800098a:	7a3b      	ldrb	r3, [r7, #8]
 800098c:	2208      	movs	r2, #8
 800098e:	f362 0303 	bfi	r3, r2, #0, #4
 8000992:	723b      	strb	r3, [r7, #8]

    /*Get the number of data packets sent by request*/
    if (TP_TX_MSG.packets_request_num > 0)
 8000994:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000996:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800099a:	2b00      	cmp	r3, #0
 800099c:	d076      	beq.n	8000a8c <J1939_TP_DT_Packet_send+0x128>
    {
        TP_TX_MSG.packets_request_num--;
 800099e:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 80009a0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80009a4:	3b01      	subs	r3, #1
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 80009aa:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        /*Get data offset pointer*/
        _packet_offset_p = (j1939_uint16_t)(TP_TX_MSG.packet_offset_p * 7u);
 80009ae:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 80009b0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	00d2      	lsls	r2, r2, #3
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	837b      	strh	r3, [r7, #26]
        /*Load data package number*/
        _msg.Mxe.Data[0] = (j1939_uint8_t)(1u + TP_TX_MSG.packet_offset_p);
 80009be:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 80009c0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	727b      	strb	r3, [r7, #9]

        for (_i = 0; _i < 7; _i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
 80009ce:	e00f      	b.n	80009f0 <J1939_TP_DT_Packet_send+0x8c>
        {
            _msg.Mxe.Data[_i + 1] = TP_TX_MSG.tp_tx_msg.data[_packet_offset_p + _i];
 80009d0:	8b7a      	ldrh	r2, [r7, #26]
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	441a      	add	r2, r3
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3301      	adds	r3, #1
 80009da:	4937      	ldr	r1, [pc, #220]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 80009dc:	440a      	add	r2, r1
 80009de:	7912      	ldrb	r2, [r2, #4]
 80009e0:	f107 0120 	add.w	r1, r7, #32
 80009e4:	440b      	add	r3, r1
 80009e6:	f803 2c17 	strb.w	r2, [r3, #-23]
        for (_i = 0; _i < 7; _i++)
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3301      	adds	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	ddec      	ble.n	80009d0 <J1939_TP_DT_Packet_send+0x6c>
        }
        /*Is it the last packet of data message*/
        if (TP_TX_MSG.packet_offset_p == (TP_TX_MSG.packets_total - 1u))
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 80009f8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a00:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000a04:	3b01      	subs	r3, #1
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d12f      	bne.n	8000a6a <J1939_TP_DT_Packet_send+0x106>
        {
            /* Whether the parameter group can be filled, whether it needs to be filled, */
            if (_packet_offset_p > TP_TX_MSG.tp_tx_msg.byte_count - 7)
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a0c:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000a10:	1f9a      	subs	r2, r3, #6
 8000a12:	8b7b      	ldrh	r3, [r7, #26]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dc16      	bgt.n	8000a46 <J1939_TP_DT_Packet_send+0xe2>
            {
                /*Calculate the number of data to be filled*/
                _i = TP_TX_MSG.tp_tx_msg.byte_count - _packet_offset_p - 7;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a1a:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000a1e:	461a      	mov	r2, r3
 8000a20:	8b7b      	ldrh	r3, [r7, #26]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	3b07      	subs	r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]

                for (; _i < 0; _i++)
 8000a28:	e00a      	b.n	8000a40 <J1939_TP_DT_Packet_send+0xdc>
                {
                    /*By default, the parameter group size of J1939 is 8*/
                    _msg.Mxe.Data[_i + 8] = J1939_RESERVED_BYTE;
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3308      	adds	r3, #8
 8000a2e:	f107 0220 	add.w	r2, r7, #32
 8000a32:	4413      	add	r3, r2
 8000a34:	22ff      	movs	r2, #255	; 0xff
 8000a36:	f803 2c17 	strb.w	r2, [r3, #-23]
                for (; _i < 0; _i++)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dbf1      	blt.n	8000a2a <J1939_TP_DT_Packet_send+0xc6>
                }
            }

            TP_TX_MSG.packets_request_num = 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_TX_MSG.packet_offset_p = 0;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.time = J1939_TP_T3;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a58:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000a5c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            /* Jump step, wait for end confirmation or resend data request*/
            TP_TX_MSG.state = J1939_TP_WAIT_ACK;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 8000a68:	e00b      	b.n	8000a82 <J1939_TP_DT_Packet_send+0x11e>
        }
        else
        {
            /*Prepare for the next data transmission*/
            TP_TX_MSG.packet_offset_p++;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a6c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000a70:	3301      	adds	r3, #1
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a76:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.state = J1939_TP_TX_DT;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
        }

        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fbc7 	bl	8000218 <J1939_EnqueueMessage>
        TP_TX_MSG.packets_request_num = 0;
        TP_TX_MSG.packet_offset_p = 0;
        TP_TX_MSG.time = J1939_TP_T3;
        TP_TX_MSG.state = J1939_TP_WAIT_ACK;
    }
}
 8000a8a:	e010      	b.n	8000aae <J1939_TP_DT_Packet_send+0x14a>
        TP_TX_MSG.packets_request_num = 0;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        TP_TX_MSG.packet_offset_p = 0;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        TP_TX_MSG.time = J1939_TP_T3;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000a9e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000aa2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        TP_TX_MSG.state = J1939_TP_WAIT_ACK;
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <J1939_TP_DT_Packet_send+0x154>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000023c 	.word	0x2000023c

08000abc <J1939_CM_Start>:
/**
* @note sends TP. CM-RTS, 16, 23, 4, 255, PGN message, refer to J1939-21,
*/
void J1939_CM_Start(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
    j1939_uint32_t pgn_num;
    J1939_MESSAGE _msg;

    pgn_num = TP_TX_MSG.tp_tx_msg.PGN;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <J1939_CM_Start+0x94>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000ac8:	783b      	ldrb	r3, [r7, #0]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f362 0384 	bfi	r3, r2, #2, #3
 8000ad0:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000ad2:	783b      	ldrb	r3, [r7, #0]
 8000ad4:	f36f 0300 	bfc	r3, #0, #1
 8000ad8:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = 0xf1;
 8000ada:	23f1      	movs	r3, #241	; 0xf1
 8000adc:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <J1939_CM_Start+0x94>)
 8000ae0:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000ae4:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000ae6:	793b      	ldrb	r3, [r7, #4]
 8000ae8:	2208      	movs	r2, #8
 8000aea:	f362 0303 	bfi	r3, r2, #0, #4
 8000aee:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_RTS_CONTROL_BYTE;
 8000af0:	2310      	movs	r3, #16
 8000af2:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = (j1939_uint8_t)TP_TX_MSG.tp_tx_msg.byte_count;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <J1939_CM_Start+0x94>)
 8000af6:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = (j1939_uint8_t)((TP_TX_MSG.tp_tx_msg.byte_count) >> 8);
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <J1939_CM_Start+0x94>)
 8000b00:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = TP_TX_MSG.packets_total;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <J1939_CM_Start+0x94>)
 8000b0e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000b12:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000b14:	23ff      	movs	r3, #255	; 0xff
 8000b16:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	0c1b      	lsrs	r3, r3, #16
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fb71 	bl	8000218 <J1939_EnqueueMessage>

    /*Refresh waiting time, trigger the next step ()*/
    TP_TX_MSG.time = J1939_TP_T3;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <J1939_CM_Start+0x94>)
 8000b38:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000b3c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    TP_TX_MSG.state = J1939_TP_TX_CM_WAIT;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <J1939_CM_Start+0x94>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000023c 	.word	0x2000023c

08000b54 <J1939_TP_TX_Abort>:
/**
* @note break TP link
*/
void J1939_TP_TX_Abort(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;

    pgn_num = TP_TX_MSG.tp_tx_msg.PGN;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <J1939_TP_TX_Abort+0x78>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000b60:	783b      	ldrb	r3, [r7, #0]
 8000b62:	2201      	movs	r2, #1
 8000b64:	f362 0384 	bfi	r3, r2, #2, #3
 8000b68:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000b6a:	783b      	ldrb	r3, [r7, #0]
 8000b6c:	f36f 0300 	bfc	r3, #0, #1
 8000b70:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 8000b72:	23ec      	movs	r3, #236	; 0xec
 8000b74:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <J1939_TP_TX_Abort+0x78>)
 8000b78:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000b7c:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000b7e:	793b      	ldrb	r3, [r7, #4]
 8000b80:	2208      	movs	r2, #8
 8000b82:	f362 0303 	bfi	r3, r2, #0, #4
 8000b86:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_CONNABORT_CONTROL_BYTE;
 8000b88:	23ff      	movs	r3, #255	; 0xff
 8000b8a:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = J1939_RESERVED_BYTE;
 8000b8c:	23ff      	movs	r3, #255	; 0xff
 8000b8e:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 8000b90:	23ff      	movs	r3, #255	; 0xff
 8000b92:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000b94:	23ff      	movs	r3, #255	; 0xff
 8000b96:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000b98:	23ff      	movs	r3, #255	; 0xff
 8000b9a:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	0c1b      	lsrs	r3, r3, #16
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb2f 	bl	8000218 <J1939_EnqueueMessage>
    /*End sending*/
    TP_TX_MSG.state = J1939_TX_DONE;
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <J1939_TP_TX_Abort+0x78>)
 8000bbc:	2206      	movs	r2, #6
 8000bbe:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000023c 	.word	0x2000023c

08000bd0 <J1939_TP_RX_Abort>:
/**
* @note break TP link
*/
void J1939_TP_RX_Abort(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;

    pgn_num = TP_RX_MSG.tp_rx_msg.PGN;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <J1939_TP_RX_Abort+0x78>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000bdc:	783b      	ldrb	r3, [r7, #0]
 8000bde:	2201      	movs	r2, #1
 8000be0:	f362 0384 	bfi	r3, r2, #2, #3
 8000be4:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000be6:	783b      	ldrb	r3, [r7, #0]
 8000be8:	f36f 0300 	bfc	r3, #0, #1
 8000bec:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 8000bee:	23ec      	movs	r3, #236	; 0xec
 8000bf0:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_RX_MSG.tp_rx_msg.SA;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <J1939_TP_RX_Abort+0x78>)
 8000bf4:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000bf8:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000bfa:	793b      	ldrb	r3, [r7, #4]
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	f362 0303 	bfi	r3, r2, #0, #4
 8000c02:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_CONNABORT_CONTROL_BYTE;
 8000c04:	23ff      	movs	r3, #255	; 0xff
 8000c06:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = J1939_RESERVED_BYTE;
 8000c08:	23ff      	movs	r3, #255	; 0xff
 8000c0a:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 8000c0c:	23ff      	movs	r3, #255	; 0xff
 8000c0e:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000c10:	23ff      	movs	r3, #255	; 0xff
 8000c12:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000c14:	23ff      	movs	r3, #255	; 0xff
 8000c16:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff faf1 	bl	8000218 <J1939_EnqueueMessage>
    /*End sending*/
    TP_RX_MSG.state = J1939_RX_DONE;
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <J1939_TP_RX_Abort+0x78>)
 8000c38:	2204      	movs	r2, #4
 8000c3a:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000044 	.word	0x20000044

08000c4c <J1939_TP_TX_RefreshCMTimer>:
/**
* @note TP's timer
*/
j1939_uint8_t J1939_TP_TX_RefreshCMTimer(j1939_uint16_t dt_ms)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
    if ((J1939_TP_TX_CM_WAIT == TP_TX_MSG.state) || (J1939_TP_WAIT_ACK == TP_TX_MSG.state))
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000c58:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d004      	beq.n	8000c6a <J1939_TP_TX_RefreshCMTimer+0x1e>
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000c62:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d116      	bne.n	8000c98 <J1939_TP_TX_RefreshCMTimer+0x4c>
    {
        if (TP_TX_MSG.time > dt_ms)
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000c6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8000c70:	88fa      	ldrh	r2, [r7, #6]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d20a      	bcs.n	8000c8c <J1939_TP_TX_RefreshCMTimer+0x40>
        {
            TP_TX_MSG.time = TP_TX_MSG.time - dt_ms;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000c78:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000c84:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            return J1939_TP_TIMEOUT_NORMAL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e006      	b.n	8000c9a <J1939_TP_TX_RefreshCMTimer+0x4e>
        }
        else
        {
            /*time out */
            TP_TX_MSG.time = 0u;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            return J1939_TP_TIMEOUT_ABNORMAL;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e000      	b.n	8000c9a <J1939_TP_TX_RefreshCMTimer+0x4e>
        }
    }
    else
    {
        return J1939_TP_TIMEOUT_NORMAL;
 8000c98:	2300      	movs	r3, #0
    }
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000023c 	.word	0x2000023c

08000cac <J1939_TP_RX_RefreshCMTimer>:
/**
* @note TP's timer
*/
j1939_uint8_t J1939_TP_RX_RefreshCMTimer(j1939_uint16_t dt_ms)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
    if ((J1939_TP_RX_DATA_WAIT == TP_RX_MSG.state))
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000cb8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d116      	bne.n	8000cee <J1939_TP_RX_RefreshCMTimer+0x42>
    {
        if (TP_RX_MSG.time > dt_ms)
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000cc2:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8000cc6:	88fa      	ldrh	r2, [r7, #6]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d20a      	bcs.n	8000ce2 <J1939_TP_RX_RefreshCMTimer+0x36>
        {
            TP_RX_MSG.time = TP_RX_MSG.time - dt_ms;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000cce:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000cda:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            return J1939_TP_TIMEOUT_NORMAL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e006      	b.n	8000cf0 <J1939_TP_RX_RefreshCMTimer+0x44>
        }
        else
        {
            /*time out */
            TP_RX_MSG.time = 0u;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            return J1939_TP_TIMEOUT_ABNORMAL;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <J1939_TP_RX_RefreshCMTimer+0x44>
        }
    }
    else
    {
        return J1939_TP_TIMEOUT_NORMAL;
 8000cee:	2300      	movs	r3, #0
    }
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20000044 	.word	0x20000044

08000d00 <J1939_read_DT_Packet>:
/**
* @note sends read data TP.CM_CTS and EndofMsgAck messages.
*/
void J1939_read_DT_Packet()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;
    pgn_num = TP_RX_MSG.tp_rx_msg.PGN;
 8000d06:	4b5a      	ldr	r3, [pc, #360]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000d0c:	783b      	ldrb	r3, [r7, #0]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f362 0384 	bfi	r3, r2, #2, #3
 8000d14:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000d16:	783b      	ldrb	r3, [r7, #0]
 8000d18:	f36f 0300 	bfc	r3, #0, #1
 8000d1c:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 8000d1e:	23ec      	movs	r3, #236	; 0xec
 8000d20:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_RX_MSG.tp_rx_msg.SA;
 8000d22:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000d24:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000d28:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000d2a:	793b      	ldrb	r3, [r7, #4]
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	f362 0303 	bfi	r3, r2, #0, #4
 8000d32:	713b      	strb	r3, [r7, #4]

    /*If the system is busy, keep the link but do not send messages*/
    if (TP_RX_MSG.osbusy)
 8000d34:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000d36:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d019      	beq.n	8000d72 <J1939_read_DT_Packet+0x72>
    {
        _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 8000d3e:	2311      	movs	r3, #17
 8000d40:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 8000d46:	23ff      	movs	r3, #255	; 0xff
 8000d48:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000d4a:	23ff      	movs	r3, #255	; 0xff
 8000d4c:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000d4e:	23ff      	movs	r3, #255	; 0xff
 8000d50:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	0c1b      	lsrs	r3, r3, #16
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	72bb      	strb	r3, [r7, #10]
        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fa54 	bl	8000218 <J1939_EnqueueMessage>
        return;
 8000d70:	e07b      	b.n	8000e6a <J1939_read_DT_Packet+0x16a>
    }
    if (TP_RX_MSG.packets_total > TP_RX_MSG.packets_ok_num)
 8000d72:	4b3f      	ldr	r3, [pc, #252]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000d74:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8000d78:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000d7a:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d94b      	bls.n	8000e1a <J1939_read_DT_Packet+0x11a>
    {
        /*The last response, if less than 2 packets of data*/
        if ((TP_RX_MSG.packets_total - TP_RX_MSG.packets_ok_num) == 1)
 8000d82:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000d84:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000d8c:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11f      	bne.n	8000dd6 <J1939_read_DT_Packet+0xd6>
        {
            _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 8000d96:	2311      	movs	r3, #17
 8000d98:	717b      	strb	r3, [r7, #5]
            _msg.Mxe.Data[1] = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71bb      	strb	r3, [r7, #6]
            _msg.Mxe.Data[2] = TP_RX_MSG.packets_total;
 8000d9e:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000da0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000da4:	71fb      	strb	r3, [r7, #7]
            _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000da6:	23ff      	movs	r3, #255	; 0xff
 8000da8:	723b      	strb	r3, [r7, #8]
            _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000daa:	23ff      	movs	r3, #255	; 0xff
 8000dac:	727b      	strb	r3, [r7, #9]
            _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	0c1b      	lsrs	r3, r3, #16
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	72fb      	strb	r3, [r7, #11]
            _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	72bb      	strb	r3, [r7, #10]
            /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
            J1939_EnqueueMessage(&_msg);
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fa26 	bl	8000218 <J1939_EnqueueMessage>
            TP_RX_MSG.state = J1939_TP_RX_DATA_WAIT;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            return;
 8000dd4:	e049      	b.n	8000e6a <J1939_read_DT_Packet+0x16a>
        }
        _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 8000dd6:	2311      	movs	r3, #17
 8000dd8:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = 2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = (TP_RX_MSG.packets_ok_num + 1);
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000de0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000dea:	23ff      	movs	r3, #255	; 0xff
 8000dec:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000dee:	23ff      	movs	r3, #255	; 0xff
 8000df0:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	0c1b      	lsrs	r3, r3, #16
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	72bb      	strb	r3, [r7, #10]

        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa04 	bl	8000218 <J1939_EnqueueMessage>
        TP_RX_MSG.state = J1939_TP_RX_DATA_WAIT;
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
        return;
 8000e18:	e027      	b.n	8000e6a <J1939_read_DT_Packet+0x16a>
    }
    else
    {
        /*Send the transmission normal end message, EndofMsgAck*/
        _msg.Mxe.Data[0] = J1939_EOMACK_CONTROL_BYTE;
 8000e1a:	2313      	movs	r3, #19
 8000e1c:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = (TP_RX_MSG.tp_rx_msg.byte_count & 0x00ff);
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000e20:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = ((TP_RX_MSG.tp_rx_msg.byte_count >> 8) & 0x00ff);
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000e2a:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000e2e:	0a1b      	lsrs	r3, r3, #8
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = TP_RX_MSG.packets_total;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000e38:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000e3c:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000e3e:	23ff      	movs	r3, #255	; 0xff
 8000e40:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	0c1b      	lsrs	r3, r3, #16
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	72bb      	strb	r3, [r7, #10]
        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9dc 	bl	8000218 <J1939_EnqueueMessage>
        TP_RX_MSG.state = J1939_RX_DONE;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <J1939_read_DT_Packet+0x170>)
 8000e62:	2204      	movs	r2, #4
 8000e64:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
        return;
 8000e68:	bf00      	nop
    }
}
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000044 	.word	0x20000044

08000e74 <J1939_TP_Poll>:
/**
* @note The heartbeat of the TP protocol, in order to meet the timing accuracy on the bus, poll once every 10ms J1939_TP_TX_RefreshCMTimer(10)\n
If you want a higher resolution, poll once every 1ms, but you need to change the following timing function J1939_TP_TX_RefreshCMTimer(1)
*/
void J1939_TP_Poll()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    if (J1939_TP_State_t == J1939_TP_NULL || J1939_TP_State_t == J1939_TP_OSBUSY)
 8000e78:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <J1939_TP_Poll+0x144>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 8099 	beq.w	8000fb4 <J1939_TP_Poll+0x140>
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <J1939_TP_Poll+0x144>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	f000 8094 	beq.w	8000fb4 <J1939_TP_Poll+0x140>
    {
        return;
    }
    if (J1939_TP_State_t == J1939_TP_RX)
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <J1939_TP_Poll+0x144>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d13b      	bne.n	8000f0c <J1939_TP_Poll+0x98>
    {

        switch (TP_RX_MSG.state)
 8000e94:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <J1939_TP_Poll+0x148>)
 8000e96:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d832      	bhi.n	8000f04 <J1939_TP_Poll+0x90>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <J1939_TP_Poll+0x30>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000f05 	.word	0x08000f05
 8000ea8:	08000eb9 	.word	0x08000eb9
 8000eac:	08000ebf 	.word	0x08000ebf
 8000eb0:	08000ed5 	.word	0x08000ed5
 8000eb4:	08000edb 	.word	0x08000edb
        {
        case J1939_TP_RX_WAIT:;
            break;
        case J1939_TP_RX_READ_DATA:
            /*Send read data TP.CM_CTS and EndofMsgAck message*/
            J1939_read_DT_Packet();
 8000eb8:	f7ff ff22 	bl	8000d00 <J1939_read_DT_Packet>
            break;
 8000ebc:	e025      	b.n	8000f0a <J1939_TP_Poll+0x96>
        case J1939_TP_RX_DATA_WAIT:
            /*Waiting for the message transmitted by the TP.DT frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_RX_RefreshCMTimer(10))
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f7ff fef4 	bl	8000cac <J1939_TP_RX_RefreshCMTimer>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d11e      	bne.n	8000f08 <J1939_TP_Poll+0x94>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_RX_MSG.state = J1939_TP_RX_ERROR;
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <J1939_TP_Poll+0x148>)
 8000ecc:	2203      	movs	r2, #3
 8000ece:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            }
            break;
 8000ed2:	e019      	b.n	8000f08 <J1939_TP_Poll+0x94>
        case J1939_TP_RX_ERROR:
            J1939_TP_RX_Abort();
 8000ed4:	f7ff fe7c 	bl	8000bd0 <J1939_TP_RX_Abort>

            break;
 8000ed8:	e017      	b.n	8000f0a <J1939_TP_Poll+0x96>
        case J1939_RX_DONE:
            TP_RX_MSG.packets_ok_num = 0;
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <J1939_TP_Poll+0x148>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            TP_RX_MSG.packets_total = 0;
 8000ee2:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <J1939_TP_Poll+0x148>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_RX_MSG.time = J1939_TP_T3;
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <J1939_TP_Poll+0x148>)
 8000eec:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000ef0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            TP_RX_MSG.state = J1939_TP_RX_WAIT;
 8000ef4:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <J1939_TP_Poll+0x148>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            J1939_TP_State_t = J1939_TP_NULL;
 8000efc:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <J1939_TP_Poll+0x144>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
            break;
 8000f02:	e002      	b.n	8000f0a <J1939_TP_Poll+0x96>
        default:
            break;
 8000f04:	bf00      	nop
 8000f06:	e056      	b.n	8000fb6 <J1939_TP_Poll+0x142>
            break;
 8000f08:	bf00      	nop
        }
        return;
 8000f0a:	e054      	b.n	8000fb6 <J1939_TP_Poll+0x142>
    }
    if (J1939_TP_State_t == J1939_TP_TX)
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <J1939_TP_Poll+0x144>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d150      	bne.n	8000fb6 <J1939_TP_Poll+0x142>
    {

        switch (TP_TX_MSG.state)
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <J1939_TP_Poll+0x14c>)
 8000f16:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d844      	bhi.n	8000fa8 <J1939_TP_Poll+0x134>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <J1939_TP_Poll+0xb0>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000fa9 	.word	0x08000fa9
 8000f28:	08000f41 	.word	0x08000f41
 8000f2c:	08000f47 	.word	0x08000f47
 8000f30:	08000f5d 	.word	0x08000f5d
 8000f34:	08000f63 	.word	0x08000f63
 8000f38:	08000f79 	.word	0x08000f79
 8000f3c:	08000f7f 	.word	0x08000f7f
        case J1939_TP_TX_WAIT:
            /*There is no data to send*/
            break;
        case J1939_TP_TX_CM_START:
            /*Send the message transmitted by the TP.CM_RTS frame (refer to j1939-21)*/
            J1939_CM_Start();
 8000f40:	f7ff fdbc 	bl	8000abc <J1939_CM_Start>
            break;
 8000f44:	e035      	b.n	8000fb2 <J1939_TP_Poll+0x13e>
        case J1939_TP_TX_CM_WAIT:
            /*Waiting for the message transmitted by the TP.CM_CTS frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_TX_RefreshCMTimer(10))
 8000f46:	200a      	movs	r0, #10
 8000f48:	f7ff fe80 	bl	8000c4c <J1939_TP_TX_RefreshCMTimer>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d12c      	bne.n	8000fac <J1939_TP_Poll+0x138>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_TX_MSG.state = J1939_TP_TX_ERROR;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <J1939_TP_Poll+0x14c>)
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            }
            break;
 8000f5a:	e027      	b.n	8000fac <J1939_TP_Poll+0x138>
        case J1939_TP_TX_DT:
            J1939_TP_DT_Packet_send();
 8000f5c:	f7ff fd02 	bl	8000964 <J1939_TP_DT_Packet_send>
            break;
 8000f60:	e027      	b.n	8000fb2 <J1939_TP_Poll+0x13e>
        case J1939_TP_WAIT_ACK:
            /*Waiting for the message transmitted by the TP.EndofMsgACK frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_TX_RefreshCMTimer(10))
 8000f62:	200a      	movs	r0, #10
 8000f64:	f7ff fe72 	bl	8000c4c <J1939_TP_TX_RefreshCMTimer>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d120      	bne.n	8000fb0 <J1939_TP_Poll+0x13c>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_TX_MSG.state = J1939_TP_TX_ERROR;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <J1939_TP_Poll+0x14c>)
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            }
            break;
 8000f76:	e01b      	b.n	8000fb0 <J1939_TP_Poll+0x13c>
        case J1939_TP_TX_ERROR:
            J1939_TP_TX_Abort();
 8000f78:	f7ff fdec 	bl	8000b54 <J1939_TP_TX_Abort>

            break;
 8000f7c:	e019      	b.n	8000fb2 <J1939_TP_Poll+0x13e>
        case J1939_TX_DONE:
            TP_TX_MSG.packets_request_num = 0;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <J1939_TP_Poll+0x14c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_TX_MSG.packet_offset_p = 0;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <J1939_TP_Poll+0x14c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.time = J1939_TP_T3;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <J1939_TP_Poll+0x14c>)
 8000f90:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000f94:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            TP_TX_MSG.state = J1939_TP_TX_WAIT;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <J1939_TP_Poll+0x14c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            J1939_TP_State_t = J1939_TP_NULL;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <J1939_TP_Poll+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
            break;
 8000fa6:	e004      	b.n	8000fb2 <J1939_TP_Poll+0x13e>
        default:
            //The program will not run here, you can add a debug output
            break;
 8000fa8:	bf00      	nop
 8000faa:	e004      	b.n	8000fb6 <J1939_TP_Poll+0x142>
            break;
 8000fac:	bf00      	nop
 8000fae:	e002      	b.n	8000fb6 <J1939_TP_Poll+0x142>
            break;
 8000fb0:	bf00      	nop
        }
        return;
 8000fb2:	e000      	b.n	8000fb6 <J1939_TP_Poll+0x142>
        return;
 8000fb4:	bf00      	nop
    }
}
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000003d 	.word	0x2000003d
 8000fbc:	20000044 	.word	0x20000044
 8000fc0:	2000023c 	.word	0x2000023c

08000fc4 <J1939_TP_TX_Message>:
* @return RC_SUCCESS successfully opened the TP link and started to enter the sending process
* @return RC_CANNOTTRANSMIT cannot be sent because the TP protocol has established a virtual link and has not been disconnected
* @note TP protocol sending function
*/
j1939_int8_t J1939_TP_TX_Message(j1939_uint32_t PGN, j1939_uint8_t DA, j1939_uint8_t *data, j1939_uint16_t data_num)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	72fb      	strb	r3, [r7, #11]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	813b      	strh	r3, [r7, #8]
    j1939_uint16_t _byte_count = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	82fb      	strh	r3, [r7, #22]
    /*Get sending permission*/
    if (J1939_TP_State_t == J1939_TP_NULL)
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <J1939_TP_TX_Message+0xe0>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d110      	bne.n	8001006 <J1939_TP_TX_Message+0x42>
    {
        J1939_TP_State_t = J1939_TP_TX;
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <J1939_TP_TX_Message+0xe0>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]
    else
    {
        return RC_CANNOTTRANSMIT; //Cannot send, because the TP protocol has established a virtual link and has not been disconnected
    }

    TP_TX_MSG.tp_tx_msg.PGN = PGN;
 8000fea:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6013      	str	r3, [r2, #0]
    TP_TX_MSG.tp_tx_msg.SA = DA;
 8000ff0:	4a2d      	ldr	r2, [pc, #180]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	f882 30f6 	strb.w	r3, [r2, #246]	; 0xf6
    TP_TX_MSG.tp_tx_msg.byte_count = data_num;
 8000ff8:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 8000ffa:	893b      	ldrh	r3, [r7, #8]
 8000ffc:	f8a2 30f4 	strh.w	r3, [r2, #244]	; 0xf4
    for (_byte_count = 0; _byte_count < data_num; _byte_count++)
 8001000:	2300      	movs	r3, #0
 8001002:	82fb      	strh	r3, [r7, #22]
 8001004:	e00d      	b.n	8001022 <J1939_TP_TX_Message+0x5e>
        return RC_CANNOTTRANSMIT; //Cannot send, because the TP protocol has established a virtual link and has not been disconnected
 8001006:	2302      	movs	r3, #2
 8001008:	e045      	b.n	8001096 <J1939_TP_TX_Message+0xd2>
    {
        TP_TX_MSG.tp_tx_msg.data[_byte_count] = data[_byte_count];
 800100a:	8afb      	ldrh	r3, [r7, #22]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	441a      	add	r2, r3
 8001010:	8afb      	ldrh	r3, [r7, #22]
 8001012:	7811      	ldrb	r1, [r2, #0]
 8001014:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 8001016:	4413      	add	r3, r2
 8001018:	460a      	mov	r2, r1
 800101a:	711a      	strb	r2, [r3, #4]
    for (_byte_count = 0; _byte_count < data_num; _byte_count++)
 800101c:	8afb      	ldrh	r3, [r7, #22]
 800101e:	3301      	adds	r3, #1
 8001020:	82fb      	strh	r3, [r7, #22]
 8001022:	8afa      	ldrh	r2, [r7, #22]
 8001024:	893b      	ldrh	r3, [r7, #8]
 8001026:	429a      	cmp	r2, r3
 8001028:	d3ef      	bcc.n	800100a <J1939_TP_TX_Message+0x46>
    }
    TP_TX_MSG.packet_offset_p = 0;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    TP_TX_MSG.packets_request_num = 0;
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_TX_MSG.packets_total = data_num / 7;
 800103a:	893a      	ldrh	r2, [r7, #8]
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <J1939_TP_TX_Message+0xe8>)
 800103e:	fba3 1302 	umull	r1, r3, r3, r2
 8001042:	1ad2      	subs	r2, r2, r3
 8001044:	0852      	lsrs	r2, r2, #1
 8001046:	4413      	add	r3, r2
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	b29b      	uxth	r3, r3
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 8001050:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    if ((data_num % 7) != 0)
 8001054:	893a      	ldrh	r2, [r7, #8]
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <J1939_TP_TX_Message+0xe8>)
 8001058:	fba3 1302 	umull	r1, r3, r3, r2
 800105c:	1ad1      	subs	r1, r2, r3
 800105e:	0849      	lsrs	r1, r1, #1
 8001060:	440b      	add	r3, r1
 8001062:	0899      	lsrs	r1, r3, #2
 8001064:	460b      	mov	r3, r1
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <J1939_TP_TX_Message+0xbe>
    {
        TP_TX_MSG.packets_total++;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 8001074:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8001078:	3301      	adds	r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 800107e:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    }
    TP_TX_MSG.time = J1939_TP_T3;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 8001084:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001088:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    //Trigger start CM_START
    TP_TX_MSG.state = J1939_TP_TX_CM_START;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <J1939_TP_TX_Message+0xe4>)
 800108e:	2201      	movs	r2, #1
 8001090:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    return RC_SUCCESS;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000003d 	.word	0x2000003d
 80010a8:	2000023c 	.word	0x2000023c
 80010ac:	24924925 	.word	0x24924925

080010b0 <J1939_Response>:
/**
* @note When receiving a PGN request, if there is a corresponding PGN in REQUEST_LIST, the PGN in REQUEST_LIST will be sent automatically. \n
  If not, a NACK will be sent; the response logic of this function, refer to J1939-21 page 17 Table 4
*/
void J1939_Response(const j1939_uint32_t PGN)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    J1939_MESSAGE _msg;

    /*Find available linked list items*/
    struct Request_List *_requestList = &REQUEST_LIST;
 80010b8:	4bbd      	ldr	r3, [pc, #756]	; (80013b0 <J1939_Response+0x300>)
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    while ((PGN != _requestList->PGN) )
 80010bc:	e043      	b.n	8001146 <J1939_Response+0x96>
    {
        if (_requestList->next == J1939_NULL)
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d13c      	bne.n	8001140 <J1939_Response+0x90>
        {
            /*The original document stipulates that NACK cannot be responded to when the global request is not supported*/
            if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 80010c6:	4bbb      	ldr	r3, [pc, #748]	; (80013b4 <J1939_Response+0x304>)
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	2bff      	cmp	r3, #255	; 0xff
 80010cc:	f000 8168 	beq.w	80013a0 <J1939_Response+0x2f0>
            {
                return;
            }
            if ((PGN & 0xFF00) >= 0xF000)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010d6:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 80010da:	f080 8163 	bcs.w	80013a4 <J1939_Response+0x2f4>
            {
                return;
            }

            /*No corresponding PGN response is created, send a NACK to the bus*/
            _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 80010de:	7b3b      	ldrb	r3, [r7, #12]
 80010e0:	2206      	movs	r2, #6
 80010e2:	f362 0384 	bfi	r3, r2, #2, #3
 80010e6:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.DataPage = 0;
 80010e8:	7b3b      	ldrb	r3, [r7, #12]
 80010ea:	f36f 0300 	bfc	r3, #0, #1
 80010ee:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 80010f0:	23e8      	movs	r3, #232	; 0xe8
 80010f2:	737b      	strb	r3, [r7, #13]
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 80010f4:	4baf      	ldr	r3, [pc, #700]	; (80013b4 <J1939_Response+0x304>)
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	73bb      	strb	r3, [r7, #14]
            _msg.Mxe.DataLength = 8;
 80010fa:	7c3b      	ldrb	r3, [r7, #16]
 80010fc:	2208      	movs	r2, #8
 80010fe:	f362 0303 	bfi	r3, r2, #0, #4
 8001102:	743b      	strb	r3, [r7, #16]
            _msg.Mxe.SourceAddress = J1939_Address;
 8001104:	4bac      	ldr	r3, [pc, #688]	; (80013b8 <J1939_Response+0x308>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	73fb      	strb	r3, [r7, #15]
            _msg.Mxe.Data[0] = J1939_NACK_CONTROL_BYTE;
 800110a:	2301      	movs	r3, #1
 800110c:	747b      	strb	r3, [r7, #17]
            _msg.Mxe.Data[1] = 0xFF;
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	74bb      	strb	r3, [r7, #18]
            _msg.Mxe.Data[2] = 0xFF;
 8001112:	23ff      	movs	r3, #255	; 0xff
 8001114:	74fb      	strb	r3, [r7, #19]
            _msg.Mxe.Data[3] = 0xFF;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	753b      	strb	r3, [r7, #20]
            _msg.Mxe.Data[4] = 0xFF;
 800111a:	23ff      	movs	r3, #255	; 0xff
 800111c:	757b      	strb	r3, [r7, #21]
            _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	75bb      	strb	r3, [r7, #22]
            _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b2db      	uxtb	r3, r3
 800112a:	75fb      	strb	r3, [r7, #23]
            _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	b2db      	uxtb	r3, r3
 8001132:	763b      	strb	r3, [r7, #24]

            SendOneMessage((J1939_MESSAGE *)&_msg);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f84b 	bl	80001d4 <SendOneMessage>
            return;
 800113e:	e134      	b.n	80013aa <J1939_Response+0x2fa>
        }
        else
        {
            _requestList = _requestList->next;
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    while ((PGN != _requestList->PGN) )
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d1b6      	bne.n	80010be <J1939_Response+0xe>
        }
    }

    /*Call dataUPFun() function, mainly used for parameter group data update*/
    if (J1939_NULL != _requestList->update)
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <J1939_Response+0xae>
    {
        _requestList->update();
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4798      	blx	r3
    }

    /*Respond to request*/
    if (_requestList->lenght > 8)
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d97a      	bls.n	800125c <J1939_Response+0x1ac>
    {
        /*An acknowledgment response multi-frame (non-broadcast multi-frame)*/
        if (RC_SUCCESS != J1939_TP_TX_Message(_requestList->PGN, OneMessage.Mxe.SourceAddress, _requestList->data, _requestList->lenght))
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	6898      	ldr	r0, [r3, #8]
 800116a:	4b92      	ldr	r3, [pc, #584]	; (80013b4 <J1939_Response+0x304>)
 800116c:	78d9      	ldrb	r1, [r3, #3]
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	889b      	ldrh	r3, [r3, #4]
 8001176:	f7ff ff25 	bl	8000fc4 <J1939_TP_TX_Message>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d035      	beq.n	80011ec <J1939_Response+0x13c>
        {
            /*The original document stipulates that NACK cannot be responded to when the global request is not supported*/
            if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 8001180:	4b8c      	ldr	r3, [pc, #560]	; (80013b4 <J1939_Response+0x304>)
 8001182:	789b      	ldrb	r3, [r3, #2]
 8001184:	2bff      	cmp	r3, #255	; 0xff
 8001186:	f000 810f 	beq.w	80013a8 <J1939_Response+0x2f8>
            {
                return;
            }

            /*If the long frame is not sent successfully*/
            _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 800118a:	7b3b      	ldrb	r3, [r7, #12]
 800118c:	2206      	movs	r2, #6
 800118e:	f362 0384 	bfi	r3, r2, #2, #3
 8001192:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.DataPage = 0;
 8001194:	7b3b      	ldrb	r3, [r7, #12]
 8001196:	f36f 0300 	bfc	r3, #0, #1
 800119a:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 800119c:	23e8      	movs	r3, #232	; 0xe8
 800119e:	737b      	strb	r3, [r7, #13]
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 80011a0:	4b84      	ldr	r3, [pc, #528]	; (80013b4 <J1939_Response+0x304>)
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	73bb      	strb	r3, [r7, #14]
            _msg.Mxe.DataLength = 8;
 80011a6:	7c3b      	ldrb	r3, [r7, #16]
 80011a8:	2208      	movs	r2, #8
 80011aa:	f362 0303 	bfi	r3, r2, #0, #4
 80011ae:	743b      	strb	r3, [r7, #16]
            _msg.Mxe.SourceAddress = J1939_Address;
 80011b0:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <J1939_Response+0x308>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	73fb      	strb	r3, [r7, #15]
            _msg.Mxe.Data[0] = J1939_ACCESS_DENIED_CONTROL_BYTE;
 80011b6:	2302      	movs	r3, #2
 80011b8:	747b      	strb	r3, [r7, #17]
            _msg.Mxe.Data[1] = 0xFF;
 80011ba:	23ff      	movs	r3, #255	; 0xff
 80011bc:	74bb      	strb	r3, [r7, #18]
            _msg.Mxe.Data[2] = 0xFF;
 80011be:	23ff      	movs	r3, #255	; 0xff
 80011c0:	74fb      	strb	r3, [r7, #19]
            _msg.Mxe.Data[3] = 0xFF;
 80011c2:	23ff      	movs	r3, #255	; 0xff
 80011c4:	753b      	strb	r3, [r7, #20]
            _msg.Mxe.Data[4] = 0xFF;
 80011c6:	23ff      	movs	r3, #255	; 0xff
 80011c8:	757b      	strb	r3, [r7, #21]
            _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	75bb      	strb	r3, [r7, #22]
            _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	75fb      	strb	r3, [r7, #23]
            _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	0c1b      	lsrs	r3, r3, #16
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	763b      	strb	r3, [r7, #24]

            SendOneMessage((J1939_MESSAGE *)&_msg);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7fe fff5 	bl	80001d4 <SendOneMessage>
            return;
 80011ea:	e0de      	b.n	80013aa <J1939_Response+0x2fa>
        }

        /*An acknowledgment response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	2206      	movs	r2, #6
 80011f0:	f362 0384 	bfi	r3, r2, #2, #3
 80011f4:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = 0;
 80011f6:	7b3b      	ldrb	r3, [r7, #12]
 80011f8:	f36f 0300 	bfc	r3, #0, #1
 80011fc:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 80011fe:	23e8      	movs	r3, #232	; 0xe8
 8001200:	737b      	strb	r3, [r7, #13]
        /*The original document stipulates that the global request responds to the global*/
        if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 8001202:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <J1939_Response+0x304>)
 8001204:	789b      	ldrb	r3, [r3, #2]
 8001206:	2bff      	cmp	r3, #255	; 0xff
 8001208:	d102      	bne.n	8001210 <J1939_Response+0x160>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 800120a:	23ff      	movs	r3, #255	; 0xff
 800120c:	73bb      	strb	r3, [r7, #14]
 800120e:	e002      	b.n	8001216 <J1939_Response+0x166>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <J1939_Response+0x304>)
 8001212:	78db      	ldrb	r3, [r3, #3]
 8001214:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = 8;
 8001216:	7c3b      	ldrb	r3, [r7, #16]
 8001218:	2208      	movs	r2, #8
 800121a:	f362 0303 	bfi	r3, r2, #0, #4
 800121e:	743b      	strb	r3, [r7, #16]
        _msg.Mxe.SourceAddress = J1939_Address;
 8001220:	4b65      	ldr	r3, [pc, #404]	; (80013b8 <J1939_Response+0x308>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	73fb      	strb	r3, [r7, #15]
        _msg.Mxe.Data[0] = J1939_ACK_CONTROL_BYTE;
 8001226:	2300      	movs	r3, #0
 8001228:	747b      	strb	r3, [r7, #17]
        _msg.Mxe.Data[1] = 0xFF;
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	74bb      	strb	r3, [r7, #18]
        _msg.Mxe.Data[2] = 0xFF;
 800122e:	23ff      	movs	r3, #255	; 0xff
 8001230:	74fb      	strb	r3, [r7, #19]
        _msg.Mxe.Data[3] = 0xFF;
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	753b      	strb	r3, [r7, #20]
        _msg.Mxe.Data[4] = 0xFF;
 8001236:	23ff      	movs	r3, #255	; 0xff
 8001238:	757b      	strb	r3, [r7, #21]
        _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	75bb      	strb	r3, [r7, #22]
        _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b2db      	uxtb	r3, r3
 8001246:	75fb      	strb	r3, [r7, #23]
        _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0c1b      	lsrs	r3, r3, #16
 800124c:	b2db      	uxtb	r3, r3
 800124e:	763b      	strb	r3, [r7, #24]
        SendOneMessage((J1939_MESSAGE *)&_msg);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ffbd 	bl	80001d4 <SendOneMessage>
 800125a:	e0a6      	b.n	80013aa <J1939_Response+0x2fa>
    }
    else
    {

        /*An acknowledgment response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 800125c:	7b3b      	ldrb	r3, [r7, #12]
 800125e:	2206      	movs	r2, #6
 8001260:	f362 0384 	bfi	r3, r2, #2, #3
 8001264:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = 0;
 8001266:	7b3b      	ldrb	r3, [r7, #12]
 8001268:	f36f 0300 	bfc	r3, #0, #1
 800126c:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 800126e:	23e8      	movs	r3, #232	; 0xe8
 8001270:	737b      	strb	r3, [r7, #13]
        _msg.Mxe.SourceAddress = J1939_Address;
 8001272:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <J1939_Response+0x308>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	73fb      	strb	r3, [r7, #15]
        /*The original document stipulates that the global request responds to the global*/
        if ((OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS) || ((PGN & 0xFF00) >= 0xF000))
 8001278:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <J1939_Response+0x304>)
 800127a:	789b      	ldrb	r3, [r3, #2]
 800127c:	2bff      	cmp	r3, #255	; 0xff
 800127e:	d005      	beq.n	800128c <J1939_Response+0x1dc>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001286:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800128a:	d302      	bcc.n	8001292 <J1939_Response+0x1e2>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 800128c:	23ff      	movs	r3, #255	; 0xff
 800128e:	73bb      	strb	r3, [r7, #14]
 8001290:	e002      	b.n	8001298 <J1939_Response+0x1e8>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 8001292:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <J1939_Response+0x304>)
 8001294:	78db      	ldrb	r3, [r3, #3]
 8001296:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = 8;
 8001298:	7c3b      	ldrb	r3, [r7, #16]
 800129a:	2208      	movs	r2, #8
 800129c:	f362 0303 	bfi	r3, r2, #0, #4
 80012a0:	743b      	strb	r3, [r7, #16]
        _msg.Mxe.SourceAddress = J1939_Address;
 80012a2:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <J1939_Response+0x308>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	73fb      	strb	r3, [r7, #15]
        _msg.Mxe.Data[0] = J1939_ACK_CONTROL_BYTE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	747b      	strb	r3, [r7, #17]
        _msg.Mxe.Data[1] = 0xFF;
 80012ac:	23ff      	movs	r3, #255	; 0xff
 80012ae:	74bb      	strb	r3, [r7, #18]
        _msg.Mxe.Data[2] = 0xFF;
 80012b0:	23ff      	movs	r3, #255	; 0xff
 80012b2:	74fb      	strb	r3, [r7, #19]
        _msg.Mxe.Data[3] = 0xFF;
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	753b      	strb	r3, [r7, #20]
        _msg.Mxe.Data[4] = 0xFF;
 80012b8:	23ff      	movs	r3, #255	; 0xff
 80012ba:	757b      	strb	r3, [r7, #21]
        _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	75bb      	strb	r3, [r7, #22]
        _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	75fb      	strb	r3, [r7, #23]
        _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	763b      	strb	r3, [r7, #24]
        SendOneMessage((J1939_MESSAGE *)&_msg);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff7c 	bl	80001d4 <SendOneMessage>

        /*Return a single frame of confirmation response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 80012dc:	7b3b      	ldrb	r3, [r7, #12]
 80012de:	2206      	movs	r2, #6
 80012e0:	f362 0384 	bfi	r3, r2, #2, #3
 80012e4:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = (((_requestList->PGN) >> 16) & 0x1);
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	f362 0300 	bfi	r3, r2, #0, #1
 80012f8:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = ((_requestList->PGN) >> 8) & 0xFF;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	b2db      	uxtb	r3, r3
 8001302:	737b      	strb	r3, [r7, #13]
        _msg.Mxe.SourceAddress = J1939_Address;
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <J1939_Response+0x308>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	73fb      	strb	r3, [r7, #15]
        /*The original document stipulates that the global request responds to the global*/
        if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <J1939_Response+0x304>)
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	2bff      	cmp	r3, #255	; 0xff
 8001310:	d102      	bne.n	8001318 <J1939_Response+0x268>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 8001312:	23ff      	movs	r3, #255	; 0xff
 8001314:	73bb      	strb	r3, [r7, #14]
 8001316:	e002      	b.n	800131e <J1939_Response+0x26e>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <J1939_Response+0x304>)
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = _requestList->lenght;
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	889b      	ldrh	r3, [r3, #4]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	b2da      	uxtb	r2, r3
 8001328:	7c3b      	ldrb	r3, [r7, #16]
 800132a:	f362 0303 	bfi	r3, r2, #0, #4
 800132e:	743b      	strb	r3, [r7, #16]
        {
            j1939_uint8_t _i = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            for (_i = 0; _i < (_requestList->lenght); _i++)
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800133c:	e011      	b.n	8001362 <J1939_Response+0x2b2>
            {
                _msg.Mxe.Data[_i] = _requestList->data[_i];
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001346:	441a      	add	r2, r3
 8001348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001352:	440b      	add	r3, r1
 8001354:	f803 2c17 	strb.w	r2, [r3, #-23]
            for (_i = 0; _i < (_requestList->lenght); _i++)
 8001358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800135c:	3301      	adds	r3, #1
 800135e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001366:	b29a      	uxth	r2, r3
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3e6      	bcc.n	800133e <J1939_Response+0x28e>
            }
            for (; _i < 8; _i++)
 8001370:	e00c      	b.n	800138c <J1939_Response+0x2dc>
            {
                _msg.Mxe.Data[_i] = 0xFF;
 8001372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800137a:	4413      	add	r3, r2
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	f803 2c17 	strb.w	r2, [r3, #-23]
            for (; _i < 8; _i++)
 8001382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001386:	3301      	adds	r3, #1
 8001388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800138c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001390:	2b07      	cmp	r3, #7
 8001392:	d9ee      	bls.n	8001372 <J1939_Response+0x2c2>
            }
        }
        SendOneMessage((J1939_MESSAGE *)&_msg);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4618      	mov	r0, r3
 800139a:	f7fe ff1b 	bl	80001d4 <SendOneMessage>
 800139e:	e004      	b.n	80013aa <J1939_Response+0x2fa>
                return;
 80013a0:	bf00      	nop
 80013a2:	e002      	b.n	80013aa <J1939_Response+0x2fa>
                return;
 80013a4:	bf00      	nop
 80013a6:	e000      	b.n	80013aa <J1939_Response+0x2fa>
                return;
 80013a8:	bf00      	nop
    }
}
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200003b4 	.word	0x200003b4
 80013b4:	2000014c 	.word	0x2000014c
 80013b8:	2000014a 	.word	0x2000014a

080013bc <J1939_SetAddressFilter>:
//extern CAN_RxHeaderTypeDef txhead;

//extern CAN_NODE Can_Node;    // CAN hardware selection

void J1939_SetAddressFilter()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

	can_fil_config();
 80013c0:	f000 f8e0 	bl	8001584 <can_fil_config>

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <J1939_CAN_Transmit>:
		First write the data in the MsgPtr passed into the function to the CAN structure, and then call the CAN driver's sending function
		By default, it supports the sending and receiving of 4 CAN hardware. If there are less than 4 channels, you only need to configure the corresponding Can_Node switch code area,
		Others (Select_CAN_NODE) ​​remain unchanged. Just return directly (break).
*/
void  J1939_CAN_Transmit(J1939_MESSAGE *MsgPtr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint32_t mailbox;
			/* Load the 29-bit ID of the first CAN hardware */
								can_id.dummy=0;
 80013d0:	4a25      	ldr	r2, [pc, #148]	; (8001468 <J1939_CAN_Transmit+0xa0>)
 80013d2:	78d3      	ldrb	r3, [r2, #3]
 80013d4:	f36f 1347 	bfc	r3, #5, #3
 80013d8:	70d3      	strb	r3, [r2, #3]
								can_id.Prior=(MsgPtr->Mxe).Priority;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013e2:	b2d9      	uxtb	r1, r3
 80013e4:	4a20      	ldr	r2, [pc, #128]	; (8001468 <J1939_CAN_Transmit+0xa0>)
 80013e6:	78d3      	ldrb	r3, [r2, #3]
 80013e8:	f361 0384 	bfi	r3, r1, #2, #3
 80013ec:	70d3      	strb	r3, [r2, #3]
//								can_id.Reserved=(MsgPtr->Mxe).Reserve;
								can_id.Reserved=0;
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <J1939_CAN_Transmit+0xa0>)
 80013f0:	78d3      	ldrb	r3, [r2, #3]
 80013f2:	f36f 0341 	bfc	r3, #1, #1
 80013f6:	70d3      	strb	r3, [r2, #3]
								can_id.Data_Page=(MsgPtr->Mxe).DataPage;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001400:	b2d9      	uxtb	r1, r3
 8001402:	4a19      	ldr	r2, [pc, #100]	; (8001468 <J1939_CAN_Transmit+0xa0>)
 8001404:	78d3      	ldrb	r3, [r2, #3]
 8001406:	f361 0300 	bfi	r3, r1, #0, #1
 800140a:	70d3      	strb	r3, [r2, #3]
								can_id.PDU_Format=(MsgPtr->Mxe).PDUFormat;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	785a      	ldrb	r2, [r3, #1]
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <J1939_CAN_Transmit+0xa0>)
 8001412:	709a      	strb	r2, [r3, #2]
								can_id.PDU_Specific=(MsgPtr->Mxe).PDUSpecific;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	789a      	ldrb	r2, [r3, #2]
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <J1939_CAN_Transmit+0xa0>)
 800141a:	705a      	strb	r2, [r3, #1]
								can_id.SA=(MsgPtr->Mxe).SourceAddress;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	78da      	ldrb	r2, [r3, #3]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <J1939_CAN_Transmit+0xa0>)
 8001422:	701a      	strb	r2, [r3, #0]


								uint32_t *extid = (uint32_t*)(&can_id);
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <J1939_CAN_Transmit+0xa0>)
 8001426:	617b      	str	r3, [r7, #20]
								uint32_t value = *extid;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
								//can_tx(value);

//			txhead.ExtId=0x06;
								//txhead.StdId=0x05;

								txhead.ExtId=value;
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <J1939_CAN_Transmit+0xa4>)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	6053      	str	r3, [r2, #4]
								txhead.IDE=CAN_ID_EXT;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <J1939_CAN_Transmit+0xa4>)
 8001436:	2204      	movs	r2, #4
 8001438:	609a      	str	r2, [r3, #8]

			/* CAN hardware load data length */
			txhead.DLC=(MsgPtr->Mxe).DataLength;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <J1939_CAN_Transmit+0xa4>)
 8001448:	611a      	str	r2, [r3, #16]
			/* CAN hardware load data */
			//*MsgPtr->Array=message;
			/* CAN hardware load RTR */
			txhead.RTR=CAN_RTR_DATA;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <J1939_CAN_Transmit+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
			// CAN hardware starts to send data

			HAL_CAN_AddTxMessage(&hcan1,&txhead,(MsgPtr->Mxe).Data, &mailbox);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1d5a      	adds	r2, r3, #5
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <J1939_CAN_Transmit+0xa4>)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <J1939_CAN_Transmit+0xa8>)
 800145c:	f001 f932 	bl	80026c4 <HAL_CAN_AddTxMessage>

}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000034c 	.word	0x2000034c
 800146c:	20000518 	.word	0x20000518
 8001470:	2000047c 	.word	0x2000047c

08001474 <J1939_CAN_Receive>:
		By default, it supports the sending and receiving of 4 CAN hardware. If there are less than 4 channels, you only need to configure the corresponding Can_Node switch code area,
		Others (Select_CAN_NODE) ​​remain unchanged. Just return directly (return 0)
*/

int J1939_CAN_Receive(J1939_MESSAGE *MsgPtr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&rxhead, arr) == HAL_OK) // Judge whether there is data coming in CAN hardware 1
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <J1939_CAN_Receive+0x104>)
 800147e:	4a3f      	ldr	r2, [pc, #252]	; (800157c <J1939_CAN_Receive+0x108>)
 8001480:	2100      	movs	r1, #0
 8001482:	483f      	ldr	r0, [pc, #252]	; (8001580 <J1939_CAN_Receive+0x10c>)
 8001484:	f001 f9f9 	bl	800287a <HAL_CAN_GetRxMessage>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d16e      	bne.n	800156c <J1939_CAN_Receive+0xf8>
							{
								//HAL_UART_Transmit(&huart3,"msg_from node_1 in reception\n\r", 30, 1000);
							    	//Error_Handler();
								// Your code, after reading the data from CAN hardware 1, store it in MsgPtr
								uint8_t cc;
								(MsgPtr->Mxe).DataPage=0;
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	7813      	ldrb	r3, [r2, #0]
 8001492:	f36f 0300 	bfc	r3, #0, #1
 8001496:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).Res=0;
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	7813      	ldrb	r3, [r2, #0]
 800149c:	f36f 0341 	bfc	r3, #1, #1
 80014a0:	7013      	strb	r3, [r2, #0]
								cc=(uint8_t)((rxhead.ExtId)>>24);
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <J1939_CAN_Receive+0x108>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	0e1b      	lsrs	r3, r3, #24
 80014a8:	73fb      	strb	r3, [r7, #15]
								(MsgPtr->Mxe).Priority=(uint8_t)((rxhead.ExtId)>>26);
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <J1939_CAN_Receive+0x108>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	0e9b      	lsrs	r3, r3, #26
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	b2d9      	uxtb	r1, r3
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	7813      	ldrb	r3, [r2, #0]
 80014ba:	f361 0384 	bfi	r3, r1, #2, #3
 80014be:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).Reserve=0;
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	7813      	ldrb	r3, [r2, #0]
 80014c4:	f36f 1347 	bfc	r3, #5, #3
 80014c8:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).PDUFormat=(uint8_t)((rxhead.ExtId)>>16);
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <J1939_CAN_Receive+0x108>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	0c1b      	lsrs	r3, r3, #16
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	705a      	strb	r2, [r3, #1]
								(MsgPtr->Mxe).PDUSpecific=(uint8_t)((rxhead.ExtId)>>8);
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <J1939_CAN_Receive+0x108>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	709a      	strb	r2, [r3, #2]
								if((MsgPtr->Mxe).PDUFormat<=239)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	2bef      	cmp	r3, #239	; 0xef
 80014e8:	d805      	bhi.n	80014f6 <J1939_CAN_Receive+0x82>
								{
									if ((MsgPtr->Mxe).PDUSpecific!=J1939_STARTING_ADDRESS_1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	789b      	ldrb	r3, [r3, #2]
 80014ee:	2b11      	cmp	r3, #17
 80014f0:	d001      	beq.n	80014f6 <J1939_CAN_Receive+0x82>
									{
										return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e03b      	b.n	800156e <J1939_CAN_Receive+0xfa>
									}
								}
								(MsgPtr->Mxe).SourceAddress=(uint8_t)(rxhead.ExtId);
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <J1939_CAN_Receive+0x108>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	70da      	strb	r2, [r3, #3]
								(MsgPtr->Mxe).RTR=rxhead.RTR;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <J1939_CAN_Receive+0x108>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	b2d9      	uxtb	r1, r3
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	7913      	ldrb	r3, [r2, #4]
 800150e:	f361 1307 	bfi	r3, r1, #4, #4
 8001512:	7113      	strb	r3, [r2, #4]
								(MsgPtr->Mxe).DataLength=rxhead.DLC;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <J1939_CAN_Receive+0x108>)
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	7913      	ldrb	r3, [r2, #4]
 8001522:	f361 0303 	bfi	r3, r1, #0, #4
 8001526:	7113      	strb	r3, [r2, #4]

								 (MsgPtr->Mxe).Data[0]=arr[0];
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <J1939_CAN_Receive+0x104>)
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	715a      	strb	r2, [r3, #5]
								 (MsgPtr->Mxe).Data[1]=arr[1];
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <J1939_CAN_Receive+0x104>)
 8001532:	785a      	ldrb	r2, [r3, #1]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	719a      	strb	r2, [r3, #6]
								 (MsgPtr->Mxe).Data[2]=arr[2];
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <J1939_CAN_Receive+0x104>)
 800153a:	789a      	ldrb	r2, [r3, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	71da      	strb	r2, [r3, #7]
								 (MsgPtr->Mxe).Data[3]=arr[3];
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <J1939_CAN_Receive+0x104>)
 8001542:	78da      	ldrb	r2, [r3, #3]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	721a      	strb	r2, [r3, #8]
								 (MsgPtr->Mxe).Data[4]=arr[4];
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <J1939_CAN_Receive+0x104>)
 800154a:	791a      	ldrb	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	725a      	strb	r2, [r3, #9]
								 (MsgPtr->Mxe).Data[5]=arr[5];
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <J1939_CAN_Receive+0x104>)
 8001552:	795a      	ldrb	r2, [r3, #5]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	729a      	strb	r2, [r3, #10]
								 (MsgPtr->Mxe).Data[6]=arr[6];
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <J1939_CAN_Receive+0x104>)
 800155a:	799a      	ldrb	r2, [r3, #6]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	72da      	strb	r2, [r3, #11]
								 (MsgPtr->Mxe).Data[7]=arr[7];
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <J1939_CAN_Receive+0x104>)
 8001562:	79da      	ldrb	r2, [r3, #7]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	731a      	strb	r2, [r3, #12]

								return  1 ;
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <J1939_CAN_Receive+0xfa>
							}


	return  0 ; // No message
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200003d4 	.word	0x200003d4
 800157c:	20000400 	.word	0x20000400
 8001580:	2000047c 	.word	0x2000047c

08001584 <can_fil_config>:

#include "J1939_Config.H"


void can_fil_config()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
		fil.FilterIdHigh=0x0000;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <can_fil_config+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
	  	fil.FilterIdLow=0x0000;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <can_fil_config+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
	  	fil.FilterMaskIdHigh=0x0000;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <can_fil_config+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
	  	fil.FilterMaskIdLow=0x0000;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <can_fil_config+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
	  	fil.FilterFIFOAssignment=0;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <can_fil_config+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
	  	fil.FilterBank=0;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <can_fil_config+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
	  	fil.FilterMode=CAN_FILTERMODE_IDMASK;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <can_fil_config+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
	  	fil.FilterScale=CAN_FILTERSCALE_32BIT;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <can_fil_config+0x58>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	61da      	str	r2, [r3, #28]
	  	fil.FilterActivation=CAN_FILTER_ENABLE;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <can_fil_config+0x58>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	621a      	str	r2, [r3, #32]
	  	fil.SlaveStartFilterBank=0;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <can_fil_config+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

	  	if (HAL_CAN_ConfigFilter(&hcan1, &fil) != HAL_OK)
 80015c4:	4905      	ldr	r1, [pc, #20]	; (80015dc <can_fil_config+0x58>)
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <can_fil_config+0x5c>)
 80015c8:	f000 ff6e 	bl	80024a8 <HAL_CAN_ConfigFilter>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <can_fil_config+0x52>
	  		    {
	  		        /* Filter configuration Error */
	  		        //HAL_UART_Transmit(&huart3,"error in configfil\n\r", 20, 1000);
	  		        Error_Handler();
 80015d2:	f000 fb59 	bl	8001c88 <Error_Handler>
	  		    }
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200004ec 	.word	0x200004ec
 80015e0:	2000047c 	.word	0x2000047c

080015e4 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

	//HAL_UART_Transmit(&huart3, "txcalbckM0\n\r", 25, 1000);
	memset(mssg,0,25);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2219      	movs	r2, #25
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fa1d 	bl	8004a34 <memset>


}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)

{
 8001602:	b580      	push	{r7, lr}
 8001604:	b08a      	sub	sp, #40	; 0x28
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

		//HAL_UART_Transmit(&huart3, "txcalbckM1\n\r", 25, 1000);
		memset(mssg,0,25);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2219      	movs	r2, #25
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fa0e 	bl	8004a34 <memset>

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

		//HAL_UART_Transmit(&huart3, "txcalbckM2\n\r", 25, 1000);
		memset(mssg,0,25);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	2219      	movs	r2, #25
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f003 f9ff 	bl	8004a34 <memset>

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_CAN_RxFifo0MsgPendingCallback>:
//  		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
//}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&rxhead, arr) != HAL_OK)
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800164c:	2100      	movs	r1, #0
 800164e:	4809      	ldr	r0, [pc, #36]	; (8001674 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001650:	f001 f913 	bl	800287a <HAL_CAN_GetRxMessage>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    {

    	//HAL_UART_Transmit(&huart3,"error in reception\n\r", 20, 1000);
    	Error_Handler();
 800165a:	f000 fb15 	bl	8001c88 <Error_Handler>
    }
	J1939_ReceiveMessages();
 800165e:	f7fe fed1 	bl	8000404 <J1939_ReceiveMessages>
	 //readMsg();

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200003d4 	.word	0x200003d4
 8001670:	20000400 	.word	0x20000400
 8001674:	2000047c 	.word	0x2000047c

08001678 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

			//HAL_UART_Transmit(&huart3, "callbck_error\n\r", 25, 1000);
			memset(mssg,0,25);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2219      	movs	r2, #25
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f003 f9d3 	bl	8004a34 <memset>

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <sendMsg_KEYINFO>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendMsg_KEYINFO(J1939_MESSAGE *Message)
{
 8001696:	b5b0      	push	{r4, r5, r7, lr}
 8001698:	b088      	sub	sp, #32
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]

	J1939_MESSAGE _msgKEYINFO;
	_msgKEYINFO=*Message;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f107 040c 	add.w	r4, r7, #12
 80016a4:	461d      	mov	r5, r3
 80016a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	6023      	str	r3, [r4, #0]

	//uint8_t buf[]="2";
	_msgKEYINFO.Mxe.DataPage = 0;
 80016ae:	7b3b      	ldrb	r3, [r7, #12]
 80016b0:	f36f 0300 	bfc	r3, #0, #1
 80016b4:	733b      	strb	r3, [r7, #12]
	_msgKEYINFO.Mxe.Priority = 0x01;
 80016b6:	7b3b      	ldrb	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f362 0384 	bfi	r3, r2, #2, #3
 80016be:	733b      	strb	r3, [r7, #12]
	_msgKEYINFO.Mxe.DestinationAddress = 0x33;//changed from 33 to 31//destination is all
 80016c0:	2333      	movs	r3, #51	; 0x33
 80016c2:	73bb      	strb	r3, [r7, #14]
	_msgKEYINFO.Mxe.DataLength = 8;
 80016c4:	7c3b      	ldrb	r3, [r7, #16]
 80016c6:	2208      	movs	r2, #8
 80016c8:	f362 0303 	bfi	r3, r2, #0, #4
 80016cc:	743b      	strb	r3, [r7, #16]
	_msgKEYINFO.Mxe.PDUFormat = 0xf1;
 80016ce:	23f1      	movs	r3, #241	; 0xf1
 80016d0:	737b      	strb	r3, [r7, #13]
	_msgKEYINFO.Mxe.SourceAddress = 0x33;
 80016d2:	2333      	movs	r3, #51	; 0x33
 80016d4:	73fb      	strb	r3, [r7, #15]
	//	_msgKEYINFO.Mxe.Data[5] = 0;
	//	_msgKEYINFO.Mxe.Data[6] = 0;
	//	_msgKEYINFO.Mxe.Data[7] = 'k';

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message(&_msgKEYINFO)!= RC_SUCCESS);
 80016d6:	bf00      	nop
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fde3 	bl	80002a8 <J1939_Send_Message>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f7      	bne.n	80016d8 <sendMsg_KEYINFO+0x42>

	//HAL_UART_Transmit(&huart3,"send msg from keyinfo\r\n", 30, 1000);
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bdb0      	pop	{r4, r5, r7, pc}

080016f2 <sendMsg_BMSSTATUS>:
void sendMsg_BMSSTATUS(J1939_MESSAGE *Message)
{
 80016f2:	b5b0      	push	{r4, r5, r7, lr}
 80016f4:	b088      	sub	sp, #32
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	J1939_MESSAGE _msgBMSSTATUS;


	_msgBMSSTATUS=*Message;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f107 040c 	add.w	r4, r7, #12
 8001700:	461d      	mov	r5, r3
 8001702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	6023      	str	r3, [r4, #0]
	_msgBMSSTATUS.Mxe.DataPage = 0;
 800170a:	7b3b      	ldrb	r3, [r7, #12]
 800170c:	f36f 0300 	bfc	r3, #0, #1
 8001710:	733b      	strb	r3, [r7, #12]
	_msgBMSSTATUS.Mxe.Priority = 0x03;
 8001712:	7b3b      	ldrb	r3, [r7, #12]
 8001714:	2203      	movs	r2, #3
 8001716:	f362 0384 	bfi	r3, r2, #2, #3
 800171a:	733b      	strb	r3, [r7, #12]
	_msgBMSSTATUS.Mxe.DestinationAddress = 0x22;
 800171c:	2322      	movs	r3, #34	; 0x22
 800171e:	73bb      	strb	r3, [r7, #14]
	_msgBMSSTATUS.Mxe.DataLength = 8;
 8001720:	7c3b      	ldrb	r3, [r7, #16]
 8001722:	2208      	movs	r2, #8
 8001724:	f362 0303 	bfi	r3, r2, #0, #4
 8001728:	743b      	strb	r3, [r7, #16]
	_msgBMSSTATUS.Mxe.PDUFormat = 0xF4;
 800172a:	23f4      	movs	r3, #244	; 0xf4
 800172c:	737b      	strb	r3, [r7, #13]
	_msgBMSSTATUS.Mxe.SourceAddress = 0x44;
 800172e:	2344      	movs	r3, #68	; 0x44
 8001730:	73fb      	strb	r3, [r7, #15]
	//	_msgBMSSTATUS.Mxe.Data[5] = 0;
	//	_msgBMSSTATUS.Mxe.Data[6] = 0;
	//	_msgBMSSTATUS.Mxe.Data[7] = 0;

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message( &_msgBMSSTATUS) != RC_SUCCESS);
 8001732:	bf00      	nop
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fdb5 	bl	80002a8 <J1939_Send_Message>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f7      	bne.n	8001734 <sendMsg_BMSSTATUS+0x42>
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bdb0      	pop	{r4, r5, r7, pc}

0800174e <sendMsg_MOTORCONTROLLERSTATUS>:

void sendMsg_MOTORCONTROLLERSTATUS(J1939_MESSAGE *Message)
{
 800174e:	b5b0      	push	{r4, r5, r7, lr}
 8001750:	b088      	sub	sp, #32
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	J1939_MESSAGE _msgMOTORCONTROLLERSTATUS;
	_msgMOTORCONTROLLERSTATUS =*Message;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f107 040c 	add.w	r4, r7, #12
 800175c:	461d      	mov	r5, r3
 800175e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	6023      	str	r3, [r4, #0]

	_msgMOTORCONTROLLERSTATUS.Mxe.DataPage = 0;
 8001766:	7b3b      	ldrb	r3, [r7, #12]
 8001768:	f36f 0300 	bfc	r3, #0, #1
 800176c:	733b      	strb	r3, [r7, #12]
	_msgMOTORCONTROLLERSTATUS.Mxe.Priority = 0x03;
 800176e:	7b3b      	ldrb	r3, [r7, #12]
 8001770:	2203      	movs	r2, #3
 8001772:	f362 0384 	bfi	r3, r2, #2, #3
 8001776:	733b      	strb	r3, [r7, #12]
	_msgMOTORCONTROLLERSTATUS.Mxe.DestinationAddress = 0x33;
 8001778:	2333      	movs	r3, #51	; 0x33
 800177a:	73bb      	strb	r3, [r7, #14]
	_msgMOTORCONTROLLERSTATUS.Mxe.DataLength = 1;
 800177c:	7c3b      	ldrb	r3, [r7, #16]
 800177e:	2201      	movs	r2, #1
 8001780:	f362 0303 	bfi	r3, r2, #0, #4
 8001784:	743b      	strb	r3, [r7, #16]
	_msgMOTORCONTROLLERSTATUS.Mxe.PDUFormat = 0xF2;
 8001786:	23f2      	movs	r3, #242	; 0xf2
 8001788:	737b      	strb	r3, [r7, #13]
	_msgMOTORCONTROLLERSTATUS.Mxe.SourceAddress = 0x11;
 800178a:	2311      	movs	r3, #17
 800178c:	73fb      	strb	r3, [r7, #15]
	//	_msgMOTORCONTROLLERSTATUS.Mxe.Data[5] = 0;
	//	_msgMOTORCONTROLLERSTATUS.Mxe.Data[6] = 0;
	//	_msgMOTORCONTROLLERSTATUS.Mxe.Data[7] = 0;

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message( &_msgMOTORCONTROLLERSTATUS) != RC_SUCCESS);
 800178e:	bf00      	nop
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fd87 	bl	80002a8 <J1939_Send_Message>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f7      	bne.n	8001790 <sendMsg_MOTORCONTROLLERSTATUS+0x42>


}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bdb0      	pop	{r4, r5, r7, pc}

080017aa <sendMsg_VCUSTATUS>:

void sendMsg_VCUSTATUS(J1939_MESSAGE *Message)
{
 80017aa:	b5b0      	push	{r4, r5, r7, lr}
 80017ac:	b088      	sub	sp, #32
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	J1939_MESSAGE _msgVCUSTATUS;
	_msgVCUSTATUS =*Message;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f107 040c 	add.w	r4, r7, #12
 80017b8:	461d      	mov	r5, r3
 80017ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	6023      	str	r3, [r4, #0]
	_msgVCUSTATUS.Mxe.DataPage = 0;
 80017c2:	7b3b      	ldrb	r3, [r7, #12]
 80017c4:	f36f 0300 	bfc	r3, #0, #1
 80017c8:	733b      	strb	r3, [r7, #12]
	_msgVCUSTATUS.Mxe.Priority = 0x03;
 80017ca:	7b3b      	ldrb	r3, [r7, #12]
 80017cc:	2203      	movs	r2, #3
 80017ce:	f362 0384 	bfi	r3, r2, #2, #3
 80017d2:	733b      	strb	r3, [r7, #12]
	_msgVCUSTATUS.Mxe.DestinationAddress = 0x22;
 80017d4:	2322      	movs	r3, #34	; 0x22
 80017d6:	73bb      	strb	r3, [r7, #14]
	_msgVCUSTATUS.Mxe.DataLength = 8;
 80017d8:	7c3b      	ldrb	r3, [r7, #16]
 80017da:	2208      	movs	r2, #8
 80017dc:	f362 0303 	bfi	r3, r2, #0, #4
 80017e0:	743b      	strb	r3, [r7, #16]
	_msgVCUSTATUS.Mxe.PDUFormat = 0x01;
 80017e2:	2301      	movs	r3, #1
 80017e4:	737b      	strb	r3, [r7, #13]
	_msgVCUSTATUS.Mxe.SourceAddress = 0x22;
 80017e6:	2322      	movs	r3, #34	; 0x22
 80017e8:	73fb      	strb	r3, [r7, #15]
	//	_msgVCUSTATUS.Mxe.Data[5] = 0;
	//	_msgVCUSTATUS.Mxe.Data[6] = 0;
	//	_msgVCUSTATUS.Mxe.Data[7] = 0;

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message(&_msgVCUSTATUS) != RC_SUCCESS);
 80017ea:	bf00      	nop
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fd59 	bl	80002a8 <J1939_Send_Message>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f7      	bne.n	80017ec <sendMsg_VCUSTATUS+0x42>


}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180e:	f000 fc6c 	bl	80020ea <HAL_Init>

  /* USER CODE BEGIN Init */
	Key_Infovar.Key_In=0;
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <main+0xd4>)
 8001814:	7813      	ldrb	r3, [r2, #0]
 8001816:	f36f 0341 	bfc	r3, #1, #1
 800181a:	7013      	strb	r3, [r2, #0]
	Key_Infovar.Key_Off=0;
 800181c:	4a2f      	ldr	r2, [pc, #188]	; (80018dc <main+0xd4>)
 800181e:	7813      	ldrb	r3, [r2, #0]
 8001820:	f36f 0300 	bfc	r3, #0, #1
 8001824:	7013      	strb	r3, [r2, #0]
	//	Microcontroller_Statusvar.motorcontroller_state=0;
	Motorcontroller_commandvar.brake=0;
 8001826:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <main+0xd8>)
 8001828:	7813      	ldrb	r3, [r2, #0]
 800182a:	f36f 0382 	bfc	r3, #2, #1
 800182e:	7013      	strb	r3, [r2, #0]
	Motorcontroller_commandvar.ignition_command=0;
 8001830:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <main+0xd8>)
 8001832:	7813      	ldrb	r3, [r2, #0]
 8001834:	f36f 0301 	bfc	r3, #0, #2
 8001838:	7013      	strb	r3, [r2, #0]

	Switch_Infovar.killswitch=0;
 800183a:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <main+0xdc>)
 800183c:	7813      	ldrb	r3, [r2, #0]
 800183e:	f36f 0382 	bfc	r3, #2, #1
 8001842:	7013      	strb	r3, [r2, #0]
	Switch_Infovar.brake=0;
 8001844:	4a27      	ldr	r2, [pc, #156]	; (80018e4 <main+0xdc>)
 8001846:	7813      	ldrb	r3, [r2, #0]
 8001848:	f36f 0300 	bfc	r3, #0, #1
 800184c:	7013      	strb	r3, [r2, #0]
	Switch_Infovar.indicator=0;
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <main+0xdc>)
 8001850:	7813      	ldrb	r3, [r2, #0]
 8001852:	f36f 03c4 	bfc	r3, #3, #2
 8001856:	7013      	strb	r3, [r2, #0]
	Switch_Infovar.highbeam=0;
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <main+0xdc>)
 800185a:	7813      	ldrb	r3, [r2, #0]
 800185c:	f36f 0341 	bfc	r3, #1, #1
 8001860:	7013      	strb	r3, [r2, #0]
	Switch_Infovar.navigation=0;
 8001862:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <main+0xdc>)
 8001864:	7813      	ldrb	r3, [r2, #0]
 8001866:	f36f 1347 	bfc	r3, #5, #3
 800186a:	7013      	strb	r3, [r2, #0]
	BMS_Statusvar.BMS_Status=0;
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <main+0xe0>)
 800186e:	7813      	ldrb	r3, [r2, #0]
 8001870:	f36f 0300 	bfc	r3, #0, #1
 8001874:	7013      	strb	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f841 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f000 f913 	bl	8001aa4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800187e:	f000 f8c3 	bl	8001a08 <MX_TIM2_Init>
  MX_CAN1_Init();
 8001882:	f000 f88b 	bl	800199c <MX_CAN1_Init>
	//  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);//LEFT INDICATOR
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);//STOP LIGHT
	// HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);//stb used only microchip
	//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1);//voltage
	//HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_ERROR);// interrupts activation
	J1939_SetAddressFilter();
 8001886:	f7ff fd99 	bl	80013bc <J1939_SetAddressFilter>
	if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 800188a:	4818      	ldr	r0, [pc, #96]	; (80018ec <main+0xe4>)
 800188c:	f000 fed6 	bl	800263c <HAL_CAN_Start>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <main+0x92>
	{
		//		HAL_UART_Transmit(&huart3,"error in can_start\n\r", 20, 1000);
		Error_Handler();
 8001896:	f000 f9f7 	bl	8001c88 <Error_Handler>

	}
	J1939_Initialization();
 800189a:	f7fe fd11 	bl	80002c0 <J1939_Initialization>


	int a=0;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switches_call();
 80018a2:	f000 faff 	bl	8001ea4 <switches_call>
		HAL_Delay(15);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 fc94 	bl	80021d4 <HAL_Delay>
		J1939_Poll( );
 80018ac:	f7fe fd76 	bl	800039c <J1939_Poll>

		while(vehicle_state)
 80018b0:	e00e      	b.n	80018d0 <main+0xc8>
		{
			switches_call();
 80018b2:	f000 faf7 	bl	8001ea4 <switches_call>
			if(count1%2==0)
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <main+0xe8>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <main+0xc8>
			{
				vehicle_state=0;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <main+0xec>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <main+0xf0>)
 80018cc:	f002 fcbe 	bl	800424c <HAL_TIM_Base_Stop_IT>
		while(vehicle_state)
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <main+0xec>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ec      	bne.n	80018b2 <main+0xaa>
		switches_call();
 80018d8:	e7e3      	b.n	80018a2 <main+0x9a>
 80018da:	bf00      	nop
 80018dc:	20000030 	.word	0x20000030
 80018e0:	200003cc 	.word	0x200003cc
 80018e4:	20000160 	.word	0x20000160
 80018e8:	20000164 	.word	0x20000164
 80018ec:	2000047c 	.word	0x2000047c
 80018f0:	2000002d 	.word	0x2000002d
 80018f4:	2000002e 	.word	0x2000002e
 80018f8:	200005ac 	.word	0x200005ac

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b096      	sub	sp, #88	; 0x58
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	2244      	movs	r2, #68	; 0x44
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f892 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001926:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001928:	2302      	movs	r3, #2
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800192c:	2303      	movs	r3, #3
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001930:	2301      	movs	r3, #1
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001934:	2314      	movs	r3, #20
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001938:	2307      	movs	r3, #7
 800193a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800193c:	2302      	movs	r3, #2
 800193e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4618      	mov	r0, r3
 800194a:	f001 fddd 	bl	8003508 <HAL_RCC_OscConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001954:	f000 f998 	bl	8001c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001958:	230f      	movs	r3, #15
 800195a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195c:	2303      	movs	r3, #3
 800195e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800196c:	463b      	mov	r3, r7
 800196e:	2104      	movs	r1, #4
 8001970:	4618      	mov	r0, r3
 8001972:	f002 f9e9 	bl	8003d48 <HAL_RCC_ClockConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800197c:	f000 f984 	bl	8001c88 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001980:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001984:	f001 fd6a 	bl	800345c <HAL_PWREx_ControlVoltageScaling>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800198e:	f000 f97b 	bl	8001c88 <Error_Handler>
  }
}
 8001992:	bf00      	nop
 8001994:	3758      	adds	r7, #88	; 0x58
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <MX_CAN1_Init+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019a8:	2210      	movs	r2, #16
 80019aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019c2:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80019c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_CAN1_Init+0x64>)
 80019ee:	f000 fc15 	bl	800221c <HAL_CAN_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80019f8:	f000 f946 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000047c 	.word	0x2000047c
 8001a04:	40006400 	.word	0x40006400

08001a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a30:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a3e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a52:	f002 fb47 	bl	80040e4 <HAL_TIM_Base_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001a5c:	f000 f914 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a6e:	f002 fd3b 	bl	80044e8 <HAL_TIM_ConfigClockSource>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001a78:	f000 f906 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a8a:	f002 ff23 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001a94:	f000 f8f8 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200005ac 	.word	0x200005ac

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <MX_GPIO_Init+0x174>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f244 0120 	movw	r1, #16416	; 0x4020
 8001b38:	4838      	ldr	r0, [pc, #224]	; (8001c1c <MX_GPIO_Init+0x178>)
 8001b3a:	f001 fc69 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001b44:	4836      	ldr	r0, [pc, #216]	; (8001c20 <MX_GPIO_Init+0x17c>)
 8001b46:	f001 fc63 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f001 fc5c 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4831      	ldr	r0, [pc, #196]	; (8001c24 <MX_GPIO_Init+0x180>)
 8001b5e:	f001 fc57 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b62:	2302      	movs	r3, #2
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b78:	f001 fab8 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5;
 8001b7c:	f244 0320 	movw	r3, #16416	; 0x4020
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4821      	ldr	r0, [pc, #132]	; (8001c1c <MX_GPIO_Init+0x178>)
 8001b96:	f001 faa9 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481b      	ldr	r0, [pc, #108]	; (8001c20 <MX_GPIO_Init+0x17c>)
 8001bb4:	f001 fa9a 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8001bb8:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd4:	f001 fa8a 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_IN_Pin */
  GPIO_InitStruct.Pin = KEY_IN_Pin;
 8001bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_IN_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_GPIO_Init+0x17c>)
 8001bee:	f001 fa7d 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4806      	ldr	r0, [pc, #24]	; (8001c24 <MX_GPIO_Init+0x180>)
 8001c0a:	f001 fa6f 	bl	80030ec <HAL_GPIO_Init>

}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000400 	.word	0x48000400
 8001c20:	48000800 	.word	0x48000800
 8001c24:	48000c00 	.word	0x48000c00

08001c28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	if(vehicle_state==1)
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d116      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x3e>
		//	if(!vehicle_state)
		//		vehicle_state=1;
		//	else
		//		vehicle_state=0;

		if(count==count1)
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d104      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			Message.Mxe.Data[0]=_info1;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c4a:	715a      	strb	r2, [r3, #5]
 8001c4c:	e002      	b.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x2c>


		}
		else
		{
			Message.Mxe.Data[0]=0x02;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c50:	2202      	movs	r2, #2
 8001c52:	715a      	strb	r2, [r3, #5]

		}
		sendMsg_KEYINFO(&Message);
 8001c54:	480a      	ldr	r0, [pc, #40]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c56:	f7ff fd1e 	bl	8001696 <sendMsg_KEYINFO>
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	715a      	strb	r2, [r3, #5]
		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		//__NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
		//NVIC_ClearPendingIRQ (EXTI15_10_IRQn);
		//__HAL_TIM_DISABLE(&htim2);
		HAL_TIM_Base_Stop_IT(&htim2);
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c62:	f002 faf3 	bl	800424c <HAL_TIM_Base_Stop_IT>
	}

}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000002e 	.word	0x2000002e
 8001c74:	2000002c 	.word	0x2000002c
 8001c78:	2000002d 	.word	0x2000002d
 8001c7c:	200005f8 	.word	0x200005f8
 8001c80:	20000584 	.word	0x20000584
 8001c84:	200005ac 	.word	0x200005ac

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x44>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000

08001cdc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <HAL_CAN_MspInit+0xbc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d148      	bne.n	8001d90 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_CAN_MspInit+0xc0>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <HAL_CAN_MspInit+0xc0>)
 8001d04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_CAN_MspInit+0xc0>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_CAN_MspInit+0xc0>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_CAN_MspInit+0xc0>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_CAN_MspInit+0xc0>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8001d40:	230a      	movs	r3, #10
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4815      	ldr	r0, [pc, #84]	; (8001da0 <HAL_CAN_MspInit+0xc4>)
 8001d4c:	f001 f9ce 	bl	80030ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	2013      	movs	r0, #19
 8001d56:	f001 f992 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001d5a:	2013      	movs	r0, #19
 8001d5c:	f001 f9ab 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2014      	movs	r0, #20
 8001d66:	f001 f98a 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d6a:	2014      	movs	r0, #20
 8001d6c:	f001 f9a3 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2015      	movs	r0, #21
 8001d76:	f001 f982 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d7a:	2015      	movs	r0, #21
 8001d7c:	f001 f99b 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2016      	movs	r0, #22
 8001d86:	f001 f97a 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001d8a:	2016      	movs	r0, #22
 8001d8c:	f001 f993 	bl	80030b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40006400 	.word	0x40006400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48000400 	.word	0x48000400

08001da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d113      	bne.n	8001dde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_TIM_Base_MspInit+0x44>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <HAL_TIM_Base_MspInit+0x44>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_TIM_Base_MspInit+0x44>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	201c      	movs	r0, #28
 8001dd4:	f001 f953 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd8:	201c      	movs	r0, #28
 8001dda:	f001 f96c 	bl	80030b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <NMI_Handler+0x4>

08001df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <MemManage_Handler+0x4>

08001dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e38:	f000 f9ac 	bl	8002194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <CAN1_TX_IRQHandler+0x10>)
 8001e46:	f000 fe2a 	bl	8002a9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000047c 	.word	0x2000047c

08001e54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <CAN1_RX0_IRQHandler+0x10>)
 8001e5a:	f000 fe20 	bl	8002a9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000047c 	.word	0x2000047c

08001e68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <CAN1_RX1_IRQHandler+0x10>)
 8001e6e:	f000 fe16 	bl	8002a9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000047c 	.word	0x2000047c

08001e7c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <CAN1_SCE_IRQHandler+0x10>)
 8001e82:	f000 fe0c 	bl	8002a9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000047c 	.word	0x2000047c

08001e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM2_IRQHandler+0x10>)
 8001e96:	f002 fa08 	bl	80042aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200005ac 	.word	0x200005ac

08001ea4 <switches_call>:
//#include "J1939_Config.H"



void switches_call(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

	/* BEGIN KEY INFO*/

	if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))==0)// changing c11 to pa1 change later
 8001eaa:	2102      	movs	r1, #2
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f001 fa96 	bl	80033e0 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 809c 	bne.w	8001ff4 <switches_call+0x150>

	{
		HAL_TIM_Base_Start_IT(&htim2);
 8001ebc:	484f      	ldr	r0, [pc, #316]	; (8001ffc <switches_call+0x158>)
 8001ebe:	f002 f969 	bl	8004194 <HAL_TIM_Base_Start_IT>
		vehicle_state=1;
 8001ec2:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <switches_call+0x15c>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
		count1++;//odd num on even off the key
 8001ec8:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <switches_call+0x160>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <switches_call+0x160>)
 8001ed2:	701a      	strb	r2, [r3, #0]

		if(count1%2==1)
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <switches_call+0x160>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01d      	beq.n	8001f1e <switches_call+0x7a>
		{
			count=count1;
 8001ee2:	4b48      	ldr	r3, [pc, #288]	; (8002004 <switches_call+0x160>)
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	4b48      	ldr	r3, [pc, #288]	; (8002008 <switches_call+0x164>)
 8001ee8:	701a      	strb	r2, [r3, #0]

			Key_Infovar.Key_In=1;
 8001eea:	4a48      	ldr	r2, [pc, #288]	; (800200c <switches_call+0x168>)
 8001eec:	7813      	ldrb	r3, [r2, #0]
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	7013      	strb	r3, [r2, #0]
			Key_Infovar.Key_Off=0;
 8001ef4:	4a45      	ldr	r2, [pc, #276]	; (800200c <switches_call+0x168>)
 8001ef6:	7813      	ldrb	r3, [r2, #0]
 8001ef8:	f36f 0300 	bfc	r3, #0, #1
 8001efc:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Key_Infovar);
 8001efe:	4b43      	ldr	r3, [pc, #268]	; (800200c <switches_call+0x168>)
 8001f00:	603b      	str	r3, [r7, #0]
			_info1=*info;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <switches_call+0x16c>)
 8001f08:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info1;
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <switches_call+0x16c>)
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <switches_call+0x170>)
 8001f10:	715a      	strb	r2, [r3, #5]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,1);
 8001f12:	2201      	movs	r2, #1
 8001f14:	2120      	movs	r1, #32
 8001f16:	4840      	ldr	r0, [pc, #256]	; (8002018 <switches_call+0x174>)
 8001f18:	f001 fa7a 	bl	8003410 <HAL_GPIO_WritePin>
 8001f1c:	e063      	b.n	8001fe6 <switches_call+0x142>

		}
		else//((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))==1)

		{
			Key_Infovar.Key_In=0;
 8001f1e:	4a3b      	ldr	r2, [pc, #236]	; (800200c <switches_call+0x168>)
 8001f20:	7813      	ldrb	r3, [r2, #0]
 8001f22:	f36f 0341 	bfc	r3, #1, #1
 8001f26:	7013      	strb	r3, [r2, #0]
			Key_Infovar.Key_Off=1;
 8001f28:	4a38      	ldr	r2, [pc, #224]	; (800200c <switches_call+0x168>)
 8001f2a:	7813      	ldrb	r3, [r2, #0]
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	7013      	strb	r3, [r2, #0]

			j1939_uint8_t *info=(j1939_uint8_t*)(&Key_Infovar);
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <switches_call+0x168>)
 8001f34:	607b      	str	r3, [r7, #4]
			_info1 = *info;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <switches_call+0x16c>)
 8001f3c:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info1;
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <switches_call+0x16c>)
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <switches_call+0x170>)
 8001f44:	715a      	strb	r2, [r3, #5]
 8001f46:	4b33      	ldr	r3, [pc, #204]	; (8002014 <switches_call+0x170>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x01;
			//sendMsg_KEYINFO(&Message);
			memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

			/* BMS STATUS IS OFF */
			BMS_Statusvar.BMS_Status=0;
 8001f4c:	4a33      	ldr	r2, [pc, #204]	; (800201c <switches_call+0x178>)
 8001f4e:	7813      	ldrb	r3, [r2, #0]
 8001f50:	f36f 0300 	bfc	r3, #0, #1
 8001f54:	7013      	strb	r3, [r2, #0]
			 *info=(j1939_uint8_t*)(&BMS_Statusvar);
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <switches_call+0x178>)
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	701a      	strb	r2, [r3, #0]
			_info5 = *info;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <switches_call+0x17c>)
 8001f64:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=0;
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <switches_call+0x170>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	715a      	strb	r2, [r3, #5]
			Message.Mxe.Data[1]=_info5;
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <switches_call+0x17c>)
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <switches_call+0x170>)
 8001f72:	719a      	strb	r2, [r3, #6]
			sendMsg_BMSSTATUS(&Message);
 8001f74:	4827      	ldr	r0, [pc, #156]	; (8002014 <switches_call+0x170>)
 8001f76:	f7ff fbbc 	bl	80016f2 <sendMsg_BMSSTATUS>
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <switches_call+0x170>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	715a      	strb	r2, [r3, #5]
			memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

			/* VCU STATE IS OFF */
			VCU_Statusvar.VCU_State=0;
 8001f80:	4a28      	ldr	r2, [pc, #160]	; (8002024 <switches_call+0x180>)
 8001f82:	7813      	ldrb	r3, [r2, #0]
 8001f84:	f36f 0300 	bfc	r3, #0, #1
 8001f88:	7013      	strb	r3, [r2, #0]
			*info=(j1939_uint8_t*)(&VCU_Statusvar);
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <switches_call+0x180>)
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	701a      	strb	r2, [r3, #0]
			_info6 = *info;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <switches_call+0x184>)
 8001f98:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info6;
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <switches_call+0x184>)
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <switches_call+0x170>)
 8001fa0:	715a      	strb	r2, [r3, #5]
			sendMsg_VCUSTATUS(&Message);
 8001fa2:	481c      	ldr	r0, [pc, #112]	; (8002014 <switches_call+0x170>)
 8001fa4:	f7ff fc01 	bl	80017aa <sendMsg_VCUSTATUS>
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <switches_call+0x170>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	715a      	strb	r2, [r3, #5]
			memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

			/* MC STATE IS OFF */

			Motorcontroller_Statusvar.motorcontroller_state=0;
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <switches_call+0x188>)
 8001fb0:	7893      	ldrb	r3, [r2, #2]
 8001fb2:	f36f 0300 	bfc	r3, #0, #1
 8001fb6:	7093      	strb	r3, [r2, #2]
			*info=(j1939_uint8_t*)(&Motorcontroller_Statusvar);
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <switches_call+0x188>)
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	701a      	strb	r2, [r3, #0]
			_info7 = *info;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <switches_call+0x18c>)
 8001fc6:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info7;
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <switches_call+0x18c>)
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <switches_call+0x170>)
 8001fce:	715a      	strb	r2, [r3, #5]
			sendMsg_MOTORCONTROLLERSTATUS(&Message);
 8001fd0:	4810      	ldr	r0, [pc, #64]	; (8002014 <switches_call+0x170>)
 8001fd2:	f7ff fbbc 	bl	800174e <sendMsg_MOTORCONTROLLERSTATUS>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <switches_call+0x170>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	715a      	strb	r2, [r3, #5]
			memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2120      	movs	r1, #32
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <switches_call+0x174>)
 8001fe2:	f001 fa15 	bl	8003410 <HAL_GPIO_WritePin>


		}
		if(count1>=254)
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <switches_call+0x160>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2bfd      	cmp	r3, #253	; 0xfd
 8001fec:	d902      	bls.n	8001ff4 <switches_call+0x150>
			count1=0;
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <switches_call+0x160>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]

	}
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200005ac 	.word	0x200005ac
 8002000:	2000002e 	.word	0x2000002e
 8002004:	2000002d 	.word	0x2000002d
 8002008:	2000002c 	.word	0x2000002c
 800200c:	20000030 	.word	0x20000030
 8002010:	200005f8 	.word	0x200005f8
 8002014:	20000584 	.word	0x20000584
 8002018:	48000400 	.word	0x48000400
 800201c:	20000164 	.word	0x20000164
 8002020:	200005a4 	.word	0x200005a4
 8002024:	20000340 	.word	0x20000340
 8002028:	20000540 	.word	0x20000540
 800202c:	20000344 	.word	0x20000344
 8002030:	20000598 	.word	0x20000598

08002034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <SystemInit+0x5c>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	4a14      	ldr	r2, [pc, #80]	; (8002090 <SystemInit+0x5c>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <SystemInit+0x60>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a11      	ldr	r2, [pc, #68]	; (8002094 <SystemInit+0x60>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <SystemInit+0x60>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <SystemInit+0x60>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <SystemInit+0x60>)
 8002060:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002064:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002068:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <SystemInit+0x60>)
 800206c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002070:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <SystemInit+0x60>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a07      	ldr	r2, [pc, #28]	; (8002094 <SystemInit+0x60>)
 8002078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SystemInit+0x60>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	40021000 	.word	0x40021000

08002098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800209c:	f7ff ffca 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020a2:	e003      	b.n	80020ac <LoopCopyDataInit>

080020a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020aa:	3104      	adds	r1, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020ac:	480a      	ldr	r0, [pc, #40]	; (80020d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80020b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020b4:	d3f6      	bcc.n	80020a4 <CopyDataInit>
	ldr	r2, =_sbss
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020b8:	e002      	b.n	80020c0 <LoopFillZerobss>

080020ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020bc:	f842 3b04 	str.w	r3, [r2], #4

080020c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <LoopForever+0x16>)
	cmp	r2, r3
 80020c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020c4:	d3f9      	bcc.n	80020ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020c6:	f002 fc91 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ca:	f7ff fb9d 	bl	8001808 <main>

080020ce <LoopForever>:

LoopForever:
    b LoopForever
 80020ce:	e7fe      	b.n	80020ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020d0:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 80020d4:	08004aa4 	.word	0x08004aa4
	ldr	r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020dc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80020e0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80020e4:	20000600 	.word	0x20000600

080020e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC1_IRQHandler>

080020ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 ffb7 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f80e 	bl	800211c <HAL_InitTick>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	e001      	b.n	8002110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800210c:	f7ff fdc2 	bl	8001c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002110:	79fb      	ldrb	r3, [r7, #7]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_InitTick+0x6c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_InitTick+0x70>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_InitTick+0x6c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 ffc3 	bl	80030d2 <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b0f      	cmp	r3, #15
 8002156:	d809      	bhi.n	800216c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002158:	2200      	movs	r2, #0
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f000 ff8d 	bl	800307e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_InitTick+0x74>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e007      	b.n	800217c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e004      	b.n	800217c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	e001      	b.n	800217c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000008 	.word	0x20000008
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x20>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_IncTick+0x24>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <HAL_IncTick+0x24>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000008 	.word	0x20000008
 80021b8:	200005fc 	.word	0x200005fc

080021bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_GetTick+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	200005fc 	.word	0x200005fc

080021d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff ffee 	bl	80021bc <HAL_GetTick>
 80021e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d005      	beq.n	80021fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_Delay+0x44>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021fa:	bf00      	nop
 80021fc:	f7ff ffde 	bl	80021bc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d8f7      	bhi.n	80021fc <HAL_Delay+0x28>
  {
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008

0800221c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e11c      	b.n	8002468 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d131      	bne.n	800229e <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a8c      	ldr	r2, [pc, #560]	; (8002470 <HAL_CAN_Init+0x254>)
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a8c      	ldr	r2, [pc, #560]	; (8002474 <HAL_CAN_Init+0x258>)
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a8b      	ldr	r2, [pc, #556]	; (8002478 <HAL_CAN_Init+0x25c>)
 800224a:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a8b      	ldr	r2, [pc, #556]	; (800247c <HAL_CAN_Init+0x260>)
 8002250:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a8a      	ldr	r2, [pc, #552]	; (8002480 <HAL_CAN_Init+0x264>)
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a8a      	ldr	r2, [pc, #552]	; (8002484 <HAL_CAN_Init+0x268>)
 800225c:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a89      	ldr	r2, [pc, #548]	; (8002488 <HAL_CAN_Init+0x26c>)
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a89      	ldr	r2, [pc, #548]	; (800248c <HAL_CAN_Init+0x270>)
 8002268:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a88      	ldr	r2, [pc, #544]	; (8002490 <HAL_CAN_Init+0x274>)
 800226e:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a88      	ldr	r2, [pc, #544]	; (8002494 <HAL_CAN_Init+0x278>)
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a87      	ldr	r2, [pc, #540]	; (8002498 <HAL_CAN_Init+0x27c>)
 800227a:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a87      	ldr	r2, [pc, #540]	; (800249c <HAL_CAN_Init+0x280>)
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a86      	ldr	r2, [pc, #536]	; (80024a0 <HAL_CAN_Init+0x284>)
 8002286:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a84      	ldr	r2, [pc, #528]	; (80024a4 <HAL_CAN_Init+0x288>)
 8002294:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0202 	bic.w	r2, r2, #2
 80022ac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ae:	f7ff ff85 	bl	80021bc <HAL_GetTick>
 80022b2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022b4:	e012      	b.n	80022dc <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022b6:	f7ff ff81 	bl	80021bc <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b0a      	cmp	r3, #10
 80022c2:	d90b      	bls.n	80022dc <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2205      	movs	r2, #5
 80022d4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0c5      	b.n	8002468 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e5      	bne.n	80022b6 <HAL_CAN_Init+0x9a>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022fa:	f7ff ff5f 	bl	80021bc <HAL_GetTick>
 80022fe:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002300:	e012      	b.n	8002328 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002302:	f7ff ff5b 	bl	80021bc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b0a      	cmp	r3, #10
 800230e:	d90b      	bls.n	8002328 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2205      	movs	r2, #5
 8002320:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e09f      	b.n	8002468 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0e5      	beq.n	8002302 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7e1b      	ldrb	r3, [r3, #24]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d108      	bne.n	8002350 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	e007      	b.n	8002360 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800235e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e5b      	ldrb	r3, [r3, #25]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e007      	b.n	800238a <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7e9b      	ldrb	r3, [r3, #26]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d108      	bne.n	80023a4 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0220 	orr.w	r2, r2, #32
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e007      	b.n	80023b4 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0220 	bic.w	r2, r2, #32
 80023b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7edb      	ldrb	r3, [r3, #27]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d108      	bne.n	80023ce <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0210 	bic.w	r2, r2, #16
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e007      	b.n	80023de <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0210 	orr.w	r2, r2, #16
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7f1b      	ldrb	r3, [r3, #28]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d108      	bne.n	80023f8 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0208 	orr.w	r2, r2, #8
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e007      	b.n	8002408 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0208 	bic.w	r2, r2, #8
 8002406:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7f5b      	ldrb	r3, [r3, #29]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d108      	bne.n	8002422 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0204 	orr.w	r2, r2, #4
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e007      	b.n	8002432 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0204 	bic.w	r2, r2, #4
 8002430:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	ea42 0103 	orr.w	r1, r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	08001641 	.word	0x08001641
 8002474:	08002e65 	.word	0x08002e65
 8002478:	08002e79 	.word	0x08002e79
 800247c:	08002e8d 	.word	0x08002e8d
 8002480:	080015e5 	.word	0x080015e5
 8002484:	08001603 	.word	0x08001603
 8002488:	08001621 	.word	0x08001621
 800248c:	08002e29 	.word	0x08002e29
 8002490:	08002e3d 	.word	0x08002e3d
 8002494:	08002e51 	.word	0x08002e51
 8002498:	08002ea1 	.word	0x08002ea1
 800249c:	08002eb5 	.word	0x08002eb5
 80024a0:	08001679 	.word	0x08001679
 80024a4:	08001cdd 	.word	0x08001cdd

080024a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d003      	beq.n	80024ce <HAL_CAN_ConfigFilter+0x26>
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	f040 80aa 	bne.w	8002622 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	2201      	movs	r2, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	401a      	ands	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d123      	bne.n	8002550 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800252a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3248      	adds	r2, #72	; 0x48
 8002530:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002544:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002546:	6979      	ldr	r1, [r7, #20]
 8002548:	3348      	adds	r3, #72	; 0x48
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d122      	bne.n	800259e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	431a      	orrs	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002578:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3248      	adds	r2, #72	; 0x48
 800257e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002592:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	3348      	adds	r3, #72	; 0x48
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	401a      	ands	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025b8:	e007      	b.n	80025ca <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	401a      	ands	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025e4:	e007      	b.n	80025f6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	431a      	orrs	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002614:	f023 0201 	bic.w	r2, r3, #1
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e006      	b.n	8002630 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d12e      	bne.n	80026ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002668:	f7ff fda8 	bl	80021bc <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800266e:	e012      	b.n	8002696 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002670:	f7ff fda4 	bl	80021bc <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b0a      	cmp	r3, #10
 800267c:	d90b      	bls.n	8002696 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e012      	b.n	80026bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e5      	bne.n	8002670 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e006      	b.n	80026bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026e2:	7ffb      	ldrb	r3, [r7, #31]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d003      	beq.n	80026f0 <HAL_CAN_AddTxMessage+0x2c>
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	f040 80b8 	bne.w	8002860 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80a0 	beq.w	8002850 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	0e1b      	lsrs	r3, r3, #24
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d907      	bls.n	8002730 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e09e      	b.n	800286e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002730:	2201      	movs	r2, #1
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	409a      	lsls	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	6809      	ldr	r1, [r1, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3318      	adds	r3, #24
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	440b      	add	r3, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e00f      	b.n	800277e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002768:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800276e:	68f9      	ldr	r1, [r7, #12]
 8002770:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002772:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3318      	adds	r3, #24
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	440b      	add	r3, r1
 800277c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3318      	adds	r3, #24
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	440b      	add	r3, r1
 800278e:	3304      	adds	r3, #4
 8002790:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	7d1b      	ldrb	r3, [r3, #20]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d111      	bne.n	80027be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3318      	adds	r3, #24
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	6811      	ldr	r1, [r2, #0]
 80027ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3318      	adds	r3, #24
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	440b      	add	r3, r1
 80027ba:	3304      	adds	r3, #4
 80027bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3307      	adds	r3, #7
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	061a      	lsls	r2, r3, #24
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3306      	adds	r3, #6
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3305      	adds	r3, #5
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	4313      	orrs	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	3204      	adds	r2, #4
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	4610      	mov	r0, r2
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	6811      	ldr	r1, [r2, #0]
 80027e6:	ea43 0200 	orr.w	r2, r3, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3303      	adds	r3, #3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	061a      	lsls	r2, r3, #24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3302      	adds	r3, #2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3301      	adds	r3, #1
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	4313      	orrs	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	4610      	mov	r0, r2
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	6811      	ldr	r1, [r2, #0]
 800281c:	ea43 0200 	orr.w	r2, r3, r0
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	440b      	add	r3, r1
 8002826:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800282a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3318      	adds	r3, #24
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4413      	add	r3, r2
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	6811      	ldr	r1, [r2, #0]
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3318      	adds	r3, #24
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	440b      	add	r3, r1
 800284a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e00e      	b.n	800286e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e006      	b.n	800286e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d003      	beq.n	800289e <HAL_CAN_GetRxMessage+0x24>
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b02      	cmp	r3, #2
 800289a:	f040 80f3 	bne.w	8002a84 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10e      	bne.n	80028c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d116      	bne.n	80028e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e7      	b.n	8002a92 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d8      	b.n	8002a92 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	331b      	adds	r3, #27
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	4413      	add	r3, r2
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0204 	and.w	r2, r3, #4
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	331b      	adds	r3, #27
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0d5b      	lsrs	r3, r3, #21
 800290e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e00b      	b.n	8002930 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	331b      	adds	r3, #27
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4413      	add	r3, r2
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	331b      	adds	r3, #27
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	4413      	add	r3, r2
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0202 	and.w	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	331b      	adds	r3, #27
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4413      	add	r3, r2
 8002952:	3304      	adds	r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 020f 	and.w	r2, r3, #15
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	331b      	adds	r3, #27
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	b2da      	uxtb	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	331b      	adds	r3, #27
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	b29a      	uxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0a1a      	lsrs	r2, r3, #8
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0c1a      	lsrs	r2, r3, #16
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	3302      	adds	r3, #2
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e1a      	lsrs	r2, r3, #24
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3303      	adds	r3, #3
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3304      	adds	r3, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0a1a      	lsrs	r2, r3, #8
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	3305      	adds	r3, #5
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0c1a      	lsrs	r2, r3, #16
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3306      	adds	r3, #6
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0e1a      	lsrs	r2, r3, #24
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	3307      	adds	r3, #7
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d108      	bne.n	8002a70 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0220 	orr.w	r2, r2, #32
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e007      	b.n	8002a80 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0220 	orr.w	r2, r2, #32
 8002a7e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e006      	b.n	8002a92 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b08a      	sub	sp, #40	; 0x28
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8083 	beq.w	8002bec <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d025      	beq.n	8002b3c <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
 8002b0a:	e017      	b.n	8002b3c <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e00d      	b.n	8002b3c <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e003      	b.n	8002b3c <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d026      	beq.n	8002b94 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
 8002b62:	e017      	b.n	8002b94 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	e00d      	b.n	8002b94 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8a:	e003      	b.n	8002b94 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d026      	beq.n	8002bec <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
 8002bba:	e017      	b.n	8002bec <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	e00d      	b.n	8002bec <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	e003      	b.n	8002bec <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00c      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2210      	movs	r2, #16
 8002c76:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00c      	beq.n	8002c9c <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2208      	movs	r2, #8
 8002c92:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d07b      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d072      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	f043 0302 	orr.w	r3, r3, #2
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d043      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d03e      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d86:	2b60      	cmp	r3, #96	; 0x60
 8002d88:	d02b      	beq.n	8002de2 <HAL_CAN_IRQHandler+0x344>
 8002d8a:	2b60      	cmp	r3, #96	; 0x60
 8002d8c:	d82e      	bhi.n	8002dec <HAL_CAN_IRQHandler+0x34e>
 8002d8e:	2b50      	cmp	r3, #80	; 0x50
 8002d90:	d022      	beq.n	8002dd8 <HAL_CAN_IRQHandler+0x33a>
 8002d92:	2b50      	cmp	r3, #80	; 0x50
 8002d94:	d82a      	bhi.n	8002dec <HAL_CAN_IRQHandler+0x34e>
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d019      	beq.n	8002dce <HAL_CAN_IRQHandler+0x330>
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d826      	bhi.n	8002dec <HAL_CAN_IRQHandler+0x34e>
 8002d9e:	2b30      	cmp	r3, #48	; 0x30
 8002da0:	d010      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x326>
 8002da2:	2b30      	cmp	r3, #48	; 0x30
 8002da4:	d822      	bhi.n	8002dec <HAL_CAN_IRQHandler+0x34e>
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d002      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x312>
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d005      	beq.n	8002dba <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002dae:	e01d      	b.n	8002dec <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db8:	e019      	b.n	8002dee <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dc2:	e014      	b.n	8002dee <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	f043 0320 	orr.w	r3, r3, #32
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dcc:	e00f      	b.n	8002dee <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dd6:	e00a      	b.n	8002dee <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002de0:	e005      	b.n	8002dee <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dea:	e000      	b.n	8002dee <HAL_CAN_IRQHandler+0x350>
            break;
 8002dec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dfc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2204      	movs	r2, #4
 8002e04:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e20:	bf00      	nop
 8002e22:	3728      	adds	r7, #40	; 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002efa:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	60d3      	str	r3, [r2, #12]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <__NVIC_GetPriorityGrouping+0x18>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	f003 0307 	and.w	r3, r3, #7
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db0b      	blt.n	8002f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4907      	ldr	r1, [pc, #28]	; (8002f64 <__NVIC_EnableIRQ+0x38>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e100 	.word	0xe000e100

08002f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db0a      	blt.n	8002f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <__NVIC_SetPriority+0x4c>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f90:	e00a      	b.n	8002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <__NVIC_SetPriority+0x50>)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	761a      	strb	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f1c3 0307 	rsb	r3, r3, #7
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	bf28      	it	cs
 8002fda:	2304      	movcs	r3, #4
 8002fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d902      	bls.n	8002fec <NVIC_EncodePriority+0x30>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3b03      	subs	r3, #3
 8002fea:	e000      	b.n	8002fee <NVIC_EncodePriority+0x32>
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	401a      	ands	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003004:	f04f 31ff 	mov.w	r1, #4294967295
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43d9      	mvns	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	4313      	orrs	r3, r2
         );
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003034:	d301      	bcc.n	800303a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <SysTick_Config+0x40>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003042:	210f      	movs	r1, #15
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f7ff ff8e 	bl	8002f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <SysTick_Config+0x40>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <SysTick_Config+0x40>)
 8003054:	2207      	movs	r2, #7
 8003056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	e000e010 	.word	0xe000e010

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff29 	bl	8002ec8 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003090:	f7ff ff3e 	bl	8002f10 <__NVIC_GetPriorityGrouping>
 8003094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f7ff ff8e 	bl	8002fbc <NVIC_EncodePriority>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff5d 	bl	8002f68 <__NVIC_SetPriority>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff31 	bl	8002f2c <__NVIC_EnableIRQ>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ffa2 	bl	8003024 <SysTick_Config>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e154      	b.n	80033a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8146 	beq.w	80033a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d00b      	beq.n	8003134 <HAL_GPIO_Init+0x48>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d007      	beq.n	8003134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003128:	2b11      	cmp	r3, #17
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b12      	cmp	r3, #18
 8003132:	d130      	bne.n	8003196 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800316a:	2201      	movs	r2, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0201 	and.w	r2, r3, #1
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	2203      	movs	r2, #3
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0xea>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b12      	cmp	r3, #18
 80031d4:	d123      	bne.n	800321e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	220f      	movs	r2, #15
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	6939      	ldr	r1, [r7, #16]
 800321a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a0 	beq.w	80033a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003260:	4b58      	ldr	r3, [pc, #352]	; (80033c4 <HAL_GPIO_Init+0x2d8>)
 8003262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003264:	4a57      	ldr	r2, [pc, #348]	; (80033c4 <HAL_GPIO_Init+0x2d8>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6613      	str	r3, [r2, #96]	; 0x60
 800326c:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <HAL_GPIO_Init+0x2d8>)
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003278:	4a53      	ldr	r2, [pc, #332]	; (80033c8 <HAL_GPIO_Init+0x2dc>)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	220f      	movs	r2, #15
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032a2:	d019      	beq.n	80032d8 <HAL_GPIO_Init+0x1ec>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a49      	ldr	r2, [pc, #292]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <HAL_GPIO_Init+0x1e8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a48      	ldr	r2, [pc, #288]	; (80033d0 <HAL_GPIO_Init+0x2e4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00d      	beq.n	80032d0 <HAL_GPIO_Init+0x1e4>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a47      	ldr	r2, [pc, #284]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <HAL_GPIO_Init+0x1e0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a46      	ldr	r2, [pc, #280]	; (80033d8 <HAL_GPIO_Init+0x2ec>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_GPIO_Init+0x1dc>
 80032c4:	2304      	movs	r3, #4
 80032c6:	e008      	b.n	80032da <HAL_GPIO_Init+0x1ee>
 80032c8:	2307      	movs	r3, #7
 80032ca:	e006      	b.n	80032da <HAL_GPIO_Init+0x1ee>
 80032cc:	2303      	movs	r3, #3
 80032ce:	e004      	b.n	80032da <HAL_GPIO_Init+0x1ee>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e002      	b.n	80032da <HAL_GPIO_Init+0x1ee>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_GPIO_Init+0x1ee>
 80032d8:	2300      	movs	r3, #0
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	f002 0203 	and.w	r2, r2, #3
 80032e0:	0092      	lsls	r2, r2, #2
 80032e2:	4093      	lsls	r3, r2
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ea:	4937      	ldr	r1, [pc, #220]	; (80033c8 <HAL_GPIO_Init+0x2dc>)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032f8:	4b38      	ldr	r3, [pc, #224]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800331c:	4a2f      	ldr	r2, [pc, #188]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003322:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003346:	4a25      	ldr	r2, [pc, #148]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800334c:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003370:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f aea3 	bne.w	80030fc <HAL_GPIO_Init+0x10>
  }
}
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40010000 	.word	0x40010000
 80033cc:	48000400 	.word	0x48000400
 80033d0:	48000800 	.word	0x48000800
 80033d4:	48000c00 	.word	0x48000c00
 80033d8:	48001000 	.word	0x48001000
 80033dc:	40010400 	.word	0x40010400

080033e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	e001      	b.n	8003402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
 800341c:	4613      	mov	r3, r2
 800341e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003420:	787b      	ldrb	r3, [r7, #1]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800342c:	e002      	b.n	8003434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_PWREx_GetVoltageRange+0x18>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40007000 	.word	0x40007000

0800345c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346a:	d130      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d038      	beq.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003482:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003488:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2232      	movs	r2, #50	; 0x32
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	3301      	adds	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a0:	e002      	b.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b4:	d102      	bne.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f2      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c8:	d110      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e00f      	b.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d007      	beq.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034e4:	4a05      	ldr	r2, [pc, #20]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000
 8003500:	20000000 	.word	0x20000000
 8003504:	431bde83 	.word	0x431bde83

08003508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f000 bc11 	b.w	8003d3e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351c:	4ba0      	ldr	r3, [pc, #640]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003526:	4b9e      	ldr	r3, [pc, #632]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80e4 	beq.w	8003706 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_RCC_OscConfig+0x4c>
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	f040 808b 	bne.w	8003662 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b01      	cmp	r3, #1
 8003550:	f040 8087 	bne.w	8003662 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003554:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_OscConfig+0x64>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e3e8      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_RCC_OscConfig+0x7e>
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003584:	e005      	b.n	8003592 <HAL_RCC_OscConfig+0x8a>
 8003586:	4b86      	ldr	r3, [pc, #536]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003592:	4293      	cmp	r3, r2
 8003594:	d223      	bcs.n	80035de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fd42 	bl	8004024 <RCC_SetFlashLatencyFromMSIRange>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e3c9      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035aa:	4b7d      	ldr	r3, [pc, #500]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7c      	ldr	r2, [pc, #496]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b7a      	ldr	r3, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4977      	ldr	r1, [pc, #476]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	4972      	ldr	r1, [pc, #456]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	e025      	b.n	800362a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035de:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6f      	ldr	r2, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035e4:	f043 0308 	orr.w	r3, r3, #8
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	496a      	ldr	r1, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fc:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	4965      	ldr	r1, [pc, #404]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fd02 	bl	8004024 <RCC_SetFlashLatencyFromMSIRange>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e389      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800362a:	f000 fc6f 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	495a      	ldr	r1, [pc, #360]	; (80037a4 <HAL_RCC_OscConfig+0x29c>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_OscConfig+0x2a0>)
 8003648:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800364a:	4b58      	ldr	r3, [pc, #352]	; (80037ac <HAL_RCC_OscConfig+0x2a4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fd64 	bl	800211c <HAL_InitTick>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d052      	beq.n	8003704 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	e36d      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d032      	beq.n	80036d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800366a:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a4c      	ldr	r2, [pc, #304]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003676:	f7fe fda1 	bl	80021bc <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367e:	f7fe fd9d 	bl	80021bc <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e356      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003690:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800369c:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a3f      	ldr	r2, [pc, #252]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80036a2:	f043 0308 	orr.w	r3, r3, #8
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	493a      	ldr	r1, [pc, #232]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ba:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	4935      	ldr	r1, [pc, #212]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]
 80036ce:	e01a      	b.n	8003706 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036d0:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a32      	ldr	r2, [pc, #200]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036dc:	f7fe fd6e 	bl	80021bc <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e4:	f7fe fd6a 	bl	80021bc <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e323      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x1dc>
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003704:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d073      	beq.n	80037fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d005      	beq.n	8003724 <HAL_RCC_OscConfig+0x21c>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d10e      	bne.n	800373c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d10b      	bne.n	800373c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d063      	beq.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d15f      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e300      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d106      	bne.n	8003754 <HAL_RCC_OscConfig+0x24c>
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e01d      	b.n	8003790 <HAL_RCC_OscConfig+0x288>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x270>
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0x288>
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <HAL_RCC_OscConfig+0x298>)
 800378a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fd10 	bl	80021bc <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800379e:	e010      	b.n	80037c2 <HAL_RCC_OscConfig+0x2ba>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08004a5c 	.word	0x08004a5c
 80037a8:	20000000 	.word	0x20000000
 80037ac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fd04 	bl	80021bc <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e2bd      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c2:	4baf      	ldr	r3, [pc, #700]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x2a8>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe fcf4 	bl	80021bc <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe fcf0 	bl	80021bc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e2a9      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ea:	4ba5      	ldr	r3, [pc, #660]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2d0>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d060      	beq.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x310>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d119      	bne.n	8003846 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d116      	bne.n	8003846 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003818:	4b99      	ldr	r3, [pc, #612]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_OscConfig+0x328>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e286      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	4990      	ldr	r1, [pc, #576]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	e040      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d023      	beq.n	8003896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384e:	4b8c      	ldr	r3, [pc, #560]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a8b      	ldr	r2, [pc, #556]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe fcaf 	bl	80021bc <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe fcab 	bl	80021bc <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e264      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003874:	4b82      	ldr	r3, [pc, #520]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b7f      	ldr	r3, [pc, #508]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	497c      	ldr	r1, [pc, #496]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	e018      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b7a      	ldr	r3, [pc, #488]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a79      	ldr	r2, [pc, #484]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 800389c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe fc8b 	bl	80021bc <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fe fc87 	bl	80021bc <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e240      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038bc:	4b70      	ldr	r3, [pc, #448]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d03c      	beq.n	800394e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e2:	4a67      	ldr	r2, [pc, #412]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe fc66 	bl	80021bc <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fc62 	bl	80021bc <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e21b      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003906:	4b5e      	ldr	r3, [pc, #376]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x3ec>
 8003914:	e01b      	b.n	800394e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe fc49 	bl	80021bc <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392e:	f7fe fc45 	bl	80021bc <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1fe      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003940:	4b4f      	ldr	r3, [pc, #316]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ef      	bne.n	800392e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a6 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395c:	2300      	movs	r3, #0
 800395e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003960:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	4a43      	ldr	r2, [pc, #268]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	; 0x58
 8003978:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003984:	2301      	movs	r3, #1
 8003986:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003988:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <HAL_RCC_OscConfig+0x57c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d118      	bne.n	80039c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003994:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_RCC_OscConfig+0x57c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <HAL_RCC_OscConfig+0x57c>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a0:	f7fe fc0c 	bl	80021bc <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe fc08 	bl	80021bc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1c1      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ba:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_RCC_OscConfig+0x57c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d108      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4d8>
 80039ce:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039de:	e024      	b.n	8003a2a <HAL_RCC_OscConfig+0x522>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d110      	bne.n	8003a0a <HAL_RCC_OscConfig+0x502>
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039f8:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a08:	e00f      	b.n	8003a2a <HAL_RCC_OscConfig+0x522>
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a1a:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe fbc3 	bl	80021bc <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fe fbbf 	bl	80021bc <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e176      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_OscConfig+0x578>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ed      	beq.n	8003a3a <HAL_RCC_OscConfig+0x532>
 8003a5e:	e01a      	b.n	8003a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fe fbac 	bl	80021bc <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a66:	e00f      	b.n	8003a88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7fe fba8 	bl	80021bc <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d906      	bls.n	8003a88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e15f      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a88:	4baa      	ldr	r3, [pc, #680]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e8      	bne.n	8003a68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a96:	7ffb      	ldrb	r3, [r7, #31]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	4aa4      	ldr	r2, [pc, #656]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01c      	beq.n	8003af6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003abc:	4b9d      	ldr	r3, [pc, #628]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ac2:	4a9c      	ldr	r2, [pc, #624]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fe fb76 	bl	80021bc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad4:	f7fe fb72 	bl	80021bc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e12b      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ae6:	4b93      	ldr	r3, [pc, #588]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x5cc>
 8003af4:	e01b      	b.n	8003b2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003af6:	4b8f      	ldr	r3, [pc, #572]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003afc:	4a8d      	ldr	r2, [pc, #564]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fe fb59 	bl	80021bc <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b0e:	f7fe fb55 	bl	80021bc <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e10e      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b20:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ef      	bne.n	8003b0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8102 	beq.w	8003d3c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	f040 80c5 	bne.w	8003ccc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b42:	4b7c      	ldr	r3, [pc, #496]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0203 	and.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d12c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	3b01      	subs	r3, #1
 8003b62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d123      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d11b      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d113      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	3b01      	subs	r3, #1
 8003b96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d109      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d067      	beq.n	8003c80 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d062      	beq.n	8003c7c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0bb      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bc6:	4b5b      	ldr	r3, [pc, #364]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5a      	ldr	r2, [pc, #360]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003bcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bd2:	f7fe faf3 	bl	80021bc <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe faef 	bl	80021bc <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e0a8      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bec:	4b51      	ldr	r3, [pc, #324]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf8:	4b4e      	ldr	r3, [pc, #312]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	4b4e      	ldr	r3, [pc, #312]	; (8003d38 <HAL_RCC_OscConfig+0x830>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	0112      	lsls	r2, r2, #4
 8003c0c:	4311      	orrs	r1, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c12:	0212      	lsls	r2, r2, #8
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c1a:	0852      	lsrs	r2, r2, #1
 8003c1c:	3a01      	subs	r2, #1
 8003c1e:	0552      	lsls	r2, r2, #21
 8003c20:	4311      	orrs	r1, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c26:	0852      	lsrs	r2, r2, #1
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	0652      	lsls	r2, r2, #25
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c32:	06d2      	lsls	r2, r2, #27
 8003c34:	430a      	orrs	r2, r1
 8003c36:	493f      	ldr	r1, [pc, #252]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a3c      	ldr	r2, [pc, #240]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c48:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a39      	ldr	r2, [pc, #228]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c54:	f7fe fab2 	bl	80021bc <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fe faae 	bl	80021bc <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e067      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6e:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c7a:	e05f      	b.n	8003d3c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e05e      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d157      	bne.n	8003d3c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ca4:	f7fe fa8a 	bl	80021bc <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fa86 	bl	80021bc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e03f      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x7a4>
 8003cca:	e037      	b.n	8003d3c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d02d      	beq.n	8003d2e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cdc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cf0:	f023 0303 	bic.w	r3, r3, #3
 8003cf4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cfc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fe fa59 	bl	80021bc <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fe fa55 	bl	80021bc <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e00e      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x806>
 8003d2c:	e006      	b.n	8003d3c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e005      	b.n	8003d3e <HAL_RCC_OscConfig+0x836>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop

08003d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0c8      	b.n	8003eee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 0207 	bic.w	r2, r3, #7
 8003d72:	4961      	ldr	r1, [pc, #388]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0b0      	b.n	8003eee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d04c      	beq.n	8003e32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da0:	4b56      	ldr	r3, [pc, #344]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d121      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e09e      	b.n	8003eee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db8:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d115      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e092      	b.n	8003eee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dd0:	4b4a      	ldr	r3, [pc, #296]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e086      	b.n	8003eee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de0:	4b46      	ldr	r3, [pc, #280]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e07e      	b.n	8003eee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003df0:	4b42      	ldr	r3, [pc, #264]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 0203 	bic.w	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	493f      	ldr	r1, [pc, #252]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e02:	f7fe f9db 	bl	80021bc <HAL_GetTick>
 8003e06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0a:	f7fe f9d7 	bl	80021bc <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e066      	b.n	8003eee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 020c 	and.w	r2, r3, #12
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d1eb      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e3e:	4b2f      	ldr	r3, [pc, #188]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	492c      	ldr	r1, [pc, #176]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b29      	ldr	r3, [pc, #164]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d210      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 0207 	bic.w	r2, r3, #7
 8003e66:	4924      	ldr	r1, [pc, #144]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e036      	b.n	8003eee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4918      	ldr	r1, [pc, #96]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4910      	ldr	r1, [pc, #64]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ebe:	f000 f825 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <HAL_RCC_ClockConfig+0x1b4>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	490c      	ldr	r1, [pc, #48]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	5ccb      	ldrb	r3, [r1, r3]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe f91a 	bl	800211c <HAL_InitTick>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	72fb      	strb	r3, [r7, #11]

  return status;
 8003eec:	7afb      	ldrb	r3, [r7, #11]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	08004a5c 	.word	0x08004a5c
 8003f04:	20000000 	.word	0x20000000
 8003f08:	20000004 	.word	0x20000004

08003f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	; 0x24
 8003f10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f1a:	4b3e      	ldr	r3, [pc, #248]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f24:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x34>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d121      	bne.n	8003f7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d11e      	bne.n	8003f7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f40:	4b34      	ldr	r3, [pc, #208]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f4c:	4b31      	ldr	r3, [pc, #196]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e005      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f5c:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f68:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d102      	bne.n	8003f8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	e004      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f90:	4b23      	ldr	r3, [pc, #140]	; (8004020 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d134      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d003      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xac>
 8003fb0:	e005      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fb4:	617b      	str	r3, [r7, #20]
      break;
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fba:	617b      	str	r3, [r7, #20]
      break;
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	617b      	str	r3, [r7, #20]
      break;
 8003fc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	3301      	adds	r3, #1
 8003fd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	fb02 f203 	mul.w	r2, r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	0e5b      	lsrs	r3, r3, #25
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004004:	69bb      	ldr	r3, [r7, #24]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3724      	adds	r7, #36	; 0x24
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	08004a6c 	.word	0x08004a6c
 800401c:	00f42400 	.word	0x00f42400
 8004020:	007a1200 	.word	0x007a1200

08004024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004030:	4b2a      	ldr	r3, [pc, #168]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800403c:	f7ff fa00 	bl	8003440 <HAL_PWREx_GetVoltageRange>
 8004040:	6178      	str	r0, [r7, #20]
 8004042:	e014      	b.n	800406e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	4a24      	ldr	r2, [pc, #144]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	6593      	str	r3, [r2, #88]	; 0x58
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800405c:	f7ff f9f0 	bl	8003440 <HAL_PWREx_GetVoltageRange>
 8004060:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004062:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004074:	d10b      	bne.n	800408e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d919      	bls.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2ba0      	cmp	r3, #160	; 0xa0
 8004080:	d902      	bls.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004082:	2302      	movs	r3, #2
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e013      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004088:	2301      	movs	r3, #1
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	e010      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d902      	bls.n	800409a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004094:	2303      	movs	r3, #3
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e00a      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d102      	bne.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040a0:	2302      	movs	r3, #2
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	e004      	b.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b70      	cmp	r3, #112	; 0x70
 80040aa:	d101      	bne.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ac:	2301      	movs	r3, #1
 80040ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 0207 	bic.w	r2, r3, #7
 80040b8:	4909      	ldr	r1, [pc, #36]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d001      	beq.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40022000 	.word	0x40022000

080040e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e049      	b.n	800418a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fd fe4a 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f000 face 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e040      	b.n	800422e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <HAL_TIM_Base_Start_IT+0xa8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x58>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d009      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x58>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIM_Base_Start_IT+0xac>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x58>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_TIM_Base_Start_IT+0xb0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d115      	bne.n	8004218 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <HAL_TIM_Base_Start_IT+0xb4>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d015      	beq.n	800422a <HAL_TIM_Base_Start_IT+0x96>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d011      	beq.n	800422a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	e008      	b.n	800422a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e000      	b.n	800422c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40014000 	.word	0x40014000
 8004248:	00010007 	.word	0x00010007

0800424c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	f241 1311 	movw	r3, #4369	; 0x1111
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10f      	bne.n	8004294 <HAL_TIM_Base_Stop_IT+0x48>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	f240 4344 	movw	r3, #1092	; 0x444
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <HAL_TIM_Base_Stop_IT+0x48>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d122      	bne.n	8004306 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d11b      	bne.n	8004306 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f06f 0202 	mvn.w	r2, #2
 80042d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f9cb 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 80042f2:	e005      	b.n	8004300 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f9bd 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9ce 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d122      	bne.n	800435a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d11b      	bne.n	800435a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f06f 0204 	mvn.w	r2, #4
 800432a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f9a1 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 8004346:	e005      	b.n	8004354 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f993 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f9a4 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d122      	bne.n	80043ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d11b      	bne.n	80043ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f06f 0208 	mvn.w	r2, #8
 800437e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2204      	movs	r2, #4
 8004384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f977 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 800439a:	e005      	b.n	80043a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f969 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f97a 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d122      	bne.n	8004402 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d11b      	bne.n	8004402 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f06f 0210 	mvn.w	r2, #16
 80043d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2208      	movs	r2, #8
 80043d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f94d 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 80043ee:	e005      	b.n	80043fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f93f 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f950 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d10e      	bne.n	800442e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f06f 0201 	mvn.w	r2, #1
 8004426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fd fbfd 	bl	8001c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d10e      	bne.n	800445a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d107      	bne.n	800445a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fab5 	bl	80049c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 faa8 	bl	80049d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8fe 	bl	80046b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d10e      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d107      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0220 	mvn.w	r2, #32
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fa68 	bl	80049b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIM_ConfigClockSource+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0b5      	b.n	800466c <HAL_TIM_ConfigClockSource+0x184>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800452a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453c:	d03e      	beq.n	80045bc <HAL_TIM_ConfigClockSource+0xd4>
 800453e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004542:	f200 8087 	bhi.w	8004654 <HAL_TIM_ConfigClockSource+0x16c>
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454a:	f000 8085 	beq.w	8004658 <HAL_TIM_ConfigClockSource+0x170>
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	d87f      	bhi.n	8004654 <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b70      	cmp	r3, #112	; 0x70
 8004556:	d01a      	beq.n	800458e <HAL_TIM_ConfigClockSource+0xa6>
 8004558:	2b70      	cmp	r3, #112	; 0x70
 800455a:	d87b      	bhi.n	8004654 <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b60      	cmp	r3, #96	; 0x60
 800455e:	d050      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x11a>
 8004560:	2b60      	cmp	r3, #96	; 0x60
 8004562:	d877      	bhi.n	8004654 <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b50      	cmp	r3, #80	; 0x50
 8004566:	d03c      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004568:	2b50      	cmp	r3, #80	; 0x50
 800456a:	d873      	bhi.n	8004654 <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d058      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0x13a>
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d86f      	bhi.n	8004654 <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b30      	cmp	r3, #48	; 0x30
 8004576:	d064      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x15a>
 8004578:	2b30      	cmp	r3, #48	; 0x30
 800457a:	d86b      	bhi.n	8004654 <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b20      	cmp	r3, #32
 800457e:	d060      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x15a>
 8004580:	2b20      	cmp	r3, #32
 8004582:	d867      	bhi.n	8004654 <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d05c      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	2b10      	cmp	r3, #16
 800458a:	d05a      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800458c:	e062      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6899      	ldr	r1, [r3, #8]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f000 f979 	bl	8004894 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	609a      	str	r2, [r3, #8]
      break;
 80045ba:	e04e      	b.n	800465a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	6899      	ldr	r1, [r3, #8]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f000 f962 	bl	8004894 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045de:	609a      	str	r2, [r3, #8]
      break;
 80045e0:	e03b      	b.n	800465a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6859      	ldr	r1, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f000 f8d6 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2150      	movs	r1, #80	; 0x50
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f92f 	bl	800485e <TIM_ITRx_SetConfig>
      break;
 8004600:	e02b      	b.n	800465a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6859      	ldr	r1, [r3, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	461a      	mov	r2, r3
 8004610:	f000 f8f5 	bl	80047fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2160      	movs	r1, #96	; 0x60
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f91f 	bl	800485e <TIM_ITRx_SetConfig>
      break;
 8004620:	e01b      	b.n	800465a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	461a      	mov	r2, r3
 8004630:	f000 f8b6 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2140      	movs	r1, #64	; 0x40
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f90f 	bl	800485e <TIM_ITRx_SetConfig>
      break;
 8004640:	e00b      	b.n	800465a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f000 f906 	bl	800485e <TIM_ITRx_SetConfig>
        break;
 8004652:	e002      	b.n	800465a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004658:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a2e      	ldr	r2, [pc, #184]	; (8004790 <TIM_Base_SetConfig+0xcc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_Base_SetConfig+0x28>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0x28>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a2b      	ldr	r2, [pc, #172]	; (8004794 <TIM_Base_SetConfig+0xd0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d108      	bne.n	80046fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a23      	ldr	r2, [pc, #140]	; (8004790 <TIM_Base_SetConfig+0xcc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a20      	ldr	r2, [pc, #128]	; (8004794 <TIM_Base_SetConfig+0xd0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <TIM_Base_SetConfig+0xd4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1e      	ldr	r2, [pc, #120]	; (800479c <TIM_Base_SetConfig+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0c      	ldr	r2, [pc, #48]	; (8004790 <TIM_Base_SetConfig+0xcc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <TIM_Base_SetConfig+0xb0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <TIM_Base_SetConfig+0xd4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0xb0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0b      	ldr	r2, [pc, #44]	; (800479c <TIM_Base_SetConfig+0xd8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d103      	bne.n	800477c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	615a      	str	r2, [r3, #20]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40000400 	.word	0x40000400
 8004798:	40014000 	.word	0x40014000
 800479c:	40014400 	.word	0x40014400

080047a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 030a 	bic.w	r3, r3, #10
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fe:	b480      	push	{r7}
 8004800:	b087      	sub	sp, #28
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0210 	bic.w	r2, r3, #16
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	031b      	lsls	r3, r3, #12
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800483a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	f043 0307 	orr.w	r3, r3, #7
 8004880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	609a      	str	r2, [r3, #8]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	021a      	lsls	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e054      	b.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a24      	ldr	r2, [pc, #144]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d108      	bne.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800491c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004954:	d009      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a11      	ldr	r2, [pc, #68]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10c      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40014000 	.word	0x40014000

080049b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 f820 	bl	8004a44 <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08004a9c 	.word	0x08004a9c
 8004a28:	08004a9c 	.word	0x08004a9c
 8004a2c:	08004a9c 	.word	0x08004a9c
 8004a30:	08004aa0 	.word	0x08004aa0

08004a34 <memset>:
 8004a34:	4402      	add	r2, r0
 8004a36:	4603      	mov	r3, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr
