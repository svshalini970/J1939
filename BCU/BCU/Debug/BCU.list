
BCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006904  08006904  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800690c  0800690c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  20000010  08006920  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08006920  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018833  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e16  00000000  00000000  0003886f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247ed  00000000  00000000  0003d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013de7  00000000  00000000  0006209d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddfe3  00000000  00000000  00075e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153e67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  00153ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800682c 	.word	0x0800682c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	0800682c 	.word	0x0800682c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SendOneMessage>:
/**
* @param[in] J1939_MESSAGE *
* @note sends *MsgPtr information, all data fields (such as data length, priority, and source address) must have been set. \n
*/
void SendOneMessage(J1939_MESSAGE *MsgPtr)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    //Set the last part of the message to ensure that the DataLength specification. (Refer to CAN B2.0)
    MsgPtr->Mxe.Res = 0; //Refer to the data link layer of J1939 (SAE J1939-21)
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7813      	ldrb	r3, [r2, #0]
 80004d8:	f36f 0341 	bfc	r3, #1, #1
 80004dc:	7013      	strb	r3, [r2, #0]
    MsgPtr->Mxe.RTR = 0;
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7913      	ldrb	r3, [r2, #4]
 80004e2:	f36f 1307 	bfc	r3, #4, #4
 80004e6:	7113      	strb	r3, [r2, #4]
    if (MsgPtr->Mxe.DataLength > 8)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b08      	cmp	r3, #8
 80004f4:	d905      	bls.n	8000502 <SendOneMessage+0x36>
        MsgPtr->Mxe.DataLength = 8;
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7913      	ldrb	r3, [r2, #4]
 80004fa:	2108      	movs	r1, #8
 80004fc:	f361 0303 	bfi	r3, r1, #0, #4
 8000500:	7113      	strb	r3, [r2, #4]
    //Send a frame of message and load all the messages in J1939_MESSAGE into the own structure of the can module
    Port_CAN_Transmit(MsgPtr);
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f001 f8dc 	bl	80016c0 <J1939_CAN_Transmit>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <J1939_EnqueueMessage>:
* @note This program puts *MsgPtr in the message queue\n
If the information cannot be enqueued or sent, there will be a corresponding return prompt,\n
If the transmit interrupt is set (available), when the message is queued, the transmit interrupt is enabled
*/
j1939_uint8_t J1939_EnqueueMessage(J1939_MESSAGE *MsgPtr)
{
 8000510:	b4b0      	push	{r4, r5, r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    j1939_uint8_t _rc = RC_SUCCESS;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]

    if (0)
        _rc = RC_CANNOTTRANSMIT;
    else
    {
        if ((J1939_OVERWRITE_TX_QUEUE == J1939_TRUE) ||
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <J1939_EnqueueMessage+0x80>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b04      	cmp	r3, #4
 8000522:	d82d      	bhi.n	8000580 <J1939_EnqueueMessage+0x70>
            (TTXQueueCount < J1939_TX_QUEUE_SIZE))
        {
            if (TTXQueueCount < J1939_TX_QUEUE_SIZE)
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <J1939_EnqueueMessage+0x80>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b04      	cmp	r3, #4
 800052a:	d813      	bhi.n	8000554 <J1939_EnqueueMessage+0x44>
            {
                TTXQueueCount++;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <J1939_EnqueueMessage+0x80>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <J1939_EnqueueMessage+0x80>)
 8000536:	701a      	strb	r2, [r3, #0]
                TXTail++;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <J1939_EnqueueMessage+0x84>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <J1939_EnqueueMessage+0x84>)
 8000542:	701a      	strb	r2, [r3, #0]
                if (TXTail >= J1939_TX_QUEUE_SIZE)
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <J1939_EnqueueMessage+0x84>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b04      	cmp	r3, #4
 800054a:	d908      	bls.n	800055e <J1939_EnqueueMessage+0x4e>
                    TXTail = 0;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <J1939_EnqueueMessage+0x84>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e004      	b.n	800055e <J1939_EnqueueMessage+0x4e>
            }
            else
            {
                J1939_Flags.TransmitMessagesdCover = 1; //Send data is covered, the previous frame data is covered
 8000554:	4a10      	ldr	r2, [pc, #64]	; (8000598 <J1939_EnqueueMessage+0x88>)
 8000556:	7813      	ldrb	r3, [r2, #0]
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	7013      	strb	r3, [r2, #0]
            }
            TXQueue[TXTail] = *MsgPtr;
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <J1939_EnqueueMessage+0x84>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4619      	mov	r1, r3
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <J1939_EnqueueMessage+0x8c>)
 8000566:	460b      	mov	r3, r1
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	441a      	add	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4614      	mov	r4, r2
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	682b      	ldr	r3, [r5, #0]
 800057c:	6023      	str	r3, [r4, #0]
 800057e:	e001      	b.n	8000584 <J1939_EnqueueMessage+0x74>
        }
        else
            _rc = RC_QUEUEFULL;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
#if J1939_POLL_ECAN == J1939_FALSE
    Port_TXinterruptEnable();
    //Trigger to send interrupt
    Port_TXinterruptOk();
#endif
    return _rc;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bcb0      	pop	{r4, r5, r7}
 800058e:	4770      	bx	lr
 8000590:	20000170 	.word	0x20000170
 8000594:	2000033c 	.word	0x2000033c
 8000598:	20000148 	.word	0x20000148
 800059c:	20000350 	.word	0x20000350

080005a0 <J1939_Send_Message>:
* @return RC_QUEUEFULL Sending the message is unsuccessful, the sending queue is full, and the message entering the queue fails
* @return RC_CANNOTTRANSMIT Sending the message is unsuccessful, the system cannot send the message currently
* @note If the message cannot be enqueued or sent, there will be a corresponding return prompt,\n
*/
j1939_uint8_t J1939_Send_Message(J1939_MESSAGE *MsgPtr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    return J1939_EnqueueMessage(MsgPtr);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ffb1 	bl	8000510 <J1939_EnqueueMessage>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <J1939_Initialization>:
*
* @note This code is called during system initialization, (placed after CAN device initialization)\n
Initialize J1939 global variables\n
*/
void J1939_Initialization()
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
    /*Initialize global variables*/
    J1939_Flags.FlagVal = 0; //No address is declared, other flags will be set to 0 (reset)
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <J1939_Initialization+0xac>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]

    /*Initialize receiving and sending queues*/
    TXHead = 0;
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <J1939_Initialization+0xb0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
    TXTail = 0xFF;
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <J1939_Initialization+0xb4>)
 80005ca:	22ff      	movs	r2, #255	; 0xff
 80005cc:	701a      	strb	r2, [r3, #0]
    RXHead = 0;
 80005ce:	4b28      	ldr	r3, [pc, #160]	; (8000670 <J1939_Initialization+0xb8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
    RXTail = 0xFF;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <J1939_Initialization+0xbc>)
 80005d6:	22ff      	movs	r2, #255	; 0xff
 80005d8:	701a      	strb	r2, [r3, #0]
    TTXQueueCount = 0;
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <J1939_Initialization+0xc0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
    RXQueueCount = 0;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <J1939_Initialization+0xc4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
    /*Initialize node address*/
    NodeAddress = J1939_STARTING_ADDRESS_1;
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <J1939_Initialization+0xc8>)
 80005e8:	2211      	movs	r2, #17
 80005ea:	701a      	strb	r2, [r3, #0]

    /*Initialize the selection of CAN nodes*/
    /*Initialize the request list*/
    REQUEST_LIST.PGN = 0;
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <J1939_Initialization+0xcc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
    REQUEST_LIST.data = J1939_NULL;
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <J1939_Initialization+0xcc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
    REQUEST_LIST.update = J1939_NULL;
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <J1939_Initialization+0xcc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
    REQUEST_LIST.lenght = 0;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <J1939_Initialization+0xcc>)
 8000600:	2200      	movs	r2, #0
 8000602:	809a      	strh	r2, [r3, #4]

    REQUEST_LIST.next = J1939_NULL;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <J1939_Initialization+0xcc>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
    /*Set the TP protocol to idle*/
#if J1939_TP_RX_TX
    J1939_TP_State_t = J1939_TP_NULL;
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <J1939_Initialization+0xd0>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]

    TP_TX_MSG.packets_request_num = 0;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <J1939_Initialization+0xd4>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_TX_MSG.packets_total = 0;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <J1939_Initialization+0xd4>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    TP_TX_MSG.packet_offset_p = 0;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <J1939_Initialization+0xd4>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    TP_TX_MSG.time = 0;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <J1939_Initialization+0xd4>)
 800062a:	2200      	movs	r2, #0
 800062c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    TP_TX_MSG.state = J1939_TP_TX_WAIT;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <J1939_Initialization+0xd4>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    TP_RX_MSG.packets_ok_num = 0;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <J1939_Initialization+0xd8>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
    TP_RX_MSG.packets_total = 0;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <J1939_Initialization+0xd8>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_RX_MSG.time = 0;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <J1939_Initialization+0xd8>)
 800064a:	2200      	movs	r2, #0
 800064c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    TP_RX_MSG.state = J1939_TP_RX_WAIT;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <J1939_Initialization+0xd8>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
#endif
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000148 	.word	0x20000148
 8000668:	200003c8 	.word	0x200003c8
 800066c:	2000033c 	.word	0x2000033c
 8000670:	20000144 	.word	0x20000144
 8000674:	2000003e 	.word	0x2000003e
 8000678:	20000170 	.word	0x20000170
 800067c:	20000149 	.word	0x20000149
 8000680:	2000003c 	.word	0x2000003c
 8000684:	200003b4 	.word	0x200003b4
 8000688:	2000003d 	.word	0x2000003d
 800068c:	2000023c 	.word	0x2000023c
 8000690:	20000044 	.word	0x20000044

08000694 <J1939_Poll>:
        If the interrupt mode is used, this program will not process receiving and sending messages, only address contention timeout. \n
*/
//Declare TP polling function
void J1939_TP_Poll();
void J1939_Poll()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    //We must call the J1939_ReceiveMessages accept function before the time is reset to 0.
#if J1939_POLL_ECAN == J1939_TRUE

    //J1939_Address = NodeAddress;//TODO :remove
    J1939_ReceiveMessages();
 8000698:	f000 f830 	bl	80006fc <J1939_ReceiveMessages>
    J1939_TransmitMessages();
 800069c:	f000 fa9a 	bl	8000bd4 <J1939_TransmitMessages>

#if J1939_TP_RX_TX
    J1939_TP_Poll();
 80006a0:	f000 fd64 	bl	800116c <J1939_TP_Poll>
#endif //J1939_TP_RX_TX
#endif //J1939_POLL_ECAN == J1939_TRUE
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <J1939_Messages_Filter>:
        1. Set filter 0 to only accept broadcast information (PF = 240 -255).
        2. Set filter 1, 2 only accept global address (J1939_GLOBAL_ADDRESS)
        3. As the program runs, filter 2 will be changed to adapt to the program logic.
*/
j1939_uint8_t J1939_Messages_Filter(J1939_MESSAGE *MsgPtr)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    /*Filter 0*/
    if ((MsgPtr->Mxe.PDUFormat) >= 240)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	2bef      	cmp	r3, #239	; 0xef
 80006b6:	d901      	bls.n	80006bc <J1939_Messages_Filter+0x14>
    {
        return RC_SUCCESS;
 80006b8:	2300      	movs	r3, #0
 80006ba:	e016      	b.n	80006ea <J1939_Messages_Filter+0x42>
    }
    /*Filter 1*/
    if (((MsgPtr->Mxe.PDUFormat) < 240) && (MsgPtr->Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	2bef      	cmp	r3, #239	; 0xef
 80006c2:	d805      	bhi.n	80006d0 <J1939_Messages_Filter+0x28>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	2bff      	cmp	r3, #255	; 0xff
 80006ca:	d101      	bne.n	80006d0 <J1939_Messages_Filter+0x28>
    {
        return RC_SUCCESS;
 80006cc:	2300      	movs	r3, #0
 80006ce:	e00c      	b.n	80006ea <J1939_Messages_Filter+0x42>
    }

        if (((MsgPtr->Mxe.PDUFormat) < 240) && (MsgPtr->Mxe.PDUSpecific == NodeAddress))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	2bef      	cmp	r3, #239	; 0xef
 80006d6:	d807      	bhi.n	80006e8 <J1939_Messages_Filter+0x40>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	789a      	ldrb	r2, [r3, #2]
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <J1939_Messages_Filter+0x50>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d101      	bne.n	80006e8 <J1939_Messages_Filter+0x40>
        {
            return RC_SUCCESS;
 80006e4:	2300      	movs	r3, #0
 80006e6:	e000      	b.n	80006ea <J1939_Messages_Filter+0x42>
        }

    return RC_CANNOTTRANSMIT;
 80006e8:	2302      	movs	r3, #2
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2000003c 	.word	0x2000003c

080006fc <J1939_ReceiveMessages>:
        If the information is a network management information or long frame transmission (TP), the received information will be processed in this function. \n
        Otherwise, the information will be placed in the user's receiving queue. \n
        Note: The interrupt is disabled during the running of this program. \n
*/
void J1939_ReceiveMessages(void)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
#if J1939_TP_RX_TX
    j1939_uint32_t _pgn = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
#endif //J1939_TP_RX_TX
    /*Read information from the receiving cache to OneMessage, OneMessage is a global variable*/
    /*Port_CAN_Receive function reads data and returns 1, and returns 0 if there is no data*/
    if (Port_CAN_Receive(&OneMessage))
 8000706:	4873      	ldr	r0, [pc, #460]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000708:	f001 f830 	bl	800176c <J1939_CAN_Receive>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	f000 8251 	beq.w	8000bb6 <J1939_ReceiveMessages+0x4ba>
    {
#if J1939SoftwareFilterEn == J1939_TRUE
        if (J1939_Messages_Filter(&OneMessage) != RC_SUCCESS)
 8000714:	486f      	ldr	r0, [pc, #444]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000716:	f7ff ffc7 	bl	80006a8 <J1939_Messages_Filter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	f040 8247 	bne.w	8000bb0 <J1939_ReceiveMessages+0x4b4>
        {
            return;
        }
#endif //J1939SoftwareFilterEn
        switch (OneMessage.Mxe.PDUFormat)
 8000722:	4b6c      	ldr	r3, [pc, #432]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	2bec      	cmp	r3, #236	; 0xec
 8000728:	d009      	beq.n	800073e <J1939_ReceiveMessages+0x42>
 800072a:	2bec      	cmp	r3, #236	; 0xec
 800072c:	f300 81bc 	bgt.w	8000aa8 <J1939_ReceiveMessages+0x3ac>
 8000730:	2bea      	cmp	r3, #234	; 0xea
 8000732:	f000 8170 	beq.w	8000a16 <J1939_ReceiveMessages+0x31a>
 8000736:	2beb      	cmp	r3, #235	; 0xeb
 8000738:	f000 80d4 	beq.w	80008e4 <J1939_ReceiveMessages+0x1e8>
 800073c:	e1b4      	b.n	8000aa8 <J1939_ReceiveMessages+0x3ac>
        {
#if J1939_TP_RX_TX
        case J1939_PF_TP_CM: //Refer to J1939-21 TP multi-frame transmission protocol
            _pgn = (j1939_uint32_t)((OneMessage.Mxe.Data[7] << 16) & 0xFF0000) + (j1939_uint32_t)((OneMessage.Mxe.Data[6] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[5]) & 0xFF);
 800073e:	4b65      	ldr	r3, [pc, #404]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000740:	7b1b      	ldrb	r3, [r3, #12]
 8000742:	041b      	lsls	r3, r3, #16
 8000744:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000748:	4b62      	ldr	r3, [pc, #392]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 800074a:	7adb      	ldrb	r3, [r3, #11]
 800074c:	021b      	lsls	r3, r3, #8
 800074e:	b29b      	uxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	4a60      	ldr	r2, [pc, #384]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000754:	7a92      	ldrb	r2, [r2, #10]
 8000756:	4413      	add	r3, r2
 8000758:	607b      	str	r3, [r7, #4]
            if ((J1939_TP_State_t == J1939_TP_NULL) && (TP_RX_MSG.state == J1939_TP_RX_WAIT))
 800075a:	4b5f      	ldr	r3, [pc, #380]	; (80008d8 <J1939_ReceiveMessages+0x1dc>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d154      	bne.n	800080c <J1939_ReceiveMessages+0x110>
 8000762:	4b5e      	ldr	r3, [pc, #376]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 8000764:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8000768:	2b00      	cmp	r3, #0
 800076a:	d14f      	bne.n	800080c <J1939_ReceiveMessages+0x110>
            {
                if (OneMessage.Mxe.Data[0] == 16)
 800076c:	4b59      	ldr	r3, [pc, #356]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 800076e:	795b      	ldrb	r3, [r3, #5]
 8000770:	2b10      	cmp	r3, #16
 8000772:	f040 8196 	bne.w	8000aa2 <J1939_ReceiveMessages+0x3a6>
                {
                    J1939_TP_State_t = J1939_TP_RX;
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <J1939_ReceiveMessages+0x1dc>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]

                    TP_RX_MSG.tp_rx_msg.SA = OneMessage.Mxe.SourceAddress;
 800077c:	4b55      	ldr	r3, [pc, #340]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 800077e:	78da      	ldrb	r2, [r3, #3]
 8000780:	4b56      	ldr	r3, [pc, #344]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 8000782:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
                    TP_RX_MSG.tp_rx_msg.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[7] << 16) & 0xFF0000) + (j1939_uint32_t)((OneMessage.Mxe.Data[6] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[5]) & 0xFF);
 8000786:	4b53      	ldr	r3, [pc, #332]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000788:	7b1b      	ldrb	r3, [r3, #12]
 800078a:	041b      	lsls	r3, r3, #16
 800078c:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000790:	4b50      	ldr	r3, [pc, #320]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000792:	7adb      	ldrb	r3, [r3, #11]
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	b29b      	uxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	4a4e      	ldr	r2, [pc, #312]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 800079c:	7a92      	ldrb	r2, [r2, #10]
 800079e:	4413      	add	r3, r2
 80007a0:	4a4e      	ldr	r2, [pc, #312]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 80007a2:	6013      	str	r3, [r2, #0]
                    /*If the system is busy*/
                    if (TP_RX_MSG.osbusy)
 80007a4:	4b4d      	ldr	r3, [pc, #308]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 80007a6:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d004      	beq.n	80007b8 <J1939_ReceiveMessages+0xbc>
                    {
                        TP_RX_MSG.state = J1939_TP_RX_ERROR;
 80007ae:	4b4b      	ldr	r3, [pc, #300]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 80007b0:	2203      	movs	r2, #3
 80007b2:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                        break;
 80007b6:	e1fe      	b.n	8000bb6 <J1939_ReceiveMessages+0x4ba>
                    }
                    /* Determine whether there is enough memory to receive data, if not directly, disconnect the connection*/
                    if (((j1939_uint32_t)((OneMessage.Mxe.Data[2] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[1]) & 0xFF)) > J1939_TP_MAX_MESSAGE_LENGTH)
 80007b8:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 80007ba:	79db      	ldrb	r3, [r3, #7]
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4a44      	ldr	r2, [pc, #272]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 80007c2:	7992      	ldrb	r2, [r2, #6]
 80007c4:	4413      	add	r3, r2
 80007c6:	2bf0      	cmp	r3, #240	; 0xf0
 80007c8:	d904      	bls.n	80007d4 <J1939_ReceiveMessages+0xd8>
                    {
                        TP_RX_MSG.state = J1939_TP_RX_ERROR;
 80007ca:	4b44      	ldr	r3, [pc, #272]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 80007cc:	2203      	movs	r2, #3
 80007ce:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                        break;
 80007d2:	e1f0      	b.n	8000bb6 <J1939_ReceiveMessages+0x4ba>
                    }
                    TP_RX_MSG.tp_rx_msg.byte_count = ((j1939_uint32_t)((OneMessage.Mxe.Data[2] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[1]) & 0xFF));
 80007d4:	4b3f      	ldr	r3, [pc, #252]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 80007d6:	79db      	ldrb	r3, [r3, #7]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 80007e0:	799b      	ldrb	r3, [r3, #6]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4413      	add	r3, r2
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b3c      	ldr	r3, [pc, #240]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 80007ea:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
                    TP_RX_MSG.packets_total = OneMessage.Mxe.Data[3];
 80007ee:	4b39      	ldr	r3, [pc, #228]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 80007f0:	7a1a      	ldrb	r2, [r3, #8]
 80007f2:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 80007f4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                    TP_RX_MSG.time = J1939_TP_T2;
 80007f8:	4b38      	ldr	r3, [pc, #224]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 80007fa:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80007fe:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
                    TP_RX_MSG.state = J1939_TP_RX_READ_DATA;
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <J1939_ReceiveMessages+0x1e0>)
 8000804:	2201      	movs	r2, #1
 8000806:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                    break;
 800080a:	e1d4      	b.n	8000bb6 <J1939_ReceiveMessages+0x4ba>
                }
                goto PutInReceiveQueue;
                break;
            }
            if (J1939_TP_State_t == J1939_TP_TX)
 800080c:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <J1939_ReceiveMessages+0x1dc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d152      	bne.n	80008ba <J1939_ReceiveMessages+0x1be>
            {
                /*Check PGN*/
                if (_pgn == TP_TX_MSG.tp_tx_msg.PGN)
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	429a      	cmp	r2, r3
 800081c:	d14d      	bne.n	80008ba <J1939_ReceiveMessages+0x1be>
                {
                    switch (OneMessage.Mxe.Data[0])
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000820:	795b      	ldrb	r3, [r3, #5]
 8000822:	2bff      	cmp	r3, #255	; 0xff
 8000824:	d04b      	beq.n	80008be <J1939_ReceiveMessages+0x1c2>
 8000826:	2bff      	cmp	r3, #255	; 0xff
 8000828:	dc4b      	bgt.n	80008c2 <J1939_ReceiveMessages+0x1c6>
 800082a:	2b13      	cmp	r3, #19
 800082c:	d03b      	beq.n	80008a6 <J1939_ReceiveMessages+0x1aa>
 800082e:	2b13      	cmp	r3, #19
 8000830:	dc47      	bgt.n	80008c2 <J1939_ReceiveMessages+0x1c6>
 8000832:	2b10      	cmp	r3, #16
 8000834:	d047      	beq.n	80008c6 <J1939_ReceiveMessages+0x1ca>
 8000836:	2b11      	cmp	r3, #17
 8000838:	d143      	bne.n	80008c2 <J1939_ReceiveMessages+0x1c6>
                    case J1939_RTS_CONTROL_BYTE:
                        /* The program runs here, indicating that a virtual link has been established with device 1 in the network (as the sender), but a link request from device 2 has been received, and the same PGN message request*/
                        /* According to the data link layer of J1939-21, we need to keep the original link and do nothing. Device 2 will automatically give up the link for timeout */
                        break;
                    case J1939_CTS_CONTROL_BYTE:
                        if ((J1939_TP_TX_CM_WAIT == TP_TX_MSG.state) || (J1939_TP_WAIT_ACK == TP_TX_MSG.state))
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 800083c:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000840:	2b02      	cmp	r3, #2
 8000842:	d004      	beq.n	800084e <J1939_ReceiveMessages+0x152>
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 8000846:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800084a:	2b04      	cmp	r3, #4
 800084c:	d13d      	bne.n	80008ca <J1939_ReceiveMessages+0x1ce>
                        {
                            /* Send and wait to be held */
                            if (0x00u == OneMessage.Mxe.Data[1])
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000850:	799b      	ldrb	r3, [r3, #6]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d105      	bne.n	8000862 <J1939_ReceiveMessages+0x166>
                            {
                                /* Refresh waiting counter */
                                TP_TX_MSG.time = J1939_TP_T4;
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 8000858:	f240 421a 	movw	r2, #1050	; 0x41a
 800085c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
                                    TP_TX_MSG.packet_offset_p = (j1939_uint8_t)(OneMessage.Mxe.Data[2] - 1);
                                    TP_TX_MSG.state = J1939_TP_TX_DT;
                                }
                            }
                        }
                        break;
 8000860:	e033      	b.n	80008ca <J1939_ReceiveMessages+0x1ce>
                                if ((OneMessage.Mxe.Data[2] + OneMessage.Mxe.Data[1]) > (TP_TX_MSG.packets_total + 1))
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000864:	79db      	ldrb	r3, [r3, #7]
 8000866:	461a      	mov	r2, r3
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 800086a:	799b      	ldrb	r3, [r3, #6]
 800086c:	441a      	add	r2, r3
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 8000870:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000874:	3301      	adds	r3, #1
 8000876:	429a      	cmp	r2, r3
 8000878:	dd04      	ble.n	8000884 <J1939_ReceiveMessages+0x188>
                                    TP_TX_MSG.state = J1939_TP_TX_ERROR;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 800087c:	2205      	movs	r2, #5
 800087e:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        break;
 8000882:	e022      	b.n	80008ca <J1939_ReceiveMessages+0x1ce>
                                    TP_TX_MSG.packets_request_num = OneMessage.Mxe.Data[1];
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000886:	799a      	ldrb	r2, [r3, #6]
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 800088a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                                    TP_TX_MSG.packet_offset_p = (j1939_uint8_t)(OneMessage.Mxe.Data[2] - 1);
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <J1939_ReceiveMessages+0x1d8>)
 8000890:	79db      	ldrb	r3, [r3, #7]
 8000892:	3b01      	subs	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 8000898:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
                                    TP_TX_MSG.state = J1939_TP_TX_DT;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 800089e:	2203      	movs	r2, #3
 80008a0:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        break;
 80008a4:	e011      	b.n	80008ca <J1939_ReceiveMessages+0x1ce>
                    case J1939_EOMACK_CONTROL_BYTE:
                        if (J1939_TP_WAIT_ACK == TP_TX_MSG.state)
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 80008a8:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d10e      	bne.n	80008ce <J1939_ReceiveMessages+0x1d2>
                        {
                            TP_TX_MSG.state = J1939_TX_DONE;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <J1939_ReceiveMessages+0x1e4>)
 80008b2:	2206      	movs	r2, #6
 80008b4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        }
                        //Here can add a verification of the data
                        break;
 80008b8:	e009      	b.n	80008ce <J1939_ReceiveMessages+0x1d2>
                        //Receive a connection abandonment, do nothing, the agreement will actively abandon the connection after a delay
                        break;
                    default:
                        break;
                    }
                }
 80008ba:	bf00      	nop
 80008bc:	e0f4      	b.n	8000aa8 <J1939_ReceiveMessages+0x3ac>
                        break;
 80008be:	bf00      	nop
 80008c0:	e0f2      	b.n	8000aa8 <J1939_ReceiveMessages+0x3ac>
                        break;
 80008c2:	bf00      	nop
 80008c4:	e0f0      	b.n	8000aa8 <J1939_ReceiveMessages+0x3ac>
                        break;
 80008c6:	bf00      	nop
 80008c8:	e0ee      	b.n	8000aa8 <J1939_ReceiveMessages+0x3ac>
                        break;
 80008ca:	bf00      	nop
 80008cc:	e0ec      	b.n	8000aa8 <J1939_ReceiveMessages+0x3ac>
                        break;
 80008ce:	bf00      	nop
            }
            goto PutInReceiveQueue;
 80008d0:	e0ea      	b.n	8000aa8 <J1939_ReceiveMessages+0x3ac>
 80008d2:	bf00      	nop
 80008d4:	2000014c 	.word	0x2000014c
 80008d8:	2000003d 	.word	0x2000003d
 80008dc:	20000044 	.word	0x20000044
 80008e0:	2000023c 	.word	0x2000023c
            break;
#endif //J1939_TP_RX_TX

#if J1939_TP_RX_TX
        case J1939_PF_DT:
            if ((TP_RX_MSG.state == J1939_TP_RX_DATA_WAIT) && (TP_RX_MSG.tp_rx_msg.SA == OneMessage.Mxe.SourceAddress))
 80008e4:	4bb5      	ldr	r3, [pc, #724]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80008e6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	f040 80db 	bne.w	8000aa6 <J1939_ReceiveMessages+0x3aa>
 80008f0:	4bb2      	ldr	r3, [pc, #712]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80008f2:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 80008f6:	4bb2      	ldr	r3, [pc, #712]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 80008f8:	78db      	ldrb	r3, [r3, #3]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	f040 80d3 	bne.w	8000aa6 <J1939_ReceiveMessages+0x3aa>
            {
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u] = OneMessage.Mxe.Data[1];
 8000900:	4baf      	ldr	r3, [pc, #700]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000902:	795b      	ldrb	r3, [r3, #5]
 8000904:	3b01      	subs	r3, #1
 8000906:	461a      	mov	r2, r3
 8000908:	4613      	mov	r3, r2
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	1a9b      	subs	r3, r3, r2
 800090e:	4aac      	ldr	r2, [pc, #688]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000910:	7991      	ldrb	r1, [r2, #6]
 8000912:	4aaa      	ldr	r2, [pc, #680]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 8000914:	4413      	add	r3, r2
 8000916:	460a      	mov	r2, r1
 8000918:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 1] = OneMessage.Mxe.Data[2];
 800091a:	4ba9      	ldr	r3, [pc, #676]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	3b01      	subs	r3, #1
 8000920:	461a      	mov	r2, r3
 8000922:	4613      	mov	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	3301      	adds	r3, #1
 800092a:	4aa5      	ldr	r2, [pc, #660]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 800092c:	79d1      	ldrb	r1, [r2, #7]
 800092e:	4aa3      	ldr	r2, [pc, #652]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 8000930:	4413      	add	r3, r2
 8000932:	460a      	mov	r2, r1
 8000934:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 2] = OneMessage.Mxe.Data[3];
 8000936:	4ba2      	ldr	r3, [pc, #648]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000938:	795b      	ldrb	r3, [r3, #5]
 800093a:	3b01      	subs	r3, #1
 800093c:	461a      	mov	r2, r3
 800093e:	4613      	mov	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	3302      	adds	r3, #2
 8000946:	4a9e      	ldr	r2, [pc, #632]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000948:	7a11      	ldrb	r1, [r2, #8]
 800094a:	4a9c      	ldr	r2, [pc, #624]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 800094c:	4413      	add	r3, r2
 800094e:	460a      	mov	r2, r1
 8000950:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 3] = OneMessage.Mxe.Data[4];
 8000952:	4b9b      	ldr	r3, [pc, #620]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000954:	795b      	ldrb	r3, [r3, #5]
 8000956:	3b01      	subs	r3, #1
 8000958:	461a      	mov	r2, r3
 800095a:	4613      	mov	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	1a9b      	subs	r3, r3, r2
 8000960:	3303      	adds	r3, #3
 8000962:	4a97      	ldr	r2, [pc, #604]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000964:	7a51      	ldrb	r1, [r2, #9]
 8000966:	4a95      	ldr	r2, [pc, #596]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 8000968:	4413      	add	r3, r2
 800096a:	460a      	mov	r2, r1
 800096c:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 4] = OneMessage.Mxe.Data[5];
 800096e:	4b94      	ldr	r3, [pc, #592]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	3b01      	subs	r3, #1
 8000974:	461a      	mov	r2, r3
 8000976:	4613      	mov	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	3304      	adds	r3, #4
 800097e:	4a90      	ldr	r2, [pc, #576]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000980:	7a91      	ldrb	r1, [r2, #10]
 8000982:	4a8e      	ldr	r2, [pc, #568]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 8000984:	4413      	add	r3, r2
 8000986:	460a      	mov	r2, r1
 8000988:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 5] = OneMessage.Mxe.Data[6];
 800098a:	4b8d      	ldr	r3, [pc, #564]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 800098c:	795b      	ldrb	r3, [r3, #5]
 800098e:	3b01      	subs	r3, #1
 8000990:	461a      	mov	r2, r3
 8000992:	4613      	mov	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	3305      	adds	r3, #5
 800099a:	4a89      	ldr	r2, [pc, #548]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 800099c:	7ad1      	ldrb	r1, [r2, #11]
 800099e:	4a87      	ldr	r2, [pc, #540]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80009a0:	4413      	add	r3, r2
 80009a2:	460a      	mov	r2, r1
 80009a4:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 6] = OneMessage.Mxe.Data[7];
 80009a6:	4b86      	ldr	r3, [pc, #536]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 80009a8:	795b      	ldrb	r3, [r3, #5]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	461a      	mov	r2, r3
 80009ae:	4613      	mov	r3, r2
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	3306      	adds	r3, #6
 80009b6:	4a82      	ldr	r2, [pc, #520]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 80009b8:	7b11      	ldrb	r1, [r2, #12]
 80009ba:	4a80      	ldr	r2, [pc, #512]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80009bc:	4413      	add	r3, r2
 80009be:	460a      	mov	r2, r1
 80009c0:	711a      	strb	r2, [r3, #4]
                /*Special processing to re-accept the received data packet*/
                if ((OneMessage.Mxe.Data[0]) > TP_RX_MSG.packets_ok_num)
 80009c2:	4b7f      	ldr	r3, [pc, #508]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 80009c4:	795a      	ldrb	r2, [r3, #5]
 80009c6:	4b7d      	ldr	r3, [pc, #500]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80009c8:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d907      	bls.n	80009e0 <J1939_ReceiveMessages+0x2e4>
                {
                    TP_RX_MSG.packets_ok_num++;
 80009d0:	4b7a      	ldr	r3, [pc, #488]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80009d2:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b78      	ldr	r3, [pc, #480]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80009dc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                }
                TP_RX_MSG.time = J1939_TP_T1;
 80009e0:	4b76      	ldr	r3, [pc, #472]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80009e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80009e6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
                /*Determine whether an even number of data packets have been received or the last data packet has been read*/
                if ((TP_RX_MSG.packets_ok_num % 2 == 0) || (TP_RX_MSG.packets_ok_num == TP_RX_MSG.packets_total))
 80009ea:	4b74      	ldr	r3, [pc, #464]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80009ec:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d008      	beq.n	8000a0c <J1939_ReceiveMessages+0x310>
 80009fa:	4b70      	ldr	r3, [pc, #448]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 80009fc:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8000a00:	4b6e      	ldr	r3, [pc, #440]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 8000a02:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000a06:	429a      	cmp	r2, r3
 8000a08:	f040 80d4 	bne.w	8000bb4 <J1939_ReceiveMessages+0x4b8>
                {
                    TP_RX_MSG.state = J1939_TP_RX_READ_DATA;
 8000a0c:	4b6b      	ldr	r3, [pc, #428]	; (8000bbc <J1939_ReceiveMessages+0x4c0>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                    break;
 8000a14:	e0cf      	b.n	8000bb6 <J1939_ReceiveMessages+0x4ba>
            //The program cannot run to this point, but we can't give up the received data packet
            goto PutInReceiveQueue;
#endif //J1939_TP_RX_TX
        case J1939_PF_REQUEST:
            /*Use OneMessage.Mxe.PGN to store the requested PGN*/
            if (OneMessage.Mxe.Data[1] < 240)
 8000a16:	4b6a      	ldr	r3, [pc, #424]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a18:	799b      	ldrb	r3, [r3, #6]
 8000a1a:	2bef      	cmp	r3, #239	; 0xef
 8000a1c:	d81b      	bhi.n	8000a56 <J1939_ReceiveMessages+0x35a>
            {
                OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[2] << 16) & 0x030000) + (j1939_uint32_t)((OneMessage.Mxe.Data[1] << 8) & 0xFF00) + 0x00;
 8000a1e:	4b68      	ldr	r3, [pc, #416]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a20:	79db      	ldrb	r3, [r3, #7]
 8000a22:	041b      	lsls	r3, r3, #16
 8000a24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000a28:	4b65      	ldr	r3, [pc, #404]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a2a:	799b      	ldrb	r3, [r3, #6]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000a36:	4b62      	ldr	r3, [pc, #392]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a38:	b2d1      	uxtb	r1, r2
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	4301      	orrs	r1, r0
 8000a3e:	7359      	strb	r1, [r3, #13]
 8000a40:	0a11      	lsrs	r1, r2, #8
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	2000      	movs	r0, #0
 8000a46:	4301      	orrs	r1, r0
 8000a48:	7399      	strb	r1, [r3, #14]
 8000a4a:	0c12      	lsrs	r2, r2, #16
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	2100      	movs	r1, #0
 8000a50:	430a      	orrs	r2, r1
 8000a52:	73da      	strb	r2, [r3, #15]
 8000a54:	e01d      	b.n	8000a92 <J1939_ReceiveMessages+0x396>
            }
            else
            {
                OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[2] << 16) & 0x030000) + (j1939_uint32_t)((OneMessage.Mxe.Data[1] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[0]) & 0xFF);
 8000a56:	4b5a      	ldr	r3, [pc, #360]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a58:	79db      	ldrb	r3, [r3, #7]
 8000a5a:	041b      	lsls	r3, r3, #16
 8000a5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000a60:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a62:	799b      	ldrb	r3, [r3, #6]
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	4a55      	ldr	r2, [pc, #340]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a6c:	7952      	ldrb	r2, [r2, #5]
 8000a6e:	4413      	add	r3, r2
 8000a70:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000a74:	4b52      	ldr	r3, [pc, #328]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a76:	b2d1      	uxtb	r1, r2
 8000a78:	2000      	movs	r0, #0
 8000a7a:	4301      	orrs	r1, r0
 8000a7c:	7359      	strb	r1, [r3, #13]
 8000a7e:	0a11      	lsrs	r1, r2, #8
 8000a80:	b2c9      	uxtb	r1, r1
 8000a82:	2000      	movs	r0, #0
 8000a84:	4301      	orrs	r1, r0
 8000a86:	7399      	strb	r1, [r3, #14]
 8000a88:	0c12      	lsrs	r2, r2, #16
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	73da      	strb	r2, [r3, #15]
            }
            J1939_Response(OneMessage.Mxe.PGN);
 8000a92:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fc84 	bl	80013a8 <J1939_Response>
            break;
 8000aa0:	e089      	b.n	8000bb6 <J1939_ReceiveMessages+0x4ba>
                goto PutInReceiveQueue;
 8000aa2:	bf00      	nop
 8000aa4:	e000      	b.n	8000aa8 <J1939_ReceiveMessages+0x3ac>
            goto PutInReceiveQueue;
 8000aa6:	bf00      	nop
OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Array[0]<<16)&0x030000)
+(j1939_uint32_t)((OneMessage.Array[1]<<8)&0xFF00)
+(j1939_uint32_t)((OneMessage.Array[2])&0xFF);
}
*/
            if (OneMessage.Mxe.PDUFormat < 240)
 8000aa8:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	2bef      	cmp	r3, #239	; 0xef
 8000aae:	d822      	bhi.n	8000af6 <J1939_ReceiveMessages+0x3fa>
            {
                OneMessage.Mxe.PGN = (OneMessage.Mxe.Res << 17) + (OneMessage.Mxe.DataPage << 16) + (OneMessage.Mxe.PDUFormat << 8);
 8000ab0:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	045a      	lsls	r2, r3, #17
 8000abc:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	041b      	lsls	r3, r3, #16
 8000ac8:	441a      	add	r2, r3
 8000aca:	4b3d      	ldr	r3, [pc, #244]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000acc:	785b      	ldrb	r3, [r3, #1]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	4413      	add	r3, r2
 8000ad2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ad6:	4b3a      	ldr	r3, [pc, #232]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000ad8:	b2d1      	uxtb	r1, r2
 8000ada:	2000      	movs	r0, #0
 8000adc:	4301      	orrs	r1, r0
 8000ade:	7359      	strb	r1, [r3, #13]
 8000ae0:	0a11      	lsrs	r1, r2, #8
 8000ae2:	b2c9      	uxtb	r1, r1
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	7399      	strb	r1, [r3, #14]
 8000aea:	0c12      	lsrs	r2, r2, #16
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	2100      	movs	r1, #0
 8000af0:	430a      	orrs	r2, r1
 8000af2:	73da      	strb	r2, [r3, #15]
 8000af4:	e024      	b.n	8000b40 <J1939_ReceiveMessages+0x444>
            }
            else
            {
                OneMessage.Mxe.PGN = (OneMessage.Mxe.Res << 17) + (OneMessage.Mxe.DataPage << 16) + (OneMessage.Mxe.PDUFormat << 8) + OneMessage.Mxe.PDUSpecific;
 8000af6:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	045a      	lsls	r2, r3, #17
 8000b02:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	041b      	lsls	r3, r3, #16
 8000b0e:	441a      	add	r2, r3
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000b12:	785b      	ldrb	r3, [r3, #1]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	4413      	add	r3, r2
 8000b18:	4a29      	ldr	r2, [pc, #164]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000b1a:	7892      	ldrb	r2, [r2, #2]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000b24:	b2d1      	uxtb	r1, r2
 8000b26:	2000      	movs	r0, #0
 8000b28:	4301      	orrs	r1, r0
 8000b2a:	7359      	strb	r1, [r3, #13]
 8000b2c:	0a11      	lsrs	r1, r2, #8
 8000b2e:	b2c9      	uxtb	r1, r1
 8000b30:	2000      	movs	r0, #0
 8000b32:	4301      	orrs	r1, r0
 8000b34:	7399      	strb	r1, [r3, #14]
 8000b36:	0c12      	lsrs	r2, r2, #16
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	73da      	strb	r2, [r3, #15]
            }


                if ((J1939_OVERWRITE_RX_QUEUE == J1939_TRUE) ||
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <J1939_ReceiveMessages+0x4c8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b09      	cmp	r3, #9
 8000b46:	d82d      	bhi.n	8000ba4 <J1939_ReceiveMessages+0x4a8>
                    (RXQueueCount < J1939_RX_QUEUE_SIZE))
                {
                    if (RXQueueCount < J1939_RX_QUEUE_SIZE)
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <J1939_ReceiveMessages+0x4c8>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b09      	cmp	r3, #9
 8000b4e:	d813      	bhi.n	8000b78 <J1939_ReceiveMessages+0x47c>
                    {
                        RXQueueCount++;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <J1939_ReceiveMessages+0x4c8>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <J1939_ReceiveMessages+0x4c8>)
 8000b5a:	701a      	strb	r2, [r3, #0]
                        RXTail++;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <J1939_ReceiveMessages+0x4cc>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <J1939_ReceiveMessages+0x4cc>)
 8000b66:	701a      	strb	r2, [r3, #0]
                        if (RXTail >= J1939_RX_QUEUE_SIZE)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <J1939_ReceiveMessages+0x4cc>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b09      	cmp	r3, #9
 8000b6e:	d908      	bls.n	8000b82 <J1939_ReceiveMessages+0x486>
                            RXTail = 0;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <J1939_ReceiveMessages+0x4cc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e004      	b.n	8000b82 <J1939_ReceiveMessages+0x486>
                    }
                    else
                    {
                        J1939_Flags.ReceivedMessagesdCover = 1; //Generate data coverage
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <J1939_ReceiveMessages+0x4d0>)
 8000b7a:	7813      	ldrb	r3, [r2, #0]
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	7013      	strb	r3, [r2, #0]
                    }
                    RXQueue[RXTail] = OneMessage;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <J1939_ReceiveMessages+0x4cc>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <J1939_ReceiveMessages+0x4d4>)
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	440b      	add	r3, r1
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <J1939_ReceiveMessages+0x4c4>)
 8000b96:	461c      	mov	r4, r3
 8000b98:	4615      	mov	r5, r2
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	682b      	ldr	r3, [r5, #0]
 8000ba0:	6023      	str	r3, [r4, #0]
 8000ba2:	e008      	b.n	8000bb6 <J1939_ReceiveMessages+0x4ba>
                }
                else
                    J1939_Flags.ReceivedMessagesDropped = 1; //Data overflow occurs
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <J1939_ReceiveMessages+0x4d0>)
 8000ba6:	7813      	ldrb	r3, [r2, #0]
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	7013      	strb	r3, [r2, #0]
 8000bae:	e002      	b.n	8000bb6 <J1939_ReceiveMessages+0x4ba>
            return;
 8000bb0:	bf00      	nop
 8000bb2:	e000      	b.n	8000bb6 <J1939_ReceiveMessages+0x4ba>
                break;
 8000bb4:	bf00      	nop


        }
        }
    }
}
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bdb0      	pop	{r4, r5, r7, pc}
 8000bbc:	20000044 	.word	0x20000044
 8000bc0:	2000014c 	.word	0x2000014c
 8000bc4:	20000149 	.word	0x20000149
 8000bc8:	2000003e 	.word	0x2000003e
 8000bcc:	20000148 	.word	0x20000148
 8000bd0:	20000174 	.word	0x20000174

08000bd4 <J1939_TransmitMessages>:
* @return RC_CANNOTTRANSMIT The system did not send a message, there is no message to send, or the wrong CAN device
* @note After calling this function, if there is a message in the sending message queue, the message will be sent. If the message cannot be sent, the related error code will be returned. \n
             During the running of the program, the interrupt is disabled.
*/
 j1939_uint8_t J1939_TransmitMessages()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

        if (TTXQueueCount == 0)
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <J1939_TransmitMessages+0x78>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12e      	bne.n	8000c3e <J1939_TransmitMessages+0x6a>
        {
//If there is no message to be sent from the sending message queue, resume interruption (clear the sending flag)
#if J1939_POLL_ECAN == J1939_FALSE
            Port_TXinterruptEnable();
#endif
            return RC_CANNOTTRANSMIT;
 8000be0:	2302      	movs	r3, #2
 8000be2:	e031      	b.n	8000c48 <J1939_TransmitMessages+0x74>
            while (TTXQueueCount > 0)
            {
                /*Ensure that the last data was sent successfully*/
                /**************A judgment function can be added ****************************/

                TXQueue[TXHead].Mxe.SourceAddress = NodeAddress;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <J1939_TransmitMessages+0x7c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <J1939_TransmitMessages+0x80>)
 8000bec:	7818      	ldrb	r0, [r3, #0]
 8000bee:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <J1939_TransmitMessages+0x84>)
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	3303      	adds	r3, #3
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	701a      	strb	r2, [r3, #0]

                SendOneMessage((J1939_MESSAGE *)&(TXQueue[TXHead]));
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <J1939_TransmitMessages+0x7c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <J1939_TransmitMessages+0x84>)
 8000c10:	4413      	add	r3, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fc5a 	bl	80004cc <SendOneMessage>
                TXHead++;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <J1939_TransmitMessages+0x7c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <J1939_TransmitMessages+0x7c>)
 8000c22:	701a      	strb	r2, [r3, #0]
                if (TXHead >= J1939_TX_QUEUE_SIZE)
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <J1939_TransmitMessages+0x7c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d902      	bls.n	8000c32 <J1939_TransmitMessages+0x5e>
                    TXHead = 0;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <J1939_TransmitMessages+0x7c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
                TTXQueueCount--;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <J1939_TransmitMessages+0x78>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <J1939_TransmitMessages+0x78>)
 8000c3c:	701a      	strb	r2, [r3, #0]
            while (TTXQueueCount > 0)
 8000c3e:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <J1939_TransmitMessages+0x78>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1ce      	bne.n	8000be4 <J1939_TransmitMessages+0x10>
            Port_TXinterruptEnable();
#endif
        }


    return RC_SUCCESS;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000170 	.word	0x20000170
 8000c50:	200003c8 	.word	0x200003c8
 8000c54:	2000003c 	.word	0x2000003c
 8000c58:	20000350 	.word	0x20000350

08000c5c <J1939_TP_DT_Packet_send>:
#if J1939_TP_RX_TX
/**
* @note sends TP.DT, refer to J1939-21
*/
void J1939_TP_DT_Packet_send(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint16_t _packet_offset_p;
    j1939_int32_t _i = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    _msg.Mxe.Priority = J1939_TP_DT_PRIORITY;
 8000c66:	793b      	ldrb	r3, [r7, #4]
 8000c68:	f043 031c 	orr.w	r3, r3, #28
 8000c6c:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.DataPage = 0;
 8000c6e:	793b      	ldrb	r3, [r7, #4]
 8000c70:	f36f 0300 	bfc	r3, #0, #1
 8000c74:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.PDUFormat = J1939_PF_DT;
 8000c76:	23eb      	movs	r3, #235	; 0xeb
 8000c78:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000c7a:	4b4d      	ldr	r3, [pc, #308]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000c7c:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000c80:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.DataLength = 8;
 8000c82:	7a3b      	ldrb	r3, [r7, #8]
 8000c84:	2208      	movs	r2, #8
 8000c86:	f362 0303 	bfi	r3, r2, #0, #4
 8000c8a:	723b      	strb	r3, [r7, #8]

    /*Get the number of data packets sent by request*/
    if (TP_TX_MSG.packets_request_num > 0)
 8000c8c:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000c8e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d076      	beq.n	8000d84 <J1939_TP_DT_Packet_send+0x128>
    {
        TP_TX_MSG.packets_request_num--;
 8000c96:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000c98:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000ca2:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        /*Get data offset pointer*/
        _packet_offset_p = (j1939_uint16_t)(TP_TX_MSG.packet_offset_p * 7u);
 8000ca6:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000ca8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	00d2      	lsls	r2, r2, #3
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	837b      	strh	r3, [r7, #26]
        /*Load data package number*/
        _msg.Mxe.Data[0] = (j1939_uint8_t)(1u + TP_TX_MSG.packet_offset_p);
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000cb8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	727b      	strb	r3, [r7, #9]

        for (_i = 0; _i < 7; _i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e00f      	b.n	8000ce8 <J1939_TP_DT_Packet_send+0x8c>
        {
            _msg.Mxe.Data[_i + 1] = TP_TX_MSG.tp_tx_msg.data[_packet_offset_p + _i];
 8000cc8:	8b7a      	ldrh	r2, [r7, #26]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	441a      	add	r2, r3
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	4937      	ldr	r1, [pc, #220]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000cd4:	440a      	add	r2, r1
 8000cd6:	7912      	ldrb	r2, [r2, #4]
 8000cd8:	f107 0120 	add.w	r1, r7, #32
 8000cdc:	440b      	add	r3, r1
 8000cde:	f803 2c17 	strb.w	r2, [r3, #-23]
        for (_i = 0; _i < 7; _i++)
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	61fb      	str	r3, [r7, #28]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	ddec      	ble.n	8000cc8 <J1939_TP_DT_Packet_send+0x6c>
        }
        /*Is it the last packet of data message*/
        if (TP_TX_MSG.packet_offset_p == (TP_TX_MSG.packets_total - 1u))
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000cf0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000cf8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d12f      	bne.n	8000d62 <J1939_TP_DT_Packet_send+0x106>
        {
            /* Whether the parameter group can be filled, whether it needs to be filled, */
            if (_packet_offset_p > TP_TX_MSG.tp_tx_msg.byte_count - 7)
 8000d02:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d04:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000d08:	1f9a      	subs	r2, r3, #6
 8000d0a:	8b7b      	ldrh	r3, [r7, #26]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dc16      	bgt.n	8000d3e <J1939_TP_DT_Packet_send+0xe2>
            {
                /*Calculate the number of data to be filled*/
                _i = TP_TX_MSG.tp_tx_msg.byte_count - _packet_offset_p - 7;
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d12:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000d16:	461a      	mov	r2, r3
 8000d18:	8b7b      	ldrh	r3, [r7, #26]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	3b07      	subs	r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]

                for (; _i < 0; _i++)
 8000d20:	e00a      	b.n	8000d38 <J1939_TP_DT_Packet_send+0xdc>
                {
                    /*By default, the parameter group size of J1939 is 8*/
                    _msg.Mxe.Data[_i + 8] = J1939_RESERVED_BYTE;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3308      	adds	r3, #8
 8000d26:	f107 0220 	add.w	r2, r7, #32
 8000d2a:	4413      	add	r3, r2
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	f803 2c17 	strb.w	r2, [r3, #-23]
                for (; _i < 0; _i++)
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3301      	adds	r3, #1
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dbf1      	blt.n	8000d22 <J1939_TP_DT_Packet_send+0xc6>
                }
            }

            TP_TX_MSG.packets_request_num = 0;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_TX_MSG.packet_offset_p = 0;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.time = J1939_TP_T3;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d50:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000d54:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            /* Jump step, wait for end confirmation or resend data request*/
            TP_TX_MSG.state = J1939_TP_WAIT_ACK;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 8000d60:	e00b      	b.n	8000d7a <J1939_TP_DT_Packet_send+0x11e>
        }
        else
        {
            /*Prepare for the next data transmission*/
            TP_TX_MSG.packet_offset_p++;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d64:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d6e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.state = J1939_TP_TX_DT;
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d74:	2203      	movs	r2, #3
 8000d76:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
        }

        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fbc7 	bl	8000510 <J1939_EnqueueMessage>
        TP_TX_MSG.packets_request_num = 0;
        TP_TX_MSG.packet_offset_p = 0;
        TP_TX_MSG.time = J1939_TP_T3;
        TP_TX_MSG.state = J1939_TP_WAIT_ACK;
    }
}
 8000d82:	e010      	b.n	8000da6 <J1939_TP_DT_Packet_send+0x14a>
        TP_TX_MSG.packets_request_num = 0;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        TP_TX_MSG.packet_offset_p = 0;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        TP_TX_MSG.time = J1939_TP_T3;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000d96:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000d9a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        TP_TX_MSG.state = J1939_TP_WAIT_ACK;
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <J1939_TP_DT_Packet_send+0x154>)
 8000da0:	2204      	movs	r2, #4
 8000da2:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000023c 	.word	0x2000023c

08000db4 <J1939_CM_Start>:
/**
* @note sends TP. CM-RTS, 16, 23, 4, 255, PGN message, refer to J1939-21,
*/
void J1939_CM_Start(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
    j1939_uint32_t pgn_num;
    J1939_MESSAGE _msg;

    pgn_num = TP_TX_MSG.tp_tx_msg.PGN;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <J1939_CM_Start+0x94>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000dc0:	783b      	ldrb	r3, [r7, #0]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f362 0384 	bfi	r3, r2, #2, #3
 8000dc8:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000dca:	783b      	ldrb	r3, [r7, #0]
 8000dcc:	f36f 0300 	bfc	r3, #0, #1
 8000dd0:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = 0xf1;
 8000dd2:	23f1      	movs	r3, #241	; 0xf1
 8000dd4:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <J1939_CM_Start+0x94>)
 8000dd8:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000ddc:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000dde:	793b      	ldrb	r3, [r7, #4]
 8000de0:	2208      	movs	r2, #8
 8000de2:	f362 0303 	bfi	r3, r2, #0, #4
 8000de6:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_RTS_CONTROL_BYTE;
 8000de8:	2310      	movs	r3, #16
 8000dea:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = (j1939_uint8_t)TP_TX_MSG.tp_tx_msg.byte_count;
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <J1939_CM_Start+0x94>)
 8000dee:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = (j1939_uint8_t)((TP_TX_MSG.tp_tx_msg.byte_count) >> 8);
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <J1939_CM_Start+0x94>)
 8000df8:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = TP_TX_MSG.packets_total;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <J1939_CM_Start+0x94>)
 8000e06:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000e0a:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000e0c:	23ff      	movs	r3, #255	; 0xff
 8000e0e:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	0c1b      	lsrs	r3, r3, #16
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000e26:	463b      	mov	r3, r7
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fb71 	bl	8000510 <J1939_EnqueueMessage>

    /*Refresh waiting time, trigger the next step ()*/
    TP_TX_MSG.time = J1939_TP_T3;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <J1939_CM_Start+0x94>)
 8000e30:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000e34:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    TP_TX_MSG.state = J1939_TP_TX_CM_WAIT;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <J1939_CM_Start+0x94>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000023c 	.word	0x2000023c

08000e4c <J1939_TP_TX_Abort>:
/**
* @note break TP link
*/
void J1939_TP_TX_Abort(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;

    pgn_num = TP_TX_MSG.tp_tx_msg.PGN;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <J1939_TP_TX_Abort+0x78>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000e58:	783b      	ldrb	r3, [r7, #0]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f362 0384 	bfi	r3, r2, #2, #3
 8000e60:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000e62:	783b      	ldrb	r3, [r7, #0]
 8000e64:	f36f 0300 	bfc	r3, #0, #1
 8000e68:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 8000e6a:	23ec      	movs	r3, #236	; 0xec
 8000e6c:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <J1939_TP_TX_Abort+0x78>)
 8000e70:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000e74:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000e76:	793b      	ldrb	r3, [r7, #4]
 8000e78:	2208      	movs	r2, #8
 8000e7a:	f362 0303 	bfi	r3, r2, #0, #4
 8000e7e:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_CONNABORT_CONTROL_BYTE;
 8000e80:	23ff      	movs	r3, #255	; 0xff
 8000e82:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = J1939_RESERVED_BYTE;
 8000e84:	23ff      	movs	r3, #255	; 0xff
 8000e86:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 8000e88:	23ff      	movs	r3, #255	; 0xff
 8000e8a:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000e8c:	23ff      	movs	r3, #255	; 0xff
 8000e8e:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000e90:	23ff      	movs	r3, #255	; 0xff
 8000e92:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb2f 	bl	8000510 <J1939_EnqueueMessage>
    /*End sending*/
    TP_TX_MSG.state = J1939_TX_DONE;
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <J1939_TP_TX_Abort+0x78>)
 8000eb4:	2206      	movs	r2, #6
 8000eb6:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000023c 	.word	0x2000023c

08000ec8 <J1939_TP_RX_Abort>:
/**
* @note break TP link
*/
void J1939_TP_RX_Abort(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;

    pgn_num = TP_RX_MSG.tp_rx_msg.PGN;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <J1939_TP_RX_Abort+0x78>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000ed4:	783b      	ldrb	r3, [r7, #0]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f362 0384 	bfi	r3, r2, #2, #3
 8000edc:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000ede:	783b      	ldrb	r3, [r7, #0]
 8000ee0:	f36f 0300 	bfc	r3, #0, #1
 8000ee4:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 8000ee6:	23ec      	movs	r3, #236	; 0xec
 8000ee8:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_RX_MSG.tp_rx_msg.SA;
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <J1939_TP_RX_Abort+0x78>)
 8000eec:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000ef0:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	f362 0303 	bfi	r3, r2, #0, #4
 8000efa:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_CONNABORT_CONTROL_BYTE;
 8000efc:	23ff      	movs	r3, #255	; 0xff
 8000efe:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = J1939_RESERVED_BYTE;
 8000f00:	23ff      	movs	r3, #255	; 0xff
 8000f02:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 8000f04:	23ff      	movs	r3, #255	; 0xff
 8000f06:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000f08:	23ff      	movs	r3, #255	; 0xff
 8000f0a:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000f0c:	23ff      	movs	r3, #255	; 0xff
 8000f0e:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	0c1b      	lsrs	r3, r3, #16
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff faf1 	bl	8000510 <J1939_EnqueueMessage>
    /*End sending*/
    TP_RX_MSG.state = J1939_RX_DONE;
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <J1939_TP_RX_Abort+0x78>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000044 	.word	0x20000044

08000f44 <J1939_TP_TX_RefreshCMTimer>:
/**
* @note TP's timer
*/
j1939_uint8_t J1939_TP_TX_RefreshCMTimer(j1939_uint16_t dt_ms)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
    if ((J1939_TP_TX_CM_WAIT == TP_TX_MSG.state) || (J1939_TP_WAIT_ACK == TP_TX_MSG.state))
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000f50:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d004      	beq.n	8000f62 <J1939_TP_TX_RefreshCMTimer+0x1e>
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000f5a:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d116      	bne.n	8000f90 <J1939_TP_TX_RefreshCMTimer+0x4c>
    {
        if (TP_TX_MSG.time > dt_ms)
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000f64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8000f68:	88fa      	ldrh	r2, [r7, #6]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d20a      	bcs.n	8000f84 <J1939_TP_TX_RefreshCMTimer+0x40>
        {
            TP_TX_MSG.time = TP_TX_MSG.time - dt_ms;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000f70:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000f7c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            return J1939_TP_TIMEOUT_NORMAL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e006      	b.n	8000f92 <J1939_TP_TX_RefreshCMTimer+0x4e>
        }
        else
        {
            /*time out */
            TP_TX_MSG.time = 0u;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            return J1939_TP_TIMEOUT_ABNORMAL;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <J1939_TP_TX_RefreshCMTimer+0x4e>
        }
    }
    else
    {
        return J1939_TP_TIMEOUT_NORMAL;
 8000f90:	2300      	movs	r3, #0
    }
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2000023c 	.word	0x2000023c

08000fa4 <J1939_TP_RX_RefreshCMTimer>:
/**
* @note TP's timer
*/
j1939_uint8_t J1939_TP_RX_RefreshCMTimer(j1939_uint16_t dt_ms)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
    if ((J1939_TP_RX_DATA_WAIT == TP_RX_MSG.state))
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000fb0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d116      	bne.n	8000fe6 <J1939_TP_RX_RefreshCMTimer+0x42>
    {
        if (TP_RX_MSG.time > dt_ms)
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000fba:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8000fbe:	88fa      	ldrh	r2, [r7, #6]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d20a      	bcs.n	8000fda <J1939_TP_RX_RefreshCMTimer+0x36>
        {
            TP_RX_MSG.time = TP_RX_MSG.time - dt_ms;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000fc6:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000fd2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            return J1939_TP_TIMEOUT_NORMAL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e006      	b.n	8000fe8 <J1939_TP_RX_RefreshCMTimer+0x44>
        }
        else
        {
            /*time out */
            TP_RX_MSG.time = 0u;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <J1939_TP_RX_RefreshCMTimer+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            return J1939_TP_TIMEOUT_ABNORMAL;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <J1939_TP_RX_RefreshCMTimer+0x44>
        }
    }
    else
    {
        return J1939_TP_TIMEOUT_NORMAL;
 8000fe6:	2300      	movs	r3, #0
    }
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20000044 	.word	0x20000044

08000ff8 <J1939_read_DT_Packet>:
/**
* @note sends read data TP.CM_CTS and EndofMsgAck messages.
*/
void J1939_read_DT_Packet()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;
    pgn_num = TP_RX_MSG.tp_rx_msg.PGN;
 8000ffe:	4b5a      	ldr	r3, [pc, #360]	; (8001168 <J1939_read_DT_Packet+0x170>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8001004:	783b      	ldrb	r3, [r7, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	f362 0384 	bfi	r3, r2, #2, #3
 800100c:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 800100e:	783b      	ldrb	r3, [r7, #0]
 8001010:	f36f 0300 	bfc	r3, #0, #1
 8001014:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 8001016:	23ec      	movs	r3, #236	; 0xec
 8001018:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_RX_MSG.tp_rx_msg.SA;
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <J1939_read_DT_Packet+0x170>)
 800101c:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8001020:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8001022:	793b      	ldrb	r3, [r7, #4]
 8001024:	2208      	movs	r2, #8
 8001026:	f362 0303 	bfi	r3, r2, #0, #4
 800102a:	713b      	strb	r3, [r7, #4]

    /*If the system is busy, keep the link but do not send messages*/
    if (TP_RX_MSG.osbusy)
 800102c:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <J1939_read_DT_Packet+0x170>)
 800102e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001032:	2b00      	cmp	r3, #0
 8001034:	d019      	beq.n	800106a <J1939_read_DT_Packet+0x72>
    {
        _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 8001036:	2311      	movs	r3, #17
 8001038:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8001042:	23ff      	movs	r3, #255	; 0xff
 8001044:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8001046:	23ff      	movs	r3, #255	; 0xff
 8001048:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	0c1b      	lsrs	r3, r3, #16
 800104e:	b2db      	uxtb	r3, r3
 8001050:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	b2db      	uxtb	r3, r3
 8001058:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	72bb      	strb	r3, [r7, #10]
        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8001060:	463b      	mov	r3, r7
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa54 	bl	8000510 <J1939_EnqueueMessage>
        return;
 8001068:	e07b      	b.n	8001162 <J1939_read_DT_Packet+0x16a>
    }
    if (TP_RX_MSG.packets_total > TP_RX_MSG.packets_ok_num)
 800106a:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <J1939_read_DT_Packet+0x170>)
 800106c:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8001070:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <J1939_read_DT_Packet+0x170>)
 8001072:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8001076:	429a      	cmp	r2, r3
 8001078:	d94b      	bls.n	8001112 <J1939_read_DT_Packet+0x11a>
    {
        /*The last response, if less than 2 packets of data*/
        if ((TP_RX_MSG.packets_total - TP_RX_MSG.packets_ok_num) == 1)
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <J1939_read_DT_Packet+0x170>)
 800107c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8001080:	461a      	mov	r2, r3
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <J1939_read_DT_Packet+0x170>)
 8001084:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d11f      	bne.n	80010ce <J1939_read_DT_Packet+0xd6>
        {
            _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 800108e:	2311      	movs	r3, #17
 8001090:	717b      	strb	r3, [r7, #5]
            _msg.Mxe.Data[1] = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	71bb      	strb	r3, [r7, #6]
            _msg.Mxe.Data[2] = TP_RX_MSG.packets_total;
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <J1939_read_DT_Packet+0x170>)
 8001098:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800109c:	71fb      	strb	r3, [r7, #7]
            _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	723b      	strb	r3, [r7, #8]
            _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 80010a2:	23ff      	movs	r3, #255	; 0xff
 80010a4:	727b      	strb	r3, [r7, #9]
            _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	72fb      	strb	r3, [r7, #11]
            _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	72bb      	strb	r3, [r7, #10]
            /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
            J1939_EnqueueMessage(&_msg);
 80010bc:	463b      	mov	r3, r7
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa26 	bl	8000510 <J1939_EnqueueMessage>
            TP_RX_MSG.state = J1939_TP_RX_DATA_WAIT;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <J1939_read_DT_Packet+0x170>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            return;
 80010cc:	e049      	b.n	8001162 <J1939_read_DT_Packet+0x16a>
        }
        _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 80010ce:	2311      	movs	r3, #17
 80010d0:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = 2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = (TP_RX_MSG.packets_ok_num + 1);
 80010d6:	4b24      	ldr	r3, [pc, #144]	; (8001168 <J1939_read_DT_Packet+0x170>)
 80010d8:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80010dc:	3301      	adds	r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	0c1b      	lsrs	r3, r3, #16
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	72bb      	strb	r3, [r7, #10]

        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8001100:	463b      	mov	r3, r7
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa04 	bl	8000510 <J1939_EnqueueMessage>
        TP_RX_MSG.state = J1939_TP_RX_DATA_WAIT;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <J1939_read_DT_Packet+0x170>)
 800110a:	2202      	movs	r2, #2
 800110c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
        return;
 8001110:	e027      	b.n	8001162 <J1939_read_DT_Packet+0x16a>
    }
    else
    {
        /*Send the transmission normal end message, EndofMsgAck*/
        _msg.Mxe.Data[0] = J1939_EOMACK_CONTROL_BYTE;
 8001112:	2313      	movs	r3, #19
 8001114:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = (TP_RX_MSG.tp_rx_msg.byte_count & 0x00ff);
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <J1939_read_DT_Packet+0x170>)
 8001118:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 800111c:	b2db      	uxtb	r3, r3
 800111e:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = ((TP_RX_MSG.tp_rx_msg.byte_count >> 8) & 0x00ff);
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <J1939_read_DT_Packet+0x170>)
 8001122:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b29b      	uxth	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = TP_RX_MSG.packets_total;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <J1939_read_DT_Packet+0x170>)
 8001130:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8001134:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8001136:	23ff      	movs	r3, #255	; 0xff
 8001138:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	0c1b      	lsrs	r3, r3, #16
 800113e:	b2db      	uxtb	r3, r3
 8001140:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	b2db      	uxtb	r3, r3
 8001148:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	72bb      	strb	r3, [r7, #10]
        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f9dc 	bl	8000510 <J1939_EnqueueMessage>
        TP_RX_MSG.state = J1939_RX_DONE;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <J1939_read_DT_Packet+0x170>)
 800115a:	2204      	movs	r2, #4
 800115c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
        return;
 8001160:	bf00      	nop
    }
}
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000044 	.word	0x20000044

0800116c <J1939_TP_Poll>:
/**
* @note The heartbeat of the TP protocol, in order to meet the timing accuracy on the bus, poll once every 10ms J1939_TP_TX_RefreshCMTimer(10)\n
If you want a higher resolution, poll once every 1ms, but you need to change the following timing function J1939_TP_TX_RefreshCMTimer(1)
*/
void J1939_TP_Poll()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    if (J1939_TP_State_t == J1939_TP_NULL || J1939_TP_State_t == J1939_TP_OSBUSY)
 8001170:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <J1939_TP_Poll+0x144>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8099 	beq.w	80012ac <J1939_TP_Poll+0x140>
 800117a:	4b4d      	ldr	r3, [pc, #308]	; (80012b0 <J1939_TP_Poll+0x144>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b03      	cmp	r3, #3
 8001180:	f000 8094 	beq.w	80012ac <J1939_TP_Poll+0x140>
    {
        return;
    }
    if (J1939_TP_State_t == J1939_TP_RX)
 8001184:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <J1939_TP_Poll+0x144>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d13b      	bne.n	8001204 <J1939_TP_Poll+0x98>
    {

        switch (TP_RX_MSG.state)
 800118c:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <J1939_TP_Poll+0x148>)
 800118e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8001192:	2b04      	cmp	r3, #4
 8001194:	d832      	bhi.n	80011fc <J1939_TP_Poll+0x90>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <J1939_TP_Poll+0x30>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011fd 	.word	0x080011fd
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	080011b7 	.word	0x080011b7
 80011a8:	080011cd 	.word	0x080011cd
 80011ac:	080011d3 	.word	0x080011d3
        {
        case J1939_TP_RX_WAIT:;
            break;
        case J1939_TP_RX_READ_DATA:
            /*Send read data TP.CM_CTS and EndofMsgAck message*/
            J1939_read_DT_Packet();
 80011b0:	f7ff ff22 	bl	8000ff8 <J1939_read_DT_Packet>
            break;
 80011b4:	e025      	b.n	8001202 <J1939_TP_Poll+0x96>
        case J1939_TP_RX_DATA_WAIT:
            /*Waiting for the message transmitted by the TP.DT frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_RX_RefreshCMTimer(10))
 80011b6:	200a      	movs	r0, #10
 80011b8:	f7ff fef4 	bl	8000fa4 <J1939_TP_RX_RefreshCMTimer>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d11e      	bne.n	8001200 <J1939_TP_Poll+0x94>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_RX_MSG.state = J1939_TP_RX_ERROR;
 80011c2:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <J1939_TP_Poll+0x148>)
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            }
            break;
 80011ca:	e019      	b.n	8001200 <J1939_TP_Poll+0x94>
        case J1939_TP_RX_ERROR:
            J1939_TP_RX_Abort();
 80011cc:	f7ff fe7c 	bl	8000ec8 <J1939_TP_RX_Abort>

            break;
 80011d0:	e017      	b.n	8001202 <J1939_TP_Poll+0x96>
        case J1939_RX_DONE:
            TP_RX_MSG.packets_ok_num = 0;
 80011d2:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <J1939_TP_Poll+0x148>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            TP_RX_MSG.packets_total = 0;
 80011da:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <J1939_TP_Poll+0x148>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_RX_MSG.time = J1939_TP_T3;
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <J1939_TP_Poll+0x148>)
 80011e4:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80011e8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            TP_RX_MSG.state = J1939_TP_RX_WAIT;
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <J1939_TP_Poll+0x148>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            J1939_TP_State_t = J1939_TP_NULL;
 80011f4:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <J1939_TP_Poll+0x144>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
            break;
 80011fa:	e002      	b.n	8001202 <J1939_TP_Poll+0x96>
        default:
            break;
 80011fc:	bf00      	nop
 80011fe:	e056      	b.n	80012ae <J1939_TP_Poll+0x142>
            break;
 8001200:	bf00      	nop
        }
        return;
 8001202:	e054      	b.n	80012ae <J1939_TP_Poll+0x142>
    }
    if (J1939_TP_State_t == J1939_TP_TX)
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <J1939_TP_Poll+0x144>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d150      	bne.n	80012ae <J1939_TP_Poll+0x142>
    {

        switch (TP_TX_MSG.state)
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <J1939_TP_Poll+0x14c>)
 800120e:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8001212:	2b06      	cmp	r3, #6
 8001214:	d844      	bhi.n	80012a0 <J1939_TP_Poll+0x134>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <J1939_TP_Poll+0xb0>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	080012a1 	.word	0x080012a1
 8001220:	08001239 	.word	0x08001239
 8001224:	0800123f 	.word	0x0800123f
 8001228:	08001255 	.word	0x08001255
 800122c:	0800125b 	.word	0x0800125b
 8001230:	08001271 	.word	0x08001271
 8001234:	08001277 	.word	0x08001277
        case J1939_TP_TX_WAIT:
            /*There is no data to send*/
            break;
        case J1939_TP_TX_CM_START:
            /*Send the message transmitted by the TP.CM_RTS frame (refer to j1939-21)*/
            J1939_CM_Start();
 8001238:	f7ff fdbc 	bl	8000db4 <J1939_CM_Start>
            break;
 800123c:	e035      	b.n	80012aa <J1939_TP_Poll+0x13e>
        case J1939_TP_TX_CM_WAIT:
            /*Waiting for the message transmitted by the TP.CM_CTS frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_TX_RefreshCMTimer(10))
 800123e:	200a      	movs	r0, #10
 8001240:	f7ff fe80 	bl	8000f44 <J1939_TP_TX_RefreshCMTimer>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d12c      	bne.n	80012a4 <J1939_TP_Poll+0x138>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_TX_MSG.state = J1939_TP_TX_ERROR;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <J1939_TP_Poll+0x14c>)
 800124c:	2205      	movs	r2, #5
 800124e:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            }
            break;
 8001252:	e027      	b.n	80012a4 <J1939_TP_Poll+0x138>
        case J1939_TP_TX_DT:
            J1939_TP_DT_Packet_send();
 8001254:	f7ff fd02 	bl	8000c5c <J1939_TP_DT_Packet_send>
            break;
 8001258:	e027      	b.n	80012aa <J1939_TP_Poll+0x13e>
        case J1939_TP_WAIT_ACK:
            /*Waiting for the message transmitted by the TP.EndofMsgACK frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_TX_RefreshCMTimer(10))
 800125a:	200a      	movs	r0, #10
 800125c:	f7ff fe72 	bl	8000f44 <J1939_TP_TX_RefreshCMTimer>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d120      	bne.n	80012a8 <J1939_TP_Poll+0x13c>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_TX_MSG.state = J1939_TP_TX_ERROR;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <J1939_TP_Poll+0x14c>)
 8001268:	2205      	movs	r2, #5
 800126a:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            }
            break;
 800126e:	e01b      	b.n	80012a8 <J1939_TP_Poll+0x13c>
        case J1939_TP_TX_ERROR:
            J1939_TP_TX_Abort();
 8001270:	f7ff fdec 	bl	8000e4c <J1939_TP_TX_Abort>

            break;
 8001274:	e019      	b.n	80012aa <J1939_TP_Poll+0x13e>
        case J1939_TX_DONE:
            TP_TX_MSG.packets_request_num = 0;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <J1939_TP_Poll+0x14c>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_TX_MSG.packet_offset_p = 0;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <J1939_TP_Poll+0x14c>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.time = J1939_TP_T3;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <J1939_TP_Poll+0x14c>)
 8001288:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800128c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            TP_TX_MSG.state = J1939_TP_TX_WAIT;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <J1939_TP_Poll+0x14c>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            J1939_TP_State_t = J1939_TP_NULL;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <J1939_TP_Poll+0x144>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
            break;
 800129e:	e004      	b.n	80012aa <J1939_TP_Poll+0x13e>
        default:
            //The program will not run here, you can add a debug output
            break;
 80012a0:	bf00      	nop
 80012a2:	e004      	b.n	80012ae <J1939_TP_Poll+0x142>
            break;
 80012a4:	bf00      	nop
 80012a6:	e002      	b.n	80012ae <J1939_TP_Poll+0x142>
            break;
 80012a8:	bf00      	nop
        }
        return;
 80012aa:	e000      	b.n	80012ae <J1939_TP_Poll+0x142>
        return;
 80012ac:	bf00      	nop
    }
}
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000003d 	.word	0x2000003d
 80012b4:	20000044 	.word	0x20000044
 80012b8:	2000023c 	.word	0x2000023c

080012bc <J1939_TP_TX_Message>:
* @return RC_SUCCESS successfully opened the TP link and started to enter the sending process
* @return RC_CANNOTTRANSMIT cannot be sent because the TP protocol has established a virtual link and has not been disconnected
* @note TP protocol sending function
*/
j1939_int8_t J1939_TP_TX_Message(j1939_uint32_t PGN, j1939_uint8_t DA, j1939_uint8_t *data, j1939_uint16_t data_num)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	461a      	mov	r2, r3
 80012c8:	460b      	mov	r3, r1
 80012ca:	72fb      	strb	r3, [r7, #11]
 80012cc:	4613      	mov	r3, r2
 80012ce:	813b      	strh	r3, [r7, #8]
    j1939_uint16_t _byte_count = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	82fb      	strh	r3, [r7, #22]
    /*Get sending permission*/
    if (J1939_TP_State_t == J1939_TP_NULL)
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <J1939_TP_TX_Message+0xe0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d110      	bne.n	80012fe <J1939_TP_TX_Message+0x42>
    {
        J1939_TP_State_t = J1939_TP_TX;
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <J1939_TP_TX_Message+0xe0>)
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
    else
    {
        return RC_CANNOTTRANSMIT; //Cannot send, because the TP protocol has established a virtual link and has not been disconnected
    }

    TP_TX_MSG.tp_tx_msg.PGN = PGN;
 80012e2:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6013      	str	r3, [r2, #0]
    TP_TX_MSG.tp_tx_msg.SA = DA;
 80012e8:	4a2d      	ldr	r2, [pc, #180]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	f882 30f6 	strb.w	r3, [r2, #246]	; 0xf6
    TP_TX_MSG.tp_tx_msg.byte_count = data_num;
 80012f0:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 80012f2:	893b      	ldrh	r3, [r7, #8]
 80012f4:	f8a2 30f4 	strh.w	r3, [r2, #244]	; 0xf4
    for (_byte_count = 0; _byte_count < data_num; _byte_count++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	82fb      	strh	r3, [r7, #22]
 80012fc:	e00d      	b.n	800131a <J1939_TP_TX_Message+0x5e>
        return RC_CANNOTTRANSMIT; //Cannot send, because the TP protocol has established a virtual link and has not been disconnected
 80012fe:	2302      	movs	r3, #2
 8001300:	e045      	b.n	800138e <J1939_TP_TX_Message+0xd2>
    {
        TP_TX_MSG.tp_tx_msg.data[_byte_count] = data[_byte_count];
 8001302:	8afb      	ldrh	r3, [r7, #22]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	441a      	add	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	7811      	ldrb	r1, [r2, #0]
 800130c:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	711a      	strb	r2, [r3, #4]
    for (_byte_count = 0; _byte_count < data_num; _byte_count++)
 8001314:	8afb      	ldrh	r3, [r7, #22]
 8001316:	3301      	adds	r3, #1
 8001318:	82fb      	strh	r3, [r7, #22]
 800131a:	8afa      	ldrh	r2, [r7, #22]
 800131c:	893b      	ldrh	r3, [r7, #8]
 800131e:	429a      	cmp	r2, r3
 8001320:	d3ef      	bcc.n	8001302 <J1939_TP_TX_Message+0x46>
    }
    TP_TX_MSG.packet_offset_p = 0;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    TP_TX_MSG.packets_request_num = 0;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 800132c:	2200      	movs	r2, #0
 800132e:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_TX_MSG.packets_total = data_num / 7;
 8001332:	893a      	ldrh	r2, [r7, #8]
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <J1939_TP_TX_Message+0xe8>)
 8001336:	fba3 1302 	umull	r1, r3, r3, r2
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	0852      	lsrs	r2, r2, #1
 800133e:	4413      	add	r3, r2
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	b29b      	uxth	r3, r3
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 8001348:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    if ((data_num % 7) != 0)
 800134c:	893a      	ldrh	r2, [r7, #8]
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <J1939_TP_TX_Message+0xe8>)
 8001350:	fba3 1302 	umull	r1, r3, r3, r2
 8001354:	1ad1      	subs	r1, r2, r3
 8001356:	0849      	lsrs	r1, r1, #1
 8001358:	440b      	add	r3, r1
 800135a:	0899      	lsrs	r1, r3, #2
 800135c:	460b      	mov	r3, r1
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	1a5b      	subs	r3, r3, r1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b29b      	uxth	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <J1939_TP_TX_Message+0xbe>
    {
        TP_TX_MSG.packets_total++;
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 800136c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 8001376:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    }
    TP_TX_MSG.time = J1939_TP_T3;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 800137c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001380:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    //Trigger start CM_START
    TP_TX_MSG.state = J1939_TP_TX_CM_START;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <J1939_TP_TX_Message+0xe4>)
 8001386:	2201      	movs	r2, #1
 8001388:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    return RC_SUCCESS;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000003d 	.word	0x2000003d
 80013a0:	2000023c 	.word	0x2000023c
 80013a4:	24924925 	.word	0x24924925

080013a8 <J1939_Response>:
/**
* @note When receiving a PGN request, if there is a corresponding PGN in REQUEST_LIST, the PGN in REQUEST_LIST will be sent automatically. \n
  If not, a NACK will be sent; the response logic of this function, refer to J1939-21 page 17 Table 4
*/
void J1939_Response(const j1939_uint32_t PGN)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    J1939_MESSAGE _msg;

    /*Find available linked list items*/
    struct Request_List *_requestList = &REQUEST_LIST;
 80013b0:	4bbd      	ldr	r3, [pc, #756]	; (80016a8 <J1939_Response+0x300>)
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    while ((PGN != _requestList->PGN) )
 80013b4:	e043      	b.n	800143e <J1939_Response+0x96>
    {
        if (_requestList->next == J1939_NULL)
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d13c      	bne.n	8001438 <J1939_Response+0x90>
        {
            /*The original document stipulates that NACK cannot be responded to when the global request is not supported*/
            if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 80013be:	4bbb      	ldr	r3, [pc, #748]	; (80016ac <J1939_Response+0x304>)
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	2bff      	cmp	r3, #255	; 0xff
 80013c4:	f000 8168 	beq.w	8001698 <J1939_Response+0x2f0>
            {
                return;
            }
            if ((PGN & 0xFF00) >= 0xF000)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013ce:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 80013d2:	f080 8163 	bcs.w	800169c <J1939_Response+0x2f4>
            {
                return;
            }

            /*No corresponding PGN response is created, send a NACK to the bus*/
            _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	2206      	movs	r2, #6
 80013da:	f362 0384 	bfi	r3, r2, #2, #3
 80013de:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.DataPage = 0;
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	f36f 0300 	bfc	r3, #0, #1
 80013e6:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 80013e8:	23e8      	movs	r3, #232	; 0xe8
 80013ea:	737b      	strb	r3, [r7, #13]
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 80013ec:	4baf      	ldr	r3, [pc, #700]	; (80016ac <J1939_Response+0x304>)
 80013ee:	78db      	ldrb	r3, [r3, #3]
 80013f0:	73bb      	strb	r3, [r7, #14]
            _msg.Mxe.DataLength = 8;
 80013f2:	7c3b      	ldrb	r3, [r7, #16]
 80013f4:	2208      	movs	r2, #8
 80013f6:	f362 0303 	bfi	r3, r2, #0, #4
 80013fa:	743b      	strb	r3, [r7, #16]
            _msg.Mxe.SourceAddress = J1939_Address;
 80013fc:	4bac      	ldr	r3, [pc, #688]	; (80016b0 <J1939_Response+0x308>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	73fb      	strb	r3, [r7, #15]
            _msg.Mxe.Data[0] = J1939_NACK_CONTROL_BYTE;
 8001402:	2301      	movs	r3, #1
 8001404:	747b      	strb	r3, [r7, #17]
            _msg.Mxe.Data[1] = 0xFF;
 8001406:	23ff      	movs	r3, #255	; 0xff
 8001408:	74bb      	strb	r3, [r7, #18]
            _msg.Mxe.Data[2] = 0xFF;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	74fb      	strb	r3, [r7, #19]
            _msg.Mxe.Data[3] = 0xFF;
 800140e:	23ff      	movs	r3, #255	; 0xff
 8001410:	753b      	strb	r3, [r7, #20]
            _msg.Mxe.Data[4] = 0xFF;
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	757b      	strb	r3, [r7, #21]
            _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	75bb      	strb	r3, [r7, #22]
            _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	b2db      	uxtb	r3, r3
 8001422:	75fb      	strb	r3, [r7, #23]
            _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	0c1b      	lsrs	r3, r3, #16
 8001428:	b2db      	uxtb	r3, r3
 800142a:	763b      	strb	r3, [r7, #24]

            SendOneMessage((J1939_MESSAGE *)&_msg);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f84b 	bl	80004cc <SendOneMessage>
            return;
 8001436:	e134      	b.n	80016a2 <J1939_Response+0x2fa>
        }
        else
        {
            _requestList = _requestList->next;
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    while ((PGN != _requestList->PGN) )
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d1b6      	bne.n	80013b6 <J1939_Response+0xe>
        }
    }

    /*Call dataUPFun() function, mainly used for parameter group data update*/
    if (J1939_NULL != _requestList->update)
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <J1939_Response+0xae>
    {
        _requestList->update();
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4798      	blx	r3
    }

    /*Respond to request*/
    if (_requestList->lenght > 8)
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	889b      	ldrh	r3, [r3, #4]
 800145a:	2b08      	cmp	r3, #8
 800145c:	d97a      	bls.n	8001554 <J1939_Response+0x1ac>
    {
        /*An acknowledgment response multi-frame (non-broadcast multi-frame)*/
        if (RC_SUCCESS != J1939_TP_TX_Message(_requestList->PGN, OneMessage.Mxe.SourceAddress, _requestList->data, _requestList->lenght))
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	6898      	ldr	r0, [r3, #8]
 8001462:	4b92      	ldr	r3, [pc, #584]	; (80016ac <J1939_Response+0x304>)
 8001464:	78d9      	ldrb	r1, [r3, #3]
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	f7ff ff25 	bl	80012bc <J1939_TP_TX_Message>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d035      	beq.n	80014e4 <J1939_Response+0x13c>
        {
            /*The original document stipulates that NACK cannot be responded to when the global request is not supported*/
            if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 8001478:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <J1939_Response+0x304>)
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	2bff      	cmp	r3, #255	; 0xff
 800147e:	f000 810f 	beq.w	80016a0 <J1939_Response+0x2f8>
            {
                return;
            }

            /*If the long frame is not sent successfully*/
            _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 8001482:	7b3b      	ldrb	r3, [r7, #12]
 8001484:	2206      	movs	r2, #6
 8001486:	f362 0384 	bfi	r3, r2, #2, #3
 800148a:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.DataPage = 0;
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	f36f 0300 	bfc	r3, #0, #1
 8001492:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 8001494:	23e8      	movs	r3, #232	; 0xe8
 8001496:	737b      	strb	r3, [r7, #13]
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 8001498:	4b84      	ldr	r3, [pc, #528]	; (80016ac <J1939_Response+0x304>)
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	73bb      	strb	r3, [r7, #14]
            _msg.Mxe.DataLength = 8;
 800149e:	7c3b      	ldrb	r3, [r7, #16]
 80014a0:	2208      	movs	r2, #8
 80014a2:	f362 0303 	bfi	r3, r2, #0, #4
 80014a6:	743b      	strb	r3, [r7, #16]
            _msg.Mxe.SourceAddress = J1939_Address;
 80014a8:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <J1939_Response+0x308>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	73fb      	strb	r3, [r7, #15]
            _msg.Mxe.Data[0] = J1939_ACCESS_DENIED_CONTROL_BYTE;
 80014ae:	2302      	movs	r3, #2
 80014b0:	747b      	strb	r3, [r7, #17]
            _msg.Mxe.Data[1] = 0xFF;
 80014b2:	23ff      	movs	r3, #255	; 0xff
 80014b4:	74bb      	strb	r3, [r7, #18]
            _msg.Mxe.Data[2] = 0xFF;
 80014b6:	23ff      	movs	r3, #255	; 0xff
 80014b8:	74fb      	strb	r3, [r7, #19]
            _msg.Mxe.Data[3] = 0xFF;
 80014ba:	23ff      	movs	r3, #255	; 0xff
 80014bc:	753b      	strb	r3, [r7, #20]
            _msg.Mxe.Data[4] = 0xFF;
 80014be:	23ff      	movs	r3, #255	; 0xff
 80014c0:	757b      	strb	r3, [r7, #21]
            _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	75bb      	strb	r3, [r7, #22]
            _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	75fb      	strb	r3, [r7, #23]
            _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	763b      	strb	r3, [r7, #24]

            SendOneMessage((J1939_MESSAGE *)&_msg);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe fff5 	bl	80004cc <SendOneMessage>
            return;
 80014e2:	e0de      	b.n	80016a2 <J1939_Response+0x2fa>
        }

        /*An acknowledgment response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 80014e4:	7b3b      	ldrb	r3, [r7, #12]
 80014e6:	2206      	movs	r2, #6
 80014e8:	f362 0384 	bfi	r3, r2, #2, #3
 80014ec:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = 0;
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	f36f 0300 	bfc	r3, #0, #1
 80014f4:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 80014f6:	23e8      	movs	r3, #232	; 0xe8
 80014f8:	737b      	strb	r3, [r7, #13]
        /*The original document stipulates that the global request responds to the global*/
        if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 80014fa:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <J1939_Response+0x304>)
 80014fc:	789b      	ldrb	r3, [r3, #2]
 80014fe:	2bff      	cmp	r3, #255	; 0xff
 8001500:	d102      	bne.n	8001508 <J1939_Response+0x160>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 8001502:	23ff      	movs	r3, #255	; 0xff
 8001504:	73bb      	strb	r3, [r7, #14]
 8001506:	e002      	b.n	800150e <J1939_Response+0x166>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 8001508:	4b68      	ldr	r3, [pc, #416]	; (80016ac <J1939_Response+0x304>)
 800150a:	78db      	ldrb	r3, [r3, #3]
 800150c:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = 8;
 800150e:	7c3b      	ldrb	r3, [r7, #16]
 8001510:	2208      	movs	r2, #8
 8001512:	f362 0303 	bfi	r3, r2, #0, #4
 8001516:	743b      	strb	r3, [r7, #16]
        _msg.Mxe.SourceAddress = J1939_Address;
 8001518:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <J1939_Response+0x308>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	73fb      	strb	r3, [r7, #15]
        _msg.Mxe.Data[0] = J1939_ACK_CONTROL_BYTE;
 800151e:	2300      	movs	r3, #0
 8001520:	747b      	strb	r3, [r7, #17]
        _msg.Mxe.Data[1] = 0xFF;
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	74bb      	strb	r3, [r7, #18]
        _msg.Mxe.Data[2] = 0xFF;
 8001526:	23ff      	movs	r3, #255	; 0xff
 8001528:	74fb      	strb	r3, [r7, #19]
        _msg.Mxe.Data[3] = 0xFF;
 800152a:	23ff      	movs	r3, #255	; 0xff
 800152c:	753b      	strb	r3, [r7, #20]
        _msg.Mxe.Data[4] = 0xFF;
 800152e:	23ff      	movs	r3, #255	; 0xff
 8001530:	757b      	strb	r3, [r7, #21]
        _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	75bb      	strb	r3, [r7, #22]
        _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b2db      	uxtb	r3, r3
 800153e:	75fb      	strb	r3, [r7, #23]
        _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	0c1b      	lsrs	r3, r3, #16
 8001544:	b2db      	uxtb	r3, r3
 8001546:	763b      	strb	r3, [r7, #24]
        SendOneMessage((J1939_MESSAGE *)&_msg);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffbd 	bl	80004cc <SendOneMessage>
 8001552:	e0a6      	b.n	80016a2 <J1939_Response+0x2fa>
    }
    else
    {

        /*An acknowledgment response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 8001554:	7b3b      	ldrb	r3, [r7, #12]
 8001556:	2206      	movs	r2, #6
 8001558:	f362 0384 	bfi	r3, r2, #2, #3
 800155c:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = 0;
 800155e:	7b3b      	ldrb	r3, [r7, #12]
 8001560:	f36f 0300 	bfc	r3, #0, #1
 8001564:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 8001566:	23e8      	movs	r3, #232	; 0xe8
 8001568:	737b      	strb	r3, [r7, #13]
        _msg.Mxe.SourceAddress = J1939_Address;
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <J1939_Response+0x308>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	73fb      	strb	r3, [r7, #15]
        /*The original document stipulates that the global request responds to the global*/
        if ((OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS) || ((PGN & 0xFF00) >= 0xF000))
 8001570:	4b4e      	ldr	r3, [pc, #312]	; (80016ac <J1939_Response+0x304>)
 8001572:	789b      	ldrb	r3, [r3, #2]
 8001574:	2bff      	cmp	r3, #255	; 0xff
 8001576:	d005      	beq.n	8001584 <J1939_Response+0x1dc>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800157e:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 8001582:	d302      	bcc.n	800158a <J1939_Response+0x1e2>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 8001584:	23ff      	movs	r3, #255	; 0xff
 8001586:	73bb      	strb	r3, [r7, #14]
 8001588:	e002      	b.n	8001590 <J1939_Response+0x1e8>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 800158a:	4b48      	ldr	r3, [pc, #288]	; (80016ac <J1939_Response+0x304>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = 8;
 8001590:	7c3b      	ldrb	r3, [r7, #16]
 8001592:	2208      	movs	r2, #8
 8001594:	f362 0303 	bfi	r3, r2, #0, #4
 8001598:	743b      	strb	r3, [r7, #16]
        _msg.Mxe.SourceAddress = J1939_Address;
 800159a:	4b45      	ldr	r3, [pc, #276]	; (80016b0 <J1939_Response+0x308>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	73fb      	strb	r3, [r7, #15]
        _msg.Mxe.Data[0] = J1939_ACK_CONTROL_BYTE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	747b      	strb	r3, [r7, #17]
        _msg.Mxe.Data[1] = 0xFF;
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	74bb      	strb	r3, [r7, #18]
        _msg.Mxe.Data[2] = 0xFF;
 80015a8:	23ff      	movs	r3, #255	; 0xff
 80015aa:	74fb      	strb	r3, [r7, #19]
        _msg.Mxe.Data[3] = 0xFF;
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	753b      	strb	r3, [r7, #20]
        _msg.Mxe.Data[4] = 0xFF;
 80015b0:	23ff      	movs	r3, #255	; 0xff
 80015b2:	757b      	strb	r3, [r7, #21]
        _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	75bb      	strb	r3, [r7, #22]
        _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	75fb      	strb	r3, [r7, #23]
        _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	0c1b      	lsrs	r3, r3, #16
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	763b      	strb	r3, [r7, #24]
        SendOneMessage((J1939_MESSAGE *)&_msg);
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff7c 	bl	80004cc <SendOneMessage>

        /*Return a single frame of confirmation response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 80015d4:	7b3b      	ldrb	r3, [r7, #12]
 80015d6:	2206      	movs	r2, #6
 80015d8:	f362 0384 	bfi	r3, r2, #2, #3
 80015dc:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = (((_requestList->PGN) >> 16) & 0x1);
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	0c1b      	lsrs	r3, r3, #16
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	7b3b      	ldrb	r3, [r7, #12]
 80015ec:	f362 0300 	bfi	r3, r2, #0, #1
 80015f0:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = ((_requestList->PGN) >> 8) & 0xFF;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	737b      	strb	r3, [r7, #13]
        _msg.Mxe.SourceAddress = J1939_Address;
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <J1939_Response+0x308>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	73fb      	strb	r3, [r7, #15]
        /*The original document stipulates that the global request responds to the global*/
        if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <J1939_Response+0x304>)
 8001604:	789b      	ldrb	r3, [r3, #2]
 8001606:	2bff      	cmp	r3, #255	; 0xff
 8001608:	d102      	bne.n	8001610 <J1939_Response+0x268>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	73bb      	strb	r3, [r7, #14]
 800160e:	e002      	b.n	8001616 <J1939_Response+0x26e>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 8001610:	4b26      	ldr	r3, [pc, #152]	; (80016ac <J1939_Response+0x304>)
 8001612:	78db      	ldrb	r3, [r3, #3]
 8001614:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = _requestList->lenght;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	889b      	ldrh	r3, [r3, #4]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	b2da      	uxtb	r2, r3
 8001620:	7c3b      	ldrb	r3, [r7, #16]
 8001622:	f362 0303 	bfi	r3, r2, #0, #4
 8001626:	743b      	strb	r3, [r7, #16]
        {
            j1939_uint8_t _i = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            for (_i = 0; _i < (_requestList->lenght); _i++)
 800162e:	2300      	movs	r3, #0
 8001630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001634:	e011      	b.n	800165a <J1939_Response+0x2b2>
            {
                _msg.Mxe.Data[_i] = _requestList->data[_i];
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800163e:	441a      	add	r2, r3
 8001640:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800164a:	440b      	add	r3, r1
 800164c:	f803 2c17 	strb.w	r2, [r3, #-23]
            for (_i = 0; _i < (_requestList->lenght); _i++)
 8001650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001654:	3301      	adds	r3, #1
 8001656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800165a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800165e:	b29a      	uxth	r2, r3
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	889b      	ldrh	r3, [r3, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3e6      	bcc.n	8001636 <J1939_Response+0x28e>
            }
            for (; _i < 8; _i++)
 8001668:	e00c      	b.n	8001684 <J1939_Response+0x2dc>
            {
                _msg.Mxe.Data[_i] = 0xFF;
 800166a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800166e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001672:	4413      	add	r3, r2
 8001674:	22ff      	movs	r2, #255	; 0xff
 8001676:	f803 2c17 	strb.w	r2, [r3, #-23]
            for (; _i < 8; _i++)
 800167a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800167e:	3301      	adds	r3, #1
 8001680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001688:	2b07      	cmp	r3, #7
 800168a:	d9ee      	bls.n	800166a <J1939_Response+0x2c2>
            }
        }
        SendOneMessage((J1939_MESSAGE *)&_msg);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff1b 	bl	80004cc <SendOneMessage>
 8001696:	e004      	b.n	80016a2 <J1939_Response+0x2fa>
                return;
 8001698:	bf00      	nop
 800169a:	e002      	b.n	80016a2 <J1939_Response+0x2fa>
                return;
 800169c:	bf00      	nop
 800169e:	e000      	b.n	80016a2 <J1939_Response+0x2fa>
                return;
 80016a0:	bf00      	nop
    }
}
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200003b4 	.word	0x200003b4
 80016ac:	2000014c 	.word	0x2000014c
 80016b0:	2000014a 	.word	0x2000014a

080016b4 <J1939_SetAddressFilter>:
//extern CAN_RxHeaderTypeDef txhead;

//extern CAN_NODE Can_Node;    // CAN hardware selection

void J1939_SetAddressFilter()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

	can_fil_config();
 80016b8:	f000 f8e0 	bl	800187c <can_fil_config>

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <J1939_CAN_Transmit>:
		First write the data in the MsgPtr passed into the function to the CAN structure, and then call the CAN driver's sending function
		By default, it supports the sending and receiving of 4 CAN hardware. If there are less than 4 channels, you only need to configure the corresponding Can_Node switch code area,
		Others (Select_CAN_NODE) ​​remain unchanged. Just return directly (break).
*/
void  J1939_CAN_Transmit(J1939_MESSAGE *MsgPtr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	uint32_t mailbox;
			/* Load the 29-bit ID of the first CAN hardware */
								can_id.dummy=0;
 80016c8:	4a25      	ldr	r2, [pc, #148]	; (8001760 <J1939_CAN_Transmit+0xa0>)
 80016ca:	78d3      	ldrb	r3, [r2, #3]
 80016cc:	f36f 1347 	bfc	r3, #5, #3
 80016d0:	70d3      	strb	r3, [r2, #3]
								can_id.Prior=(MsgPtr->Mxe).Priority;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80016da:	b2d9      	uxtb	r1, r3
 80016dc:	4a20      	ldr	r2, [pc, #128]	; (8001760 <J1939_CAN_Transmit+0xa0>)
 80016de:	78d3      	ldrb	r3, [r2, #3]
 80016e0:	f361 0384 	bfi	r3, r1, #2, #3
 80016e4:	70d3      	strb	r3, [r2, #3]
//								can_id.Reserved=(MsgPtr->Mxe).Reserve;
								can_id.Reserved=0;
 80016e6:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <J1939_CAN_Transmit+0xa0>)
 80016e8:	78d3      	ldrb	r3, [r2, #3]
 80016ea:	f36f 0341 	bfc	r3, #1, #1
 80016ee:	70d3      	strb	r3, [r2, #3]
								can_id.Data_Page=(MsgPtr->Mxe).DataPage;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016f8:	b2d9      	uxtb	r1, r3
 80016fa:	4a19      	ldr	r2, [pc, #100]	; (8001760 <J1939_CAN_Transmit+0xa0>)
 80016fc:	78d3      	ldrb	r3, [r2, #3]
 80016fe:	f361 0300 	bfi	r3, r1, #0, #1
 8001702:	70d3      	strb	r3, [r2, #3]
								can_id.PDU_Format=(MsgPtr->Mxe).PDUFormat;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	785a      	ldrb	r2, [r3, #1]
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <J1939_CAN_Transmit+0xa0>)
 800170a:	709a      	strb	r2, [r3, #2]
								can_id.PDU_Specific=(MsgPtr->Mxe).PDUSpecific;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	789a      	ldrb	r2, [r3, #2]
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <J1939_CAN_Transmit+0xa0>)
 8001712:	705a      	strb	r2, [r3, #1]
								can_id.SA=(MsgPtr->Mxe).SourceAddress;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	78da      	ldrb	r2, [r3, #3]
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <J1939_CAN_Transmit+0xa0>)
 800171a:	701a      	strb	r2, [r3, #0]


								uint32_t *extid = (uint32_t*)(&can_id);
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <J1939_CAN_Transmit+0xa0>)
 800171e:	617b      	str	r3, [r7, #20]
								uint32_t value = *extid;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	613b      	str	r3, [r7, #16]
								//can_tx(value);

//			txhead.ExtId=0x06;
								//txhead.StdId=0x05;

								txhead.ExtId=value;
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <J1939_CAN_Transmit+0xa4>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6053      	str	r3, [r2, #4]
								txhead.IDE=CAN_ID_EXT;
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <J1939_CAN_Transmit+0xa4>)
 800172e:	2204      	movs	r2, #4
 8001730:	609a      	str	r2, [r3, #8]

			/* CAN hardware load data length */
			txhead.DLC=(MsgPtr->Mxe).DataLength;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <J1939_CAN_Transmit+0xa4>)
 8001740:	611a      	str	r2, [r3, #16]
			/* CAN hardware load data */
			//*MsgPtr->Array=message;
			/* CAN hardware load RTR */
			txhead.RTR=CAN_RTR_DATA;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <J1939_CAN_Transmit+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
			// CAN hardware starts to send data

			HAL_CAN_AddTxMessage(&hcan1,&txhead,(MsgPtr->Mxe).Data, &mailbox);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	1d5a      	adds	r2, r3, #5
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4904      	ldr	r1, [pc, #16]	; (8001764 <J1939_CAN_Transmit+0xa4>)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <J1939_CAN_Transmit+0xa8>)
 8001754:	f001 fe54 	bl	8003400 <HAL_CAN_AddTxMessage>

}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000034c 	.word	0x2000034c
 8001764:	200005a0 	.word	0x200005a0
 8001768:	20000504 	.word	0x20000504

0800176c <J1939_CAN_Receive>:
		By default, it supports the sending and receiving of 4 CAN hardware. If there are less than 4 channels, you only need to configure the corresponding Can_Node switch code area,
		Others (Select_CAN_NODE) ​​remain unchanged. Just return directly (return 0)
*/

int J1939_CAN_Receive(J1939_MESSAGE *MsgPtr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&rxhead, arr) == HAL_OK) // Judge whether there is data coming in CAN hardware 1
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <J1939_CAN_Receive+0x104>)
 8001776:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <J1939_CAN_Receive+0x108>)
 8001778:	2100      	movs	r1, #0
 800177a:	483f      	ldr	r0, [pc, #252]	; (8001878 <J1939_CAN_Receive+0x10c>)
 800177c:	f001 ff1b 	bl	80035b6 <HAL_CAN_GetRxMessage>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d16e      	bne.n	8001864 <J1939_CAN_Receive+0xf8>
							{
								//HAL_UART_Transmit(&huart3,"msg_from node_1 in reception\n\r", 30, 1000);
							    	//Error_Handler();
								// Your code, after reading the data from CAN hardware 1, store it in MsgPtr
								uint8_t cc;
								(MsgPtr->Mxe).DataPage=0;
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	7813      	ldrb	r3, [r2, #0]
 800178a:	f36f 0300 	bfc	r3, #0, #1
 800178e:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).Res=0;
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	7813      	ldrb	r3, [r2, #0]
 8001794:	f36f 0341 	bfc	r3, #1, #1
 8001798:	7013      	strb	r3, [r2, #0]
								cc=(uint8_t)((rxhead.ExtId)>>24);
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <J1939_CAN_Receive+0x108>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	0e1b      	lsrs	r3, r3, #24
 80017a0:	73fb      	strb	r3, [r7, #15]
								(MsgPtr->Mxe).Priority=(uint8_t)((rxhead.ExtId)>>26);
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <J1939_CAN_Receive+0x108>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0e9b      	lsrs	r3, r3, #26
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	b2d9      	uxtb	r1, r3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	7813      	ldrb	r3, [r2, #0]
 80017b2:	f361 0384 	bfi	r3, r1, #2, #3
 80017b6:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).Reserve=0;
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	7813      	ldrb	r3, [r2, #0]
 80017bc:	f36f 1347 	bfc	r3, #5, #3
 80017c0:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).PDUFormat=(uint8_t)((rxhead.ExtId)>>16);
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <J1939_CAN_Receive+0x108>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	0c1b      	lsrs	r3, r3, #16
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	705a      	strb	r2, [r3, #1]
								(MsgPtr->Mxe).PDUSpecific=(uint8_t)((rxhead.ExtId)>>8);
 80017ce:	4b29      	ldr	r3, [pc, #164]	; (8001874 <J1939_CAN_Receive+0x108>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	709a      	strb	r2, [r3, #2]
								if((MsgPtr->Mxe).PDUFormat<=239)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	2bef      	cmp	r3, #239	; 0xef
 80017e0:	d805      	bhi.n	80017ee <J1939_CAN_Receive+0x82>
								{
									if ((MsgPtr->Mxe).PDUSpecific!=J1939_STARTING_ADDRESS_1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	2b11      	cmp	r3, #17
 80017e8:	d001      	beq.n	80017ee <J1939_CAN_Receive+0x82>
									{
										return 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e03b      	b.n	8001866 <J1939_CAN_Receive+0xfa>
									}
								}
								(MsgPtr->Mxe).SourceAddress=(uint8_t)(rxhead.ExtId);
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <J1939_CAN_Receive+0x108>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	70da      	strb	r2, [r3, #3]
								(MsgPtr->Mxe).RTR=rxhead.RTR;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <J1939_CAN_Receive+0x108>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	b2d9      	uxtb	r1, r3
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	7913      	ldrb	r3, [r2, #4]
 8001806:	f361 1307 	bfi	r3, r1, #4, #4
 800180a:	7113      	strb	r3, [r2, #4]
								(MsgPtr->Mxe).DataLength=rxhead.DLC;
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <J1939_CAN_Receive+0x108>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	b2d9      	uxtb	r1, r3
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	7913      	ldrb	r3, [r2, #4]
 800181a:	f361 0303 	bfi	r3, r1, #0, #4
 800181e:	7113      	strb	r3, [r2, #4]

								 (MsgPtr->Mxe).Data[0]=arr[0];
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <J1939_CAN_Receive+0x104>)
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	715a      	strb	r2, [r3, #5]
								 (MsgPtr->Mxe).Data[1]=arr[1];
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <J1939_CAN_Receive+0x104>)
 800182a:	785a      	ldrb	r2, [r3, #1]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	719a      	strb	r2, [r3, #6]
								 (MsgPtr->Mxe).Data[2]=arr[2];
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <J1939_CAN_Receive+0x104>)
 8001832:	789a      	ldrb	r2, [r3, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	71da      	strb	r2, [r3, #7]
								 (MsgPtr->Mxe).Data[3]=arr[3];
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <J1939_CAN_Receive+0x104>)
 800183a:	78da      	ldrb	r2, [r3, #3]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	721a      	strb	r2, [r3, #8]
								 (MsgPtr->Mxe).Data[4]=arr[4];
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <J1939_CAN_Receive+0x104>)
 8001842:	791a      	ldrb	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	725a      	strb	r2, [r3, #9]
								 (MsgPtr->Mxe).Data[5]=arr[5];
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <J1939_CAN_Receive+0x104>)
 800184a:	795a      	ldrb	r2, [r3, #5]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	729a      	strb	r2, [r3, #10]
								 (MsgPtr->Mxe).Data[6]=arr[6];
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <J1939_CAN_Receive+0x104>)
 8001852:	799a      	ldrb	r2, [r3, #6]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	72da      	strb	r2, [r3, #11]
								 (MsgPtr->Mxe).Data[7]=arr[7];
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <J1939_CAN_Receive+0x104>)
 800185a:	79da      	ldrb	r2, [r3, #7]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	731a      	strb	r2, [r3, #12]

								return  1 ;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <J1939_CAN_Receive+0xfa>
							}


	return  0 ; // No message
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200003d4 	.word	0x200003d4
 8001874:	20000484 	.word	0x20000484
 8001878:	20000504 	.word	0x20000504

0800187c <can_fil_config>:

#include "J1939_Config.H"


void can_fil_config()
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
		fil.FilterIdHigh=0x0000;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <can_fil_config+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
	  	fil.FilterIdLow=0x0000;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <can_fil_config+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
	  	fil.FilterMaskIdHigh=0x0000;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <can_fil_config+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
	  	fil.FilterMaskIdLow=0x0000;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <can_fil_config+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
	  	fil.FilterFIFOAssignment=0;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <can_fil_config+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
	  	fil.FilterBank=0;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <can_fil_config+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
	  	fil.FilterMode=CAN_FILTERMODE_IDMASK;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <can_fil_config+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
	  	fil.FilterScale=CAN_FILTERSCALE_32BIT;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <can_fil_config+0x64>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	61da      	str	r2, [r3, #28]
	  	fil.FilterActivation=CAN_FILTER_ENABLE;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <can_fil_config+0x64>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	621a      	str	r2, [r3, #32]
	  	fil.SlaveStartFilterBank=0;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <can_fil_config+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24

	  	if (HAL_CAN_ConfigFilter(&hcan1, &fil) != HAL_OK)
 80018bc:	4908      	ldr	r1, [pc, #32]	; (80018e0 <can_fil_config+0x64>)
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <can_fil_config+0x68>)
 80018c0:	f001 fc90 	bl	80031e4 <HAL_CAN_ConfigFilter>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <can_fil_config+0x60>
	  		    {
	  		        /* Filter configuration Error */
	  		        HAL_UART_Transmit(&huart3,"error in configfil\n\r", 20, 1000);
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	2214      	movs	r2, #20
 80018d0:	4905      	ldr	r1, [pc, #20]	; (80018e8 <can_fil_config+0x6c>)
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <can_fil_config+0x70>)
 80018d4:	f004 fb26 	bl	8005f24 <HAL_UART_Transmit>
	  		        Error_Handler();
 80018d8:	f000 fc38 	bl	800214c <Error_Handler>
	  		    }
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000574 	.word	0x20000574
 80018e4:	20000504 	.word	0x20000504
 80018e8:	08006844 	.word	0x08006844
 80018ec:	200003fc 	.word	0x200003fc

080018f0 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

	HAL_UART_Transmit(&huart3, "txcalbckM0\n\r", 25, 1000);
 80018f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fc:	2219      	movs	r2, #25
 80018fe:	4907      	ldr	r1, [pc, #28]	; (800191c <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <HAL_CAN_TxMailbox0CompleteCallback+0x30>)
 8001902:	f004 fb0f 	bl	8005f24 <HAL_UART_Transmit>
	memset(mssg,0,25);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2219      	movs	r2, #25
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f004 ff84 	bl	800681c <memset>


}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	; 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800685c 	.word	0x0800685c
 8001920:	200003fc 	.word	0x200003fc

08001924 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)

{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

		HAL_UART_Transmit(&huart3, "txcalbckM1\n\r", 25, 1000);
 800192c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001930:	2219      	movs	r2, #25
 8001932:	4907      	ldr	r1, [pc, #28]	; (8001950 <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_CAN_TxMailbox1CompleteCallback+0x30>)
 8001936:	f004 faf5 	bl	8005f24 <HAL_UART_Transmit>
		memset(mssg,0,25);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2219      	movs	r2, #25
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f004 ff6a 	bl	800681c <memset>

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	0800686c 	.word	0x0800686c
 8001954:	200003fc 	.word	0x200003fc

08001958 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

		HAL_UART_Transmit(&huart3, "txcalbckM2\n\r", 25, 1000);
 8001960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001964:	2219      	movs	r2, #25
 8001966:	4907      	ldr	r1, [pc, #28]	; (8001984 <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <HAL_CAN_TxMailbox2CompleteCallback+0x30>)
 800196a:	f004 fadb 	bl	8005f24 <HAL_UART_Transmit>
		memset(mssg,0,25);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2219      	movs	r2, #25
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f004 ff50 	bl	800681c <memset>

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	0800687c 	.word	0x0800687c
 8001988:	200003fc 	.word	0x200003fc

0800198c <HAL_CAN_RxFifo0MsgPendingCallback>:
//  		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
//}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&rxhead, arr) != HAL_OK)
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001998:	2100      	movs	r1, #0
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800199c:	f001 fe0b 	bl	80035b6 <HAL_CAN_GetRxMessage>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d008      	beq.n	80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
    {

    	HAL_UART_Transmit(&huart3,"error in reception\n\r", 20, 1000);
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	2214      	movs	r2, #20
 80019ac:	4908      	ldr	r1, [pc, #32]	; (80019d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80019ae:	4809      	ldr	r0, [pc, #36]	; (80019d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80019b0:	f004 fab8 	bl	8005f24 <HAL_UART_Transmit>
    	Error_Handler();
 80019b4:	f000 fbca 	bl	800214c <Error_Handler>
    }
	J1939_ReceiveMessages();
 80019b8:	f7fe fea0 	bl	80006fc <J1939_ReceiveMessages>
	 //readMsg();

}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200003d4 	.word	0x200003d4
 80019c8:	20000484 	.word	0x20000484
 80019cc:	20000504 	.word	0x20000504
 80019d0:	0800688c 	.word	0x0800688c
 80019d4:	200003fc 	.word	0x200003fc

080019d8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

			HAL_UART_Transmit(&huart3, "callbck_error\n\r", 25, 1000);
 80019e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e4:	2219      	movs	r2, #25
 80019e6:	4907      	ldr	r1, [pc, #28]	; (8001a04 <HAL_CAN_ErrorCallback+0x2c>)
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <HAL_CAN_ErrorCallback+0x30>)
 80019ea:	f004 fa9b 	bl	8005f24 <HAL_UART_Transmit>
			memset(mssg,0,25);
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2219      	movs	r2, #25
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 ff10 	bl	800681c <memset>

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	080068a4 	.word	0x080068a4
 8001a08:	200003fc 	.word	0x200003fc

08001a0c <sendMsg_KEYINFO>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendMsg_KEYINFO(J1939_MESSAGE *Message)
{
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

	J1939_MESSAGE _msgKEYINFO;
	_msgKEYINFO=*Message;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f107 040c 	add.w	r4, r7, #12
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	6023      	str	r3, [r4, #0]

	//uint8_t buf[]="2";
	_msgKEYINFO.Mxe.DataPage = 0;
 8001a24:	7b3b      	ldrb	r3, [r7, #12]
 8001a26:	f36f 0300 	bfc	r3, #0, #1
 8001a2a:	733b      	strb	r3, [r7, #12]
	_msgKEYINFO.Mxe.Priority = 0x01;
 8001a2c:	7b3b      	ldrb	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f362 0384 	bfi	r3, r2, #2, #3
 8001a34:	733b      	strb	r3, [r7, #12]
	_msgKEYINFO.Mxe.DestinationAddress = 0x33;//changed from 33 to 31//destination is all
 8001a36:	2333      	movs	r3, #51	; 0x33
 8001a38:	73bb      	strb	r3, [r7, #14]
	_msgKEYINFO.Mxe.DataLength = 8;
 8001a3a:	7c3b      	ldrb	r3, [r7, #16]
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	f362 0303 	bfi	r3, r2, #0, #4
 8001a42:	743b      	strb	r3, [r7, #16]
	_msgKEYINFO.Mxe.PDUFormat = 0xf1;
 8001a44:	23f1      	movs	r3, #241	; 0xf1
 8001a46:	737b      	strb	r3, [r7, #13]
	_msgKEYINFO.Mxe.SourceAddress = 0x33;
 8001a48:	2333      	movs	r3, #51	; 0x33
 8001a4a:	73fb      	strb	r3, [r7, #15]
	//	_msgKEYINFO.Mxe.Data[5] = 0;
	//	_msgKEYINFO.Mxe.Data[6] = 0;
	//	_msgKEYINFO.Mxe.Data[7] = 'k';

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message(&_msgKEYINFO)!= RC_SUCCESS);
 8001a4c:	bf00      	nop
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fda4 	bl	80005a0 <J1939_Send_Message>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f7      	bne.n	8001a4e <sendMsg_KEYINFO+0x42>

	//HAL_UART_Transmit(&huart3,"send msg from keyinfo\r\n", 30, 1000);
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bdb0      	pop	{r4, r5, r7, pc}

08001a68 <sendMsg_MOTORCONTROLLERCOMMANDS>:


void sendMsg_MOTORCONTROLLERCOMMANDS(J1939_MESSAGE *Message)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	J1939_MESSAGE _msgMOTORCONTROLLER_COMMANDS;
	_msgMOTORCONTROLLER_COMMANDS=*Message;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f107 040c 	add.w	r4, r7, #12
 8001a76:	461d      	mov	r5, r3
 8001a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	6023      	str	r3, [r4, #0]


	//uint8_t buf[]="2";
	_msgMOTORCONTROLLER_COMMANDS.Mxe.DataPage = 0;
 8001a80:	7b3b      	ldrb	r3, [r7, #12]
 8001a82:	f36f 0300 	bfc	r3, #0, #1
 8001a86:	733b      	strb	r3, [r7, #12]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.Priority = 0x03;
 8001a88:	7b3b      	ldrb	r3, [r7, #12]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	f362 0384 	bfi	r3, r2, #2, #3
 8001a90:	733b      	strb	r3, [r7, #12]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.DestinationAddress = 0x11;
 8001a92:	2311      	movs	r3, #17
 8001a94:	73bb      	strb	r3, [r7, #14]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.DataLength = 8;
 8001a96:	7c3b      	ldrb	r3, [r7, #16]
 8001a98:	2208      	movs	r2, #8
 8001a9a:	f362 0303 	bfi	r3, r2, #0, #4
 8001a9e:	743b      	strb	r3, [r7, #16]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.PDUFormat = 0x17;
 8001aa0:	2317      	movs	r3, #23
 8001aa2:	737b      	strb	r3, [r7, #13]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.SourceAddress = 0x33;
 8001aa4:	2333      	movs	r3, #51	; 0x33
 8001aa6:	73fb      	strb	r3, [r7, #15]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.PGN=0x1700;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	767b      	strb	r3, [r7, #25]
 8001aac:	2300      	movs	r3, #0
 8001aae:	f043 0317 	orr.w	r3, r3, #23
 8001ab2:	76bb      	strb	r3, [r7, #26]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	76fb      	strb	r3, [r7, #27]
	//	_msgMOTORCONTROLLER_COMMANDS.Mxe.Data[7] = '3';



	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message( &_msgMOTORCONTROLLER_COMMANDS) != RC_SUCCESS);
 8001ab8:	bf00      	nop
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd6e 	bl	80005a0 <J1939_Send_Message>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f7      	bne.n	8001aba <sendMsg_MOTORCONTROLLERCOMMANDS+0x52>
//	HAL_UART_Transmit(&huart3,"send msg from switchmotor\r\n", 30, 1000);

}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bdb0      	pop	{r4, r5, r7, pc}

08001ad4 <sendMsg_SWITCHINFO>:

void sendMsg_SWITCHINFO(J1939_MESSAGE *Message)
{
 8001ad4:	b5b0      	push	{r4, r5, r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

	J1939_MESSAGE _msgSWITCHINFO;
	_msgSWITCHINFO=*Message;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f107 040c 	add.w	r4, r7, #12
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	6023      	str	r3, [r4, #0]

	//uint8_t buf[]="2";
	_msgSWITCHINFO.Mxe.DataPage = 0;
 8001aec:	7b3b      	ldrb	r3, [r7, #12]
 8001aee:	f36f 0300 	bfc	r3, #0, #1
 8001af2:	733b      	strb	r3, [r7, #12]
	_msgSWITCHINFO.Mxe.Priority = 0x03;
 8001af4:	7b3b      	ldrb	r3, [r7, #12]
 8001af6:	2203      	movs	r2, #3
 8001af8:	f362 0384 	bfi	r3, r2, #2, #3
 8001afc:	733b      	strb	r3, [r7, #12]
	_msgSWITCHINFO.Mxe.DestinationAddress = 0x22;
 8001afe:	2322      	movs	r3, #34	; 0x22
 8001b00:	73bb      	strb	r3, [r7, #14]
	_msgSWITCHINFO.Mxe.DataLength = 8;
 8001b02:	7c3b      	ldrb	r3, [r7, #16]
 8001b04:	2208      	movs	r2, #8
 8001b06:	f362 0303 	bfi	r3, r2, #0, #4
 8001b0a:	743b      	strb	r3, [r7, #16]
	_msgSWITCHINFO.Mxe.PDUFormat = 0x15;
 8001b0c:	2315      	movs	r3, #21
 8001b0e:	737b      	strb	r3, [r7, #13]
	_msgSWITCHINFO.Mxe.SourceAddress = 0x33;
 8001b10:	2333      	movs	r3, #51	; 0x33
 8001b12:	73fb      	strb	r3, [r7, #15]
	//	_msgSWITCHINFO.Mxe.Data[5] = 0;
	//	_msgSWITCHINFO.Mxe.Data[6] = 0;
	//	_msgSWITCHINFO.Mxe.Data[7] = 's';

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message( &_msgSWITCHINFO) != RC_SUCCESS);
 8001b14:	bf00      	nop
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd40 	bl	80005a0 <J1939_Send_Message>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f7      	bne.n	8001b16 <sendMsg_SWITCHINFO+0x42>
//	HAL_UART_Transmit(&huart3,"send msg from switchinfo\r\n", 30, 1000);

}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdb0      	pop	{r4, r5, r7, pc}

08001b30 <sendMsg_BMSSTATUS>:
void sendMsg_BMSSTATUS(J1939_MESSAGE *Message)
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	J1939_MESSAGE _msgBMSSTATUS;


	_msgBMSSTATUS=*Message;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f107 040c 	add.w	r4, r7, #12
 8001b3e:	461d      	mov	r5, r3
 8001b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	6023      	str	r3, [r4, #0]
	_msgBMSSTATUS.Mxe.DataPage = 0;
 8001b48:	7b3b      	ldrb	r3, [r7, #12]
 8001b4a:	f36f 0300 	bfc	r3, #0, #1
 8001b4e:	733b      	strb	r3, [r7, #12]
	_msgBMSSTATUS.Mxe.Priority = 0x03;
 8001b50:	7b3b      	ldrb	r3, [r7, #12]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f362 0384 	bfi	r3, r2, #2, #3
 8001b58:	733b      	strb	r3, [r7, #12]
	_msgBMSSTATUS.Mxe.DestinationAddress = 0x22;
 8001b5a:	2322      	movs	r3, #34	; 0x22
 8001b5c:	73bb      	strb	r3, [r7, #14]
	_msgBMSSTATUS.Mxe.DataLength = 8;
 8001b5e:	7c3b      	ldrb	r3, [r7, #16]
 8001b60:	2208      	movs	r2, #8
 8001b62:	f362 0303 	bfi	r3, r2, #0, #4
 8001b66:	743b      	strb	r3, [r7, #16]
	_msgBMSSTATUS.Mxe.PDUFormat = 0xF4;
 8001b68:	23f4      	movs	r3, #244	; 0xf4
 8001b6a:	737b      	strb	r3, [r7, #13]
	_msgBMSSTATUS.Mxe.SourceAddress = 0x44;
 8001b6c:	2344      	movs	r3, #68	; 0x44
 8001b6e:	73fb      	strb	r3, [r7, #15]
//	_msgBMSSTATUS.Mxe.Data[5] = 0;
//	_msgBMSSTATUS.Mxe.Data[6] = 0;
//	_msgBMSSTATUS.Mxe.Data[7] = 0;

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message( &_msgBMSSTATUS) != RC_SUCCESS);
 8001b70:	bf00      	nop
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fd12 	bl	80005a0 <J1939_Send_Message>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f7      	bne.n	8001b72 <sendMsg_BMSSTATUS+0x42>
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bdb0      	pop	{r4, r5, r7, pc}

08001b8c <sendMsg_MOTORCONTROLLERSTATUS>:

void sendMsg_MOTORCONTROLLERSTATUS(J1939_MESSAGE *Message)
{
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	J1939_MESSAGE _msgMOTORCONTROLLERSTATUS;
	_msgMOTORCONTROLLERSTATUS =*Message;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f107 040c 	add.w	r4, r7, #12
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	6023      	str	r3, [r4, #0]

	_msgMOTORCONTROLLERSTATUS.Mxe.DataPage = 0;
 8001ba4:	7b3b      	ldrb	r3, [r7, #12]
 8001ba6:	f36f 0300 	bfc	r3, #0, #1
 8001baa:	733b      	strb	r3, [r7, #12]
	_msgMOTORCONTROLLERSTATUS.Mxe.Priority = 0x03;
 8001bac:	7b3b      	ldrb	r3, [r7, #12]
 8001bae:	2203      	movs	r2, #3
 8001bb0:	f362 0384 	bfi	r3, r2, #2, #3
 8001bb4:	733b      	strb	r3, [r7, #12]
	_msgMOTORCONTROLLERSTATUS.Mxe.DestinationAddress = 0x33;
 8001bb6:	2333      	movs	r3, #51	; 0x33
 8001bb8:	73bb      	strb	r3, [r7, #14]
	_msgMOTORCONTROLLERSTATUS.Mxe.DataLength = 1;
 8001bba:	7c3b      	ldrb	r3, [r7, #16]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f362 0303 	bfi	r3, r2, #0, #4
 8001bc2:	743b      	strb	r3, [r7, #16]
	_msgMOTORCONTROLLERSTATUS.Mxe.PDUFormat = 0xF2;
 8001bc4:	23f2      	movs	r3, #242	; 0xf2
 8001bc6:	737b      	strb	r3, [r7, #13]
	_msgMOTORCONTROLLERSTATUS.Mxe.SourceAddress = 0x11;
 8001bc8:	2311      	movs	r3, #17
 8001bca:	73fb      	strb	r3, [r7, #15]
//	_msgMOTORCONTROLLERSTATUS.Mxe.Data[5] = 0;
//	_msgMOTORCONTROLLERSTATUS.Mxe.Data[6] = 0;
//	_msgMOTORCONTROLLERSTATUS.Mxe.Data[7] = 0;

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message( &_msgMOTORCONTROLLERSTATUS) != RC_SUCCESS);
 8001bcc:	bf00      	nop
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fce4 	bl	80005a0 <J1939_Send_Message>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f7      	bne.n	8001bce <sendMsg_MOTORCONTROLLERSTATUS+0x42>


}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}

08001be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bec:	f001 f91b 	bl	8002e26 <HAL_Init>

  /* USER CODE BEGIN Init */
	Key_Infovar.Key_In=0;
 8001bf0:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <main+0xb0>)
 8001bf2:	7813      	ldrb	r3, [r2, #0]
 8001bf4:	f36f 0341 	bfc	r3, #1, #1
 8001bf8:	7013      	strb	r3, [r2, #0]
	Key_Infovar.Key_Off=0;
 8001bfa:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <main+0xb0>)
 8001bfc:	7813      	ldrb	r3, [r2, #0]
 8001bfe:	f36f 0300 	bfc	r3, #0, #1
 8001c02:	7013      	strb	r3, [r2, #0]
//	Microcontroller_Statusvar.motorcontroller_state=0;
	Motorcontroller_commandvar.brake=0;
 8001c04:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <main+0xb4>)
 8001c06:	7813      	ldrb	r3, [r2, #0]
 8001c08:	f36f 0382 	bfc	r3, #2, #1
 8001c0c:	7013      	strb	r3, [r2, #0]
	Motorcontroller_commandvar.ignition_command=0;
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <main+0xb4>)
 8001c10:	7813      	ldrb	r3, [r2, #0]
 8001c12:	f36f 0301 	bfc	r3, #0, #2
 8001c16:	7013      	strb	r3, [r2, #0]

	Switch_Infovar.killswitch=0;
 8001c18:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <main+0xb8>)
 8001c1a:	7813      	ldrb	r3, [r2, #0]
 8001c1c:	f36f 0382 	bfc	r3, #2, #1
 8001c20:	7013      	strb	r3, [r2, #0]
	Switch_Infovar.brake=0;
 8001c22:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <main+0xb8>)
 8001c24:	7813      	ldrb	r3, [r2, #0]
 8001c26:	f36f 0300 	bfc	r3, #0, #1
 8001c2a:	7013      	strb	r3, [r2, #0]
	Switch_Infovar.indicator=0;
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <main+0xb8>)
 8001c2e:	7813      	ldrb	r3, [r2, #0]
 8001c30:	f36f 03c4 	bfc	r3, #3, #2
 8001c34:	7013      	strb	r3, [r2, #0]
	Switch_Infovar.highbeam=0;
 8001c36:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <main+0xb8>)
 8001c38:	7813      	ldrb	r3, [r2, #0]
 8001c3a:	f36f 0341 	bfc	r3, #1, #1
 8001c3e:	7013      	strb	r3, [r2, #0]
	Switch_Infovar.navigation=0;
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <main+0xb8>)
 8001c42:	7813      	ldrb	r3, [r2, #0]
 8001c44:	f36f 1347 	bfc	r3, #5, #3
 8001c48:	7013      	strb	r3, [r2, #0]
	BMS_Statusvar.BMS_Status=0;
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <main+0xbc>)
 8001c4c:	7813      	ldrb	r3, [r2, #0]
 8001c4e:	f36f 0300 	bfc	r3, #0, #1
 8001c52:	7013      	strb	r3, [r2, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c54:	f000 f82c 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c58:	f000 f982 	bl	8001f60 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001c5c:	f000 f894 	bl	8001d88 <MX_CAN1_Init>
  MX_TIM6_Init();
 8001c60:	f000 f916 	bl	8001e90 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001c64:	f000 f94c 	bl	8001f00 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001c68:	f000 f8c4 	bl	8001df4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);//stb used only microchip
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <main+0xc0>)
 8001c74:	f002 fa6a 	bl	800414c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1);//voltage
	//HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_ERROR);// interrupts activation
	J1939_SetAddressFilter();
 8001c78:	f7ff fd1c 	bl	80016b4 <J1939_SetAddressFilter>
	if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <main+0xc4>)
 8001c7e:	f001 fb7b 	bl	8003378 <HAL_CAN_Start>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <main+0xa4>
	{
//		HAL_UART_Transmit(&huart3,"error in can_start\n\r", 20, 1000);
		Error_Handler();
 8001c88:	f000 fa60 	bl	800214c <Error_Handler>

	}
	J1939_Initialization();
 8001c8c:	f7fe fc94 	bl	80005b8 <J1939_Initialization>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switches_call();
 8001c90:	f000 fbd4 	bl	800243c <switches_call>
 8001c94:	e7fc      	b.n	8001c90 <main+0xa8>
 8001c96:	bf00      	nop
 8001c98:	20000030 	.word	0x20000030
 8001c9c:	200003cc 	.word	0x200003cc
 8001ca0:	20000160 	.word	0x20000160
 8001ca4:	20000164 	.word	0x20000164
 8001ca8:	48000400 	.word	0x48000400
 8001cac:	20000504 	.word	0x20000504

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0b0      	sub	sp, #192	; 0xc0
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cba:	2244      	movs	r2, #68	; 0x44
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fdac 	bl	800681c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2268      	movs	r2, #104	; 0x68
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 fd9e 	bl	800681c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001cfe:	2314      	movs	r3, #20
 8001d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d04:	2307      	movs	r3, #7
 8001d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 faac 	bl	8004278 <HAL_RCC_OscConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001d26:	f000 fa11 	bl	800214c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d42:	2104      	movs	r1, #4
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 feb7 	bl	8004ab8 <HAL_RCC_ClockConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001d50:	f000 f9fc 	bl	800214c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d54:	2304      	movs	r3, #4
 8001d56:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 f8b0 	bl	8004ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001d6a:	f000 f9ef 	bl	800214c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d72:	f002 fa2b 	bl	80041cc <HAL_PWREx_ControlVoltageScaling>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d7c:	f000 f9e6 	bl	800214c <Error_Handler>
  }
}
 8001d80:	bf00      	nop
 8001d82:	37c0      	adds	r7, #192	; 0xc0
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_CAN1_Init+0x64>)
 8001d8e:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <MX_CAN1_Init+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <MX_CAN1_Init+0x64>)
 8001d94:	2210      	movs	r2, #16
 8001d96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_CAN1_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <MX_CAN1_Init+0x64>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_CAN1_Init+0x64>)
 8001da6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001daa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_CAN1_Init+0x64>)
 8001dae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001db2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <MX_CAN1_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_CAN1_Init+0x64>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <MX_CAN1_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_CAN1_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <MX_CAN1_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_CAN1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_CAN1_Init+0x64>)
 8001dda:	f001 f8bd 	bl	8002f58 <HAL_CAN_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001de4:	f000 f9b2 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000504 	.word	0x20000504
 8001df0:	40006400 	.word	0x40006400

08001df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e2a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001e2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e3c:	4813      	ldr	r0, [pc, #76]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e3e:	f003 fb9f 	bl	8005580 <HAL_TIM_Base_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001e48:	f000 f980 	bl	800214c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4619      	mov	r1, r3
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e5a:	f003 fd93 	bl	8005984 <HAL_TIM_ConfigClockSource>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001e64:	f000 f972 	bl	800214c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_TIM2_Init+0x98>)
 8001e76:	f003 ff7b 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001e80:	f000 f964 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000680 	.word	0x20000680

08001e90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_TIM6_Init+0x68>)
 8001ea2:	4a16      	ldr	r2, [pc, #88]	; (8001efc <MX_TIM6_Init+0x6c>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000-1;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_TIM6_Init+0x68>)
 8001ea8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_TIM6_Init+0x68>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000-1;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <MX_TIM6_Init+0x68>)
 8001eb6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001eba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <MX_TIM6_Init+0x68>)
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <MX_TIM6_Init+0x68>)
 8001ec4:	f003 fb5c 	bl	8005580 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ece:	f000 f93d 	bl	800214c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <MX_TIM6_Init+0x68>)
 8001ee0:	f003 ff46 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001eea:	f000 f92f 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000062c 	.word	0x2000062c
 8001efc:	40001000 	.word	0x40001000

08001f00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <MX_USART3_UART_Init+0x5c>)
 8001f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f26:	220c      	movs	r2, #12
 8001f28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f44:	f003 ffa0 	bl	8005e88 <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f4e:	f000 f8fd 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200003fc 	.word	0x200003fc
 8001f5c:	40004800 	.word	0x40004800

08001f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4a5b      	ldr	r2, [pc, #364]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f82:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8e:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a55      	ldr	r2, [pc, #340]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a49      	ldr	r2, [pc, #292]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a43      	ldr	r2, [pc, #268]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <MX_GPIO_Init+0x188>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, voltage_Pin|GPIO_PIN_5|GPIO_PIN_6|number_plate_Pin
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f649 5162 	movw	r1, #40290	; 0x9d62
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f002 f8a8 	bl	800414c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|high_beam_Pin|stoplight_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LED1_Pin|LED2_Pin|GPIO_PIN_14
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f244 0127 	movw	r1, #16423	; 0x4027
 8002002:	483a      	ldr	r0, [pc, #232]	; (80020ec <MX_GPIO_Init+0x18c>)
 8002004:	f002 f8a2 	bl	800414c <HAL_GPIO_WritePin>
                          |low_beam_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(brake_light_GPIO_Port, brake_light_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	4838      	ldr	r0, [pc, #224]	; (80020f0 <MX_GPIO_Init+0x190>)
 800200e:	f002 f89d 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	2104      	movs	r1, #4
 8002016:	4837      	ldr	r0, [pc, #220]	; (80020f4 <MX_GPIO_Init+0x194>)
 8002018:	f002 f898 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : aux_Pin R_indicator_Pin PC3 navigation_4_Pin
                           PC8 ignition_Pin killl_switch_Pin PC11
                           PC12 */
  GPIO_InitStruct.Pin = aux_Pin|R_indicator_Pin|GPIO_PIN_3|navigation_4_Pin
 800201c:	f643 734c 	movw	r3, #16204	; 0x3f4c
 8002020:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|ignition_Pin|killl_switch_Pin|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002026:	2302      	movs	r3, #2
 8002028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	482f      	ldr	r0, [pc, #188]	; (80020f0 <MX_GPIO_Init+0x190>)
 8002032:	f001 fef9 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : indicator_middle_Pin navigation_1_Pin PA7 */
  GPIO_InitStruct.Pin = indicator_middle_Pin|navigation_1_Pin|GPIO_PIN_7;
 8002036:	2391      	movs	r3, #145	; 0x91
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800203e:	2302      	movs	r3, #2
 8002040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204c:	f001 feec 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : voltage_Pin PA5 PA6 number_plate_Pin
                           PA10 high_beam_Pin stoplight_Pin PA15 */
  GPIO_InitStruct.Pin = voltage_Pin|GPIO_PIN_5|GPIO_PIN_6|number_plate_Pin
 8002050:	f649 5362 	movw	r3, #40290	; 0x9d62
 8002054:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|high_beam_Pin|stoplight_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206c:	f001 fedc 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LED1_Pin LED2_Pin PB14
                           low_beam_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED1_Pin|LED2_Pin|GPIO_PIN_14
 8002070:	f244 0327 	movw	r3, #16423	; 0x4027
 8002074:	617b      	str	r3, [r7, #20]
                          |low_beam_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4818      	ldr	r0, [pc, #96]	; (80020ec <MX_GPIO_Init+0x18c>)
 800208a:	f001 fecd 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : navigation_Pin brake_front_Pin */
  GPIO_InitStruct.Pin = navigation_Pin|brake_front_Pin;
 800208e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002098:	2302      	movs	r3, #2
 800209a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4812      	ldr	r0, [pc, #72]	; (80020ec <MX_GPIO_Init+0x18c>)
 80020a4:	f001 fec0 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : brake_light_Pin */
  GPIO_InitStruct.Pin = brake_light_Pin;
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(brake_light_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	480c      	ldr	r0, [pc, #48]	; (80020f0 <MX_GPIO_Init+0x190>)
 80020c0:	f001 feb2 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020c4:	2304      	movs	r3, #4
 80020c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	4806      	ldr	r0, [pc, #24]	; (80020f4 <MX_GPIO_Init+0x194>)
 80020dc:	f001 fea4 	bl	8003e28 <HAL_GPIO_Init>

}
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000400 	.word	0x48000400
 80020f0:	48000800 	.word	0x48000800
 80020f4:	48000c00 	.word	0x48000c00

080020f8 <HAL_TIM_PeriodElapsedCallback>:

	}


	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
		if(count==count1)
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d104      	bne.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x1e>
		{
			Message.Mxe.Data[0]=_info1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800210e:	781a      	ldrb	r2, [r3, #0]
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002112:	715a      	strb	r2, [r3, #5]
 8002114:	e002      	b.n	800211c <HAL_TIM_PeriodElapsedCallback+0x24>


		}
		else
		{
			Message.Mxe.Data[0]=0x02;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002118:	2202      	movs	r2, #2
 800211a:	715a      	strb	r2, [r3, #5]

		}
		sendMsg_KEYINFO(&Message);
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800211e:	f7ff fc75 	bl	8001a0c <sendMsg_KEYINFO>
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	715a      	strb	r2, [r3, #5]
		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		//__NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
		//NVIC_ClearPendingIRQ (EXTI15_10_IRQn);
		//__HAL_TIM_DISABLE(&htim2);
		HAL_TIM_Base_Stop_IT(&htim2);
 8002128:	4807      	ldr	r0, [pc, #28]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800212a:	f003 fadd 	bl	80056e8 <HAL_TIM_Base_Stop_IT>

	}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000002c 	.word	0x2000002c
 800213c:	2000002d 	.word	0x2000002d
 8002140:	200006cc 	.word	0x200006cc
 8002144:	2000060c 	.word	0x2000060c
 8002148:	20000680 	.word	0x20000680

0800214c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002150:	b672      	cpsid	i
}
 8002152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8002154:	e7fe      	b.n	8002154 <Error_Handler+0x8>
	...

08002158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_MspInit+0x44>)
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	4a0e      	ldr	r2, [pc, #56]	; (800219c <HAL_MspInit+0x44>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6613      	str	r3, [r2, #96]	; 0x60
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_MspInit+0x44>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_MspInit+0x44>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_MspInit+0x44>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6593      	str	r3, [r2, #88]	; 0x58
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_MspInit+0x44>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_CAN_MspInit+0xbc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d148      	bne.n	8002254 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_CAN_MspInit+0xc0>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_CAN_MspInit+0xc0>)
 80021c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_CAN_MspInit+0xc0>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_CAN_MspInit+0xc0>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	4a20      	ldr	r2, [pc, #128]	; (8002260 <HAL_CAN_MspInit+0xc0>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_CAN_MspInit+0xc0>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80021f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8002204:	230a      	movs	r3, #10
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4815      	ldr	r0, [pc, #84]	; (8002264 <HAL_CAN_MspInit+0xc4>)
 8002210:	f001 fe0a 	bl	8003e28 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	2013      	movs	r0, #19
 800221a:	f001 fdce 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800221e:	2013      	movs	r0, #19
 8002220:	f001 fde7 	bl	8003df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2014      	movs	r0, #20
 800222a:	f001 fdc6 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800222e:	2014      	movs	r0, #20
 8002230:	f001 fddf 	bl	8003df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2015      	movs	r0, #21
 800223a:	f001 fdbe 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800223e:	2015      	movs	r0, #21
 8002240:	f001 fdd7 	bl	8003df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2016      	movs	r0, #22
 800224a:	f001 fdb6 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800224e:	2016      	movs	r0, #22
 8002250:	f001 fdcf 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40006400 	.word	0x40006400
 8002260:	40021000 	.word	0x40021000
 8002264:	48000400 	.word	0x48000400

08002268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d114      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_TIM_Base_MspInit+0x78>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <HAL_TIM_Base_MspInit+0x78>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_TIM_Base_MspInit+0x78>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	201c      	movs	r0, #28
 8002298:	f001 fd8f 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800229c:	201c      	movs	r0, #28
 800229e:	f001 fda8 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80022a2:	e018      	b.n	80022d6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_TIM_Base_MspInit+0x7c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d113      	bne.n	80022d6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_TIM_Base_MspInit+0x78>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <HAL_TIM_Base_MspInit+0x78>)
 80022b4:	f043 0310 	orr.w	r3, r3, #16
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_TIM_Base_MspInit+0x78>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2036      	movs	r0, #54	; 0x36
 80022cc:	f001 fd75 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022d0:	2036      	movs	r0, #54	; 0x36
 80022d2:	f001 fd8e 	bl	8003df2 <HAL_NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40001000 	.word	0x40001000

080022e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_UART_MspInit+0x7c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d127      	bne.n	800235a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_UART_MspInit+0x80>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_UART_MspInit+0x80>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_UART_MspInit+0x80>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_UART_MspInit+0x80>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_UART_MspInit+0x80>)
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_UART_MspInit+0x80>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800233a:	2330      	movs	r3, #48	; 0x30
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800234a:	2307      	movs	r3, #7
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_UART_MspInit+0x84>)
 8002356:	f001 fd67 	bl	8003e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	3728      	adds	r7, #40	; 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40004800 	.word	0x40004800
 8002368:	40021000 	.word	0x40021000
 800236c:	48000800 	.word	0x48000800

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <NMI_Handler+0x4>

08002376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <HardFault_Handler+0x4>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <MemManage_Handler+0x4>

08002382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002386:	e7fe      	b.n	8002386 <BusFault_Handler+0x4>

08002388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <UsageFault_Handler+0x4>

0800238e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023bc:	f000 fd88 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <CAN1_TX_IRQHandler+0x10>)
 80023ca:	f001 fa06 	bl	80037da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000504 	.word	0x20000504

080023d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <CAN1_RX0_IRQHandler+0x10>)
 80023de:	f001 f9fc 	bl	80037da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000504 	.word	0x20000504

080023ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <CAN1_RX1_IRQHandler+0x10>)
 80023f2:	f001 f9f2 	bl	80037da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000504 	.word	0x20000504

08002400 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <CAN1_SCE_IRQHandler+0x10>)
 8002406:	f001 f9e8 	bl	80037da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000504 	.word	0x20000504

08002414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <TIM2_IRQHandler+0x10>)
 800241a:	f003 f994 	bl	8005746 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000680 	.word	0x20000680

08002428 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <TIM6_DAC_IRQHandler+0x10>)
 800242e:	f003 f98a 	bl	8005746 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000062c 	.word	0x2000062c

0800243c <switches_call>:
//#include "J1939_Config.H"



void switches_call(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b098      	sub	sp, #96	; 0x60
 8002440:	af00      	add	r7, sp, #0

	/* BEGIN KEY INFO*/

	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11))==1)
 8002442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002446:	4893      	ldr	r0, [pc, #588]	; (8002694 <switches_call+0x258>)
 8002448:	f001 fe68 	bl	800411c <HAL_GPIO_ReadPin>
 800244c:	4603      	mov	r3, r0
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 809c 	bne.w	800258c <switches_call+0x150>
	{
		count1++;//odd num on even off the key
 8002454:	4b90      	ldr	r3, [pc, #576]	; (8002698 <switches_call+0x25c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b8e      	ldr	r3, [pc, #568]	; (8002698 <switches_call+0x25c>)
 800245e:	701a      	strb	r2, [r3, #0]

		if(count1%2==1)
 8002460:	4b8d      	ldr	r3, [pc, #564]	; (8002698 <switches_call+0x25c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d020      	beq.n	80024b0 <switches_call+0x74>
		{
			count=count1;
 800246e:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <switches_call+0x25c>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b8a      	ldr	r3, [pc, #552]	; (800269c <switches_call+0x260>)
 8002474:	701a      	strb	r2, [r3, #0]

			Key_Infovar.Key_In=1;
 8002476:	4a8a      	ldr	r2, [pc, #552]	; (80026a0 <switches_call+0x264>)
 8002478:	7813      	ldrb	r3, [r2, #0]
 800247a:	f043 0302 	orr.w	r3, r3, #2
 800247e:	7013      	strb	r3, [r2, #0]
			Key_Infovar.Key_Off=0;
 8002480:	4a87      	ldr	r2, [pc, #540]	; (80026a0 <switches_call+0x264>)
 8002482:	7813      	ldrb	r3, [r2, #0]
 8002484:	f36f 0300 	bfc	r3, #0, #1
 8002488:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Key_Infovar);
 800248a:	4b85      	ldr	r3, [pc, #532]	; (80026a0 <switches_call+0x264>)
 800248c:	65bb      	str	r3, [r7, #88]	; 0x58
			_info1=*info;
 800248e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	4b84      	ldr	r3, [pc, #528]	; (80026a4 <switches_call+0x268>)
 8002494:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info1;
 8002496:	4b83      	ldr	r3, [pc, #524]	; (80026a4 <switches_call+0x268>)
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	4b83      	ldr	r3, [pc, #524]	; (80026a8 <switches_call+0x26c>)
 800249c:	715a      	strb	r2, [r3, #5]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,1);
 800249e:	2201      	movs	r2, #1
 80024a0:	2120      	movs	r1, #32
 80024a2:	4882      	ldr	r0, [pc, #520]	; (80026ac <switches_call+0x270>)
 80024a4:	f001 fe52 	bl	800414c <HAL_GPIO_WritePin>


			//Message.Mxe.Data[0]=0x02;
			//__HAL_TIM_ENABLE(&htim2);
			HAL_TIM_Base_Start_IT(&htim2);
 80024a8:	4881      	ldr	r0, [pc, #516]	; (80026b0 <switches_call+0x274>)
 80024aa:	f003 f8c1 	bl	8005630 <HAL_TIM_Base_Start_IT>
 80024ae:	e066      	b.n	800257e <switches_call+0x142>
			//_info=*info=0;

		}
		else
		{
			Key_Infovar.Key_In=0;
 80024b0:	4a7b      	ldr	r2, [pc, #492]	; (80026a0 <switches_call+0x264>)
 80024b2:	7813      	ldrb	r3, [r2, #0]
 80024b4:	f36f 0341 	bfc	r3, #1, #1
 80024b8:	7013      	strb	r3, [r2, #0]
			Key_Infovar.Key_Off=1;
 80024ba:	4a79      	ldr	r2, [pc, #484]	; (80026a0 <switches_call+0x264>)
 80024bc:	7813      	ldrb	r3, [r2, #0]
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	7013      	strb	r3, [r2, #0]

			j1939_uint8_t *info=(j1939_uint8_t*)(&Key_Infovar);
 80024c4:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <switches_call+0x264>)
 80024c6:	65fb      	str	r3, [r7, #92]	; 0x5c
			_info1 = *info;
 80024c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <switches_call+0x268>)
 80024ce:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info1;
 80024d0:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <switches_call+0x268>)
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	4b74      	ldr	r3, [pc, #464]	; (80026a8 <switches_call+0x26c>)
 80024d6:	715a      	strb	r2, [r3, #5]
			//_info1=*info=0;
			//Message.Mxe.Data[0]=0x01;
			sendMsg_KEYINFO(&Message);
 80024d8:	4873      	ldr	r0, [pc, #460]	; (80026a8 <switches_call+0x26c>)
 80024da:	f7ff fa97 	bl	8001a0c <sendMsg_KEYINFO>
 80024de:	4b72      	ldr	r3, [pc, #456]	; (80026a8 <switches_call+0x26c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	715a      	strb	r2, [r3, #5]
			memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

			/* BMS STATUS IS OFF */
			BMS_Statusvar.BMS_Status=0;
 80024e4:	4a73      	ldr	r2, [pc, #460]	; (80026b4 <switches_call+0x278>)
 80024e6:	7813      	ldrb	r3, [r2, #0]
 80024e8:	f36f 0300 	bfc	r3, #0, #1
 80024ec:	7013      	strb	r3, [r2, #0]
			 *info=(j1939_uint8_t*)(&BMS_Statusvar);
 80024ee:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <switches_call+0x278>)
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f4:	701a      	strb	r2, [r3, #0]
			_info5 = *info;
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <switches_call+0x27c>)
 80024fc:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=0;
 80024fe:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <switches_call+0x26c>)
 8002500:	2200      	movs	r2, #0
 8002502:	715a      	strb	r2, [r3, #5]
			Message.Mxe.Data[1]=_info5;
 8002504:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <switches_call+0x27c>)
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <switches_call+0x26c>)
 800250a:	719a      	strb	r2, [r3, #6]
			sendMsg_BMSSTATUS(&Message);
 800250c:	4866      	ldr	r0, [pc, #408]	; (80026a8 <switches_call+0x26c>)
 800250e:	f7ff fb0f 	bl	8001b30 <sendMsg_BMSSTATUS>
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <switches_call+0x26c>)
 8002514:	2200      	movs	r2, #0
 8002516:	715a      	strb	r2, [r3, #5]
			memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

			/* VCU STATE IS OFF */
			VCU_Statusvar.VCU_State=0;
 8002518:	4a68      	ldr	r2, [pc, #416]	; (80026bc <switches_call+0x280>)
 800251a:	7813      	ldrb	r3, [r2, #0]
 800251c:	f36f 0300 	bfc	r3, #0, #1
 8002520:	7013      	strb	r3, [r2, #0]
			*info=(j1939_uint8_t*)(&VCU_Statusvar);
 8002522:	4b66      	ldr	r3, [pc, #408]	; (80026bc <switches_call+0x280>)
 8002524:	b2da      	uxtb	r2, r3
 8002526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002528:	701a      	strb	r2, [r3, #0]
			_info6 = *info;
 800252a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	4b64      	ldr	r3, [pc, #400]	; (80026c0 <switches_call+0x284>)
 8002530:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info6;
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <switches_call+0x284>)
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <switches_call+0x26c>)
 8002538:	715a      	strb	r2, [r3, #5]
			sendMsg_BMSSTATUS(&Message);
 800253a:	485b      	ldr	r0, [pc, #364]	; (80026a8 <switches_call+0x26c>)
 800253c:	f7ff faf8 	bl	8001b30 <sendMsg_BMSSTATUS>
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <switches_call+0x26c>)
 8002542:	2200      	movs	r2, #0
 8002544:	715a      	strb	r2, [r3, #5]
			memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

			/* MC STATE IS OFF */

			Motorcontroller_Statusvar.motorcontroller_state=0;
 8002546:	4a5f      	ldr	r2, [pc, #380]	; (80026c4 <switches_call+0x288>)
 8002548:	7893      	ldrb	r3, [r2, #2]
 800254a:	f36f 0300 	bfc	r3, #0, #1
 800254e:	7093      	strb	r3, [r2, #2]
			*info=(j1939_uint8_t*)(&Motorcontroller_Statusvar);
 8002550:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <switches_call+0x288>)
 8002552:	b2da      	uxtb	r2, r3
 8002554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002556:	701a      	strb	r2, [r3, #0]
			_info7 = *info;
 8002558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <switches_call+0x28c>)
 800255e:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info7;
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <switches_call+0x28c>)
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <switches_call+0x26c>)
 8002566:	715a      	strb	r2, [r3, #5]
			sendMsg_MOTORCONTROLLERSTATUS(&Message);
 8002568:	484f      	ldr	r0, [pc, #316]	; (80026a8 <switches_call+0x26c>)
 800256a:	f7ff fb0f 	bl	8001b8c <sendMsg_MOTORCONTROLLERSTATUS>
 800256e:	4b4e      	ldr	r3, [pc, #312]	; (80026a8 <switches_call+0x26c>)
 8002570:	2200      	movs	r2, #0
 8002572:	715a      	strb	r2, [r3, #5]
			memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,0);
 8002574:	2200      	movs	r2, #0
 8002576:	2120      	movs	r1, #32
 8002578:	484c      	ldr	r0, [pc, #304]	; (80026ac <switches_call+0x270>)
 800257a:	f001 fde7 	bl	800414c <HAL_GPIO_WritePin>


		}
		if(count1>=254)
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <switches_call+0x25c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2bfd      	cmp	r3, #253	; 0xfd
 8002584:	d902      	bls.n	800258c <switches_call+0x150>
			count1=0;
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <switches_call+0x25c>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]

	/* END OF KEY INFO*/

	/* BEGIN KILL SWITCH */

	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10))==1)
 800258c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002590:	4840      	ldr	r0, [pc, #256]	; (8002694 <switches_call+0x258>)
 8002592:	f001 fdc3 	bl	800411c <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d14d      	bne.n	8002638 <switches_call+0x1fc>
	{
		count2++;
 800259c:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <switches_call+0x290>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b49      	ldr	r3, [pc, #292]	; (80026cc <switches_call+0x290>)
 80025a6:	701a      	strb	r2, [r3, #0]

		//kill switch
		//with key on condition rest switches work
		if((_info1==2)&&(count2%2==1))
 80025a8:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <switches_call+0x268>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d120      	bne.n	80025f2 <switches_call+0x1b6>
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <switches_call+0x290>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d019      	beq.n	80025f2 <switches_call+0x1b6>
		{
			Switch_Infovar.killswitch=1;
 80025be:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <switches_call+0x294>)
 80025c0:	7813      	ldrb	r3, [r2, #0]
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 80025c8:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <switches_call+0x294>)
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
			_info=*info;
 80025cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <switches_call+0x298>)
 80025d2:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info;
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <switches_call+0x298>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <switches_call+0x26c>)
 80025da:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x04;
			sendMsg_SWITCHINFO(&Message);
 80025dc:	4832      	ldr	r0, [pc, #200]	; (80026a8 <switches_call+0x26c>)
 80025de:	f7ff fa79 	bl	8001ad4 <sendMsg_SWITCHINFO>
			_info=*info=0;
 80025e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <switches_call+0x298>)
 80025ee:	701a      	strb	r2, [r3, #0]
		{
 80025f0:	e018      	b.n	8002624 <switches_call+0x1e8>
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}
		else
		{
			Switch_Infovar.killswitch=0;
 80025f2:	4a37      	ldr	r2, [pc, #220]	; (80026d0 <switches_call+0x294>)
 80025f4:	7813      	ldrb	r3, [r2, #0]
 80025f6:	f36f 0382 	bfc	r3, #2, #1
 80025fa:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 80025fc:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <switches_call+0x294>)
 80025fe:	653b      	str	r3, [r7, #80]	; 0x50
			_info=*info;
 8002600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	4b33      	ldr	r3, [pc, #204]	; (80026d4 <switches_call+0x298>)
 8002606:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info;
 8002608:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <switches_call+0x298>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <switches_call+0x26c>)
 800260e:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x00;
			sendMsg_SWITCHINFO(&Message);
 8002610:	4825      	ldr	r0, [pc, #148]	; (80026a8 <switches_call+0x26c>)
 8002612:	f7ff fa5f 	bl	8001ad4 <sendMsg_SWITCHINFO>
			_info=*info=0;
 8002616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800261e:	781a      	ldrb	r2, [r3, #0]
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <switches_call+0x298>)
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <switches_call+0x26c>)
 8002626:	2200      	movs	r2, #0
 8002628:	715a      	strb	r2, [r3, #5]
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}

		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		if(count2>=254)
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <switches_call+0x290>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2bfd      	cmp	r3, #253	; 0xfd
 8002630:	d902      	bls.n	8002638 <switches_call+0x1fc>
			count2=0;
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <switches_call+0x290>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]

	/* END OF KILL SWITCH */

	/* BEGIN OF IGNITION */

	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9))==1)
 8002638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800263c:	4815      	ldr	r0, [pc, #84]	; (8002694 <switches_call+0x258>)
 800263e:	f001 fd6d 	bl	800411c <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d169      	bne.n	800271c <switches_call+0x2e0>
	{
		//ignition
		count3++;
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <switches_call+0x29c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	b2da      	uxtb	r2, r3
 8002650:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <switches_call+0x29c>)
 8002652:	701a      	strb	r2, [r3, #0]
		if((_info1==2)&&(count3%2==1))
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <switches_call+0x268>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d143      	bne.n	80026e4 <switches_call+0x2a8>
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <switches_call+0x29c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d03c      	beq.n	80026e4 <switches_call+0x2a8>
		{
			Motorcontroller_commandvar.ignition_command=1;
 800266a:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <switches_call+0x2a0>)
 800266c:	7813      	ldrb	r3, [r2, #0]
 800266e:	2101      	movs	r1, #1
 8002670:	f361 0301 	bfi	r3, r1, #0, #2
 8002674:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Motorcontroller_commandvar);
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <switches_call+0x2a0>)
 8002678:	64fb      	str	r3, [r7, #76]	; 0x4c
			_info2=*info;
 800267a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <switches_call+0x2a4>)
 8002680:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info2;
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <switches_call+0x2a4>)
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <switches_call+0x26c>)
 8002688:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x01;
			sendMsg_MOTORCONTROLLERCOMMANDS(&Message);
 800268a:	4807      	ldr	r0, [pc, #28]	; (80026a8 <switches_call+0x26c>)
 800268c:	f7ff f9ec 	bl	8001a68 <sendMsg_MOTORCONTROLLERCOMMANDS>
		{
 8002690:	e03a      	b.n	8002708 <switches_call+0x2cc>
 8002692:	bf00      	nop
 8002694:	48000800 	.word	0x48000800
 8002698:	2000002d 	.word	0x2000002d
 800269c:	2000002c 	.word	0x2000002c
 80026a0:	20000030 	.word	0x20000030
 80026a4:	200006cc 	.word	0x200006cc
 80026a8:	2000060c 	.word	0x2000060c
 80026ac:	48000400 	.word	0x48000400
 80026b0:	20000680 	.word	0x20000680
 80026b4:	20000164 	.word	0x20000164
 80026b8:	20000678 	.word	0x20000678
 80026bc:	20000340 	.word	0x20000340
 80026c0:	200005c8 	.word	0x200005c8
 80026c4:	20000344 	.word	0x20000344
 80026c8:	20000620 	.word	0x20000620
 80026cc:	200005cb 	.word	0x200005cb
 80026d0:	20000160 	.word	0x20000160
 80026d4:	2000060a 	.word	0x2000060a
 80026d8:	20000623 	.word	0x20000623
 80026dc:	200003cc 	.word	0x200003cc
 80026e0:	200005d4 	.word	0x200005d4
			//_info=*info=0;
			//	memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}
		else
		{
			Motorcontroller_commandvar.ignition_command=0;
 80026e4:	4a98      	ldr	r2, [pc, #608]	; (8002948 <switches_call+0x50c>)
 80026e6:	7813      	ldrb	r3, [r2, #0]
 80026e8:	f36f 0301 	bfc	r3, #0, #2
 80026ec:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Motorcontroller_commandvar);
 80026ee:	4b96      	ldr	r3, [pc, #600]	; (8002948 <switches_call+0x50c>)
 80026f0:	64bb      	str	r3, [r7, #72]	; 0x48
			_info2=*info;
 80026f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b95      	ldr	r3, [pc, #596]	; (800294c <switches_call+0x510>)
 80026f8:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info2;
 80026fa:	4b94      	ldr	r3, [pc, #592]	; (800294c <switches_call+0x510>)
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	4b94      	ldr	r3, [pc, #592]	; (8002950 <switches_call+0x514>)
 8002700:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x00;
			sendMsg_MOTORCONTROLLERCOMMANDS(&Message);
 8002702:	4893      	ldr	r0, [pc, #588]	; (8002950 <switches_call+0x514>)
 8002704:	f7ff f9b0 	bl	8001a68 <sendMsg_MOTORCONTROLLERCOMMANDS>
 8002708:	4b91      	ldr	r3, [pc, #580]	; (8002950 <switches_call+0x514>)
 800270a:	2200      	movs	r2, #0
 800270c:	715a      	strb	r2, [r3, #5]
			//	memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}

		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		if(count3>=254)
 800270e:	4b91      	ldr	r3, [pc, #580]	; (8002954 <switches_call+0x518>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2bfd      	cmp	r3, #253	; 0xfd
 8002714:	d902      	bls.n	800271c <switches_call+0x2e0>
			count3=0;
 8002716:	4b8f      	ldr	r3, [pc, #572]	; (8002954 <switches_call+0x518>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]

	/* END OF IGNITION */

	/* BEGIN OF NAVIGATION_5 */

	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8))==1)
 800271c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002720:	488d      	ldr	r0, [pc, #564]	; (8002958 <switches_call+0x51c>)
 8002722:	f001 fcfb 	bl	800411c <HAL_GPIO_ReadPin>
 8002726:	4603      	mov	r3, r0
 8002728:	2b01      	cmp	r3, #1
 800272a:	d140      	bne.n	80027ae <switches_call+0x372>
	{
		//navigation_5  (centre 101=5)

		count9++;
 800272c:	4b8b      	ldr	r3, [pc, #556]	; (800295c <switches_call+0x520>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b89      	ldr	r3, [pc, #548]	; (800295c <switches_call+0x520>)
 8002736:	701a      	strb	r2, [r3, #0]

		if((_info1==2)&&(count9%2==1))
 8002738:	4b89      	ldr	r3, [pc, #548]	; (8002960 <switches_call+0x524>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d11a      	bne.n	8002776 <switches_call+0x33a>
 8002740:	4b86      	ldr	r3, [pc, #536]	; (800295c <switches_call+0x520>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d013      	beq.n	8002776 <switches_call+0x33a>
		{
			Switch_Infovar.navigation=5;
 800274e:	4a85      	ldr	r2, [pc, #532]	; (8002964 <switches_call+0x528>)
 8002750:	7813      	ldrb	r3, [r2, #0]
 8002752:	2105      	movs	r1, #5
 8002754:	f361 1347 	bfi	r3, r1, #5, #3
 8002758:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 800275a:	4b82      	ldr	r3, [pc, #520]	; (8002964 <switches_call+0x528>)
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
			_info4 = *info;
 800275e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	4b81      	ldr	r3, [pc, #516]	; (8002968 <switches_call+0x52c>)
 8002764:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 8002766:	4b80      	ldr	r3, [pc, #512]	; (8002968 <switches_call+0x52c>)
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	4b79      	ldr	r3, [pc, #484]	; (8002950 <switches_call+0x514>)
 800276c:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x04;
			sendMsg_SWITCHINFO(&Message);
 800276e:	4878      	ldr	r0, [pc, #480]	; (8002950 <switches_call+0x514>)
 8002770:	f7ff f9b0 	bl	8001ad4 <sendMsg_SWITCHINFO>
		{
 8002774:	e011      	b.n	800279a <switches_call+0x35e>
			//_info=*info=0;
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}
		else
		{
			Switch_Infovar.navigation=0;
 8002776:	4a7b      	ldr	r2, [pc, #492]	; (8002964 <switches_call+0x528>)
 8002778:	7813      	ldrb	r3, [r2, #0]
 800277a:	f36f 1347 	bfc	r3, #5, #3
 800277e:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002780:	4b78      	ldr	r3, [pc, #480]	; (8002964 <switches_call+0x528>)
 8002782:	643b      	str	r3, [r7, #64]	; 0x40
			_info4 = *info;
 8002784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	4b77      	ldr	r3, [pc, #476]	; (8002968 <switches_call+0x52c>)
 800278a:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 800278c:	4b76      	ldr	r3, [pc, #472]	; (8002968 <switches_call+0x52c>)
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <switches_call+0x514>)
 8002792:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x00;
			sendMsg_SWITCHINFO(&Message);
 8002794:	486e      	ldr	r0, [pc, #440]	; (8002950 <switches_call+0x514>)
 8002796:	f7ff f99d 	bl	8001ad4 <sendMsg_SWITCHINFO>
 800279a:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <switches_call+0x514>)
 800279c:	2200      	movs	r2, #0
 800279e:	715a      	strb	r2, [r3, #5]
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}

		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		if(count8>=254)
 80027a0:	4b72      	ldr	r3, [pc, #456]	; (800296c <switches_call+0x530>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2bfd      	cmp	r3, #253	; 0xfd
 80027a6:	d902      	bls.n	80027ae <switches_call+0x372>
			count8=0;
 80027a8:	4b70      	ldr	r3, [pc, #448]	; (800296c <switches_call+0x530>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
	}
	/* END OF NAVIGATION_5 */

	/* BEGIN OF BRAKE LIGHT */

	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7))==1)
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	4869      	ldr	r0, [pc, #420]	; (8002958 <switches_call+0x51c>)
 80027b2:	f001 fcb3 	bl	800411c <HAL_GPIO_ReadPin>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <switches_call+0x38e>
	{
		//brake_light op
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80027bc:	2104      	movs	r1, #4
 80027be:	486c      	ldr	r0, [pc, #432]	; (8002970 <switches_call+0x534>)
 80027c0:	f001 fcdc 	bl	800417c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	f000 fba3 	bl	8002f10 <HAL_Delay>

	/* END OF BRAKE LIGHT */


	/* BEGIN OF NAVIGATION_4 */
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6))==1)
 80027ca:	2140      	movs	r1, #64	; 0x40
 80027cc:	4862      	ldr	r0, [pc, #392]	; (8002958 <switches_call+0x51c>)
 80027ce:	f001 fca5 	bl	800411c <HAL_GPIO_ReadPin>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d140      	bne.n	800285a <switches_call+0x41e>
	{
		//navigation_4  (bottom 100=4)
		count8++;
 80027d8:	4b64      	ldr	r3, [pc, #400]	; (800296c <switches_call+0x530>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b62      	ldr	r3, [pc, #392]	; (800296c <switches_call+0x530>)
 80027e2:	701a      	strb	r2, [r3, #0]

		if((_info1==2)&&(count8%2==1))
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <switches_call+0x524>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d11a      	bne.n	8002822 <switches_call+0x3e6>
 80027ec:	4b5f      	ldr	r3, [pc, #380]	; (800296c <switches_call+0x530>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d013      	beq.n	8002822 <switches_call+0x3e6>
		{
			Switch_Infovar.navigation=4;
 80027fa:	4a5a      	ldr	r2, [pc, #360]	; (8002964 <switches_call+0x528>)
 80027fc:	7813      	ldrb	r3, [r2, #0]
 80027fe:	2104      	movs	r1, #4
 8002800:	f361 1347 	bfi	r3, r1, #5, #3
 8002804:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002806:	4b57      	ldr	r3, [pc, #348]	; (8002964 <switches_call+0x528>)
 8002808:	63fb      	str	r3, [r7, #60]	; 0x3c
			_info4 = *info;
 800280a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	4b56      	ldr	r3, [pc, #344]	; (8002968 <switches_call+0x52c>)
 8002810:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 8002812:	4b55      	ldr	r3, [pc, #340]	; (8002968 <switches_call+0x52c>)
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	4b4e      	ldr	r3, [pc, #312]	; (8002950 <switches_call+0x514>)
 8002818:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x04;
			sendMsg_SWITCHINFO(&Message);
 800281a:	484d      	ldr	r0, [pc, #308]	; (8002950 <switches_call+0x514>)
 800281c:	f7ff f95a 	bl	8001ad4 <sendMsg_SWITCHINFO>
		{
 8002820:	e011      	b.n	8002846 <switches_call+0x40a>
			//_info=*info=0;
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}
		else
		{
			Switch_Infovar.navigation=0;
 8002822:	4a50      	ldr	r2, [pc, #320]	; (8002964 <switches_call+0x528>)
 8002824:	7813      	ldrb	r3, [r2, #0]
 8002826:	f36f 1347 	bfc	r3, #5, #3
 800282a:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 800282c:	4b4d      	ldr	r3, [pc, #308]	; (8002964 <switches_call+0x528>)
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
			_info4 = *info;
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <switches_call+0x52c>)
 8002836:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <switches_call+0x52c>)
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	4b44      	ldr	r3, [pc, #272]	; (8002950 <switches_call+0x514>)
 800283e:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x00;
			sendMsg_SWITCHINFO(&Message);
 8002840:	4843      	ldr	r0, [pc, #268]	; (8002950 <switches_call+0x514>)
 8002842:	f7ff f947 	bl	8001ad4 <sendMsg_SWITCHINFO>
 8002846:	4b42      	ldr	r3, [pc, #264]	; (8002950 <switches_call+0x514>)
 8002848:	2200      	movs	r2, #0
 800284a:	715a      	strb	r2, [r3, #5]
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}

		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		if(count8>=254)
 800284c:	4b47      	ldr	r3, [pc, #284]	; (800296c <switches_call+0x530>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2bfd      	cmp	r3, #253	; 0xfd
 8002852:	d902      	bls.n	800285a <switches_call+0x41e>
			count8=0;
 8002854:	4b45      	ldr	r3, [pc, #276]	; (800296c <switches_call+0x530>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
	}

	/* END OF NAVIGATION_4 */

	/* BEGIN OF NAVIGATION_3 */
	if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))==1)
 800285a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285e:	4844      	ldr	r0, [pc, #272]	; (8002970 <switches_call+0x534>)
 8002860:	f001 fc5c 	bl	800411c <HAL_GPIO_ReadPin>
 8002864:	4603      	mov	r3, r0
 8002866:	2b01      	cmp	r3, #1
 8002868:	d140      	bne.n	80028ec <switches_call+0x4b0>
	{
		//navigation_3  (top 011)
		count7++;
 800286a:	4b42      	ldr	r3, [pc, #264]	; (8002974 <switches_call+0x538>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b40      	ldr	r3, [pc, #256]	; (8002974 <switches_call+0x538>)
 8002874:	701a      	strb	r2, [r3, #0]

		if((_info1==2)&&(count7%2==1))
 8002876:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <switches_call+0x524>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d11a      	bne.n	80028b4 <switches_call+0x478>
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <switches_call+0x538>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <switches_call+0x478>
		{
			Switch_Infovar.navigation=3;
 800288c:	4a35      	ldr	r2, [pc, #212]	; (8002964 <switches_call+0x528>)
 800288e:	7813      	ldrb	r3, [r2, #0]
 8002890:	2103      	movs	r1, #3
 8002892:	f361 1347 	bfi	r3, r1, #5, #3
 8002896:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002898:	4b32      	ldr	r3, [pc, #200]	; (8002964 <switches_call+0x528>)
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
			_info4 = *info;
 800289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <switches_call+0x52c>)
 80028a2:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 80028a4:	4b30      	ldr	r3, [pc, #192]	; (8002968 <switches_call+0x52c>)
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <switches_call+0x514>)
 80028aa:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x04;
			sendMsg_SWITCHINFO(&Message);
 80028ac:	4828      	ldr	r0, [pc, #160]	; (8002950 <switches_call+0x514>)
 80028ae:	f7ff f911 	bl	8001ad4 <sendMsg_SWITCHINFO>
		{
 80028b2:	e011      	b.n	80028d8 <switches_call+0x49c>
			//_info=*info=0;
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}
		else
		{
			Switch_Infovar.navigation=0;
 80028b4:	4a2b      	ldr	r2, [pc, #172]	; (8002964 <switches_call+0x528>)
 80028b6:	7813      	ldrb	r3, [r2, #0]
 80028b8:	f36f 1347 	bfc	r3, #5, #3
 80028bc:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <switches_call+0x528>)
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
			_info4 = *info;
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	4b28      	ldr	r3, [pc, #160]	; (8002968 <switches_call+0x52c>)
 80028c8:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <switches_call+0x52c>)
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <switches_call+0x514>)
 80028d0:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x00;
			sendMsg_SWITCHINFO(&Message);
 80028d2:	481f      	ldr	r0, [pc, #124]	; (8002950 <switches_call+0x514>)
 80028d4:	f7ff f8fe 	bl	8001ad4 <sendMsg_SWITCHINFO>
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <switches_call+0x514>)
 80028da:	2200      	movs	r2, #0
 80028dc:	715a      	strb	r2, [r3, #5]
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}

		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		if(count7>=254)
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <switches_call+0x538>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2bfd      	cmp	r3, #253	; 0xfd
 80028e4:	d902      	bls.n	80028ec <switches_call+0x4b0>
			count7=0;
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <switches_call+0x538>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
	}

	/* END OF NAVIGATION_3 */

	/* BEGIN OF NAVIGATION_2 */
	if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))==1)
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f2:	f001 fc13 	bl	800411c <HAL_GPIO_ReadPin>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d15b      	bne.n	80029b4 <switches_call+0x578>
	{
		//navigation_2  (010 - RIGHT)
		count6++;
 80028fc:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <switches_call+0x53c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <switches_call+0x53c>)
 8002906:	701a      	strb	r2, [r3, #0]

		if((_info1==2)&&(count6%2==1))
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <switches_call+0x524>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d135      	bne.n	800297c <switches_call+0x540>
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <switches_call+0x53c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d02e      	beq.n	800297c <switches_call+0x540>
		{
			Switch_Infovar.navigation=2;
 800291e:	4a11      	ldr	r2, [pc, #68]	; (8002964 <switches_call+0x528>)
 8002920:	7813      	ldrb	r3, [r2, #0]
 8002922:	2102      	movs	r1, #2
 8002924:	f361 1347 	bfi	r3, r1, #5, #3
 8002928:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <switches_call+0x528>)
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
			_info4 = *info;
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <switches_call+0x52c>)
 8002934:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <switches_call+0x52c>)
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <switches_call+0x514>)
 800293c:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x04;
			sendMsg_SWITCHINFO(&Message);
 800293e:	4804      	ldr	r0, [pc, #16]	; (8002950 <switches_call+0x514>)
 8002940:	f7ff f8c8 	bl	8001ad4 <sendMsg_SWITCHINFO>
		{
 8002944:	e02c      	b.n	80029a0 <switches_call+0x564>
 8002946:	bf00      	nop
 8002948:	200003cc 	.word	0x200003cc
 800294c:	200005d4 	.word	0x200005d4
 8002950:	2000060c 	.word	0x2000060c
 8002954:	20000623 	.word	0x20000623
 8002958:	48000800 	.word	0x48000800
 800295c:	200005d1 	.word	0x200005d1
 8002960:	200006cc 	.word	0x200006cc
 8002964:	20000160 	.word	0x20000160
 8002968:	2000067c 	.word	0x2000067c
 800296c:	20000621 	.word	0x20000621
 8002970:	48000400 	.word	0x48000400
 8002974:	200005c9 	.word	0x200005c9
 8002978:	200005d2 	.word	0x200005d2
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		}
		else
		{
			Switch_Infovar.navigation=0;
 800297c:	4a9f      	ldr	r2, [pc, #636]	; (8002bfc <switches_call+0x7c0>)
 800297e:	7813      	ldrb	r3, [r2, #0]
 8002980:	f36f 1347 	bfc	r3, #5, #3
 8002984:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002986:	4b9d      	ldr	r3, [pc, #628]	; (8002bfc <switches_call+0x7c0>)
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
			_info4 = *info;
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	4b9c      	ldr	r3, [pc, #624]	; (8002c00 <switches_call+0x7c4>)
 8002990:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 8002992:	4b9b      	ldr	r3, [pc, #620]	; (8002c00 <switches_call+0x7c4>)
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	4b9b      	ldr	r3, [pc, #620]	; (8002c04 <switches_call+0x7c8>)
 8002998:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x00;
			sendMsg_SWITCHINFO(&Message);
 800299a:	489a      	ldr	r0, [pc, #616]	; (8002c04 <switches_call+0x7c8>)
 800299c:	f7ff f89a 	bl	8001ad4 <sendMsg_SWITCHINFO>
 80029a0:	4b98      	ldr	r3, [pc, #608]	; (8002c04 <switches_call+0x7c8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	715a      	strb	r2, [r3, #5]
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}

		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		if(count6>=254)
 80029a6:	4b98      	ldr	r3, [pc, #608]	; (8002c08 <switches_call+0x7cc>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2bfd      	cmp	r3, #253	; 0xfd
 80029ac:	d902      	bls.n	80029b4 <switches_call+0x578>
			count6=0;
 80029ae:	4b96      	ldr	r3, [pc, #600]	; (8002c08 <switches_call+0x7cc>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
	}

	/* END OF NAVIGATION_2 */

	/* BEGIN OF NAVIGATION_1 */
	if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))==1)
 80029b4:	2110      	movs	r1, #16
 80029b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ba:	f001 fbaf 	bl	800411c <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d140      	bne.n	8002a46 <switches_call+0x60a>
	{
		//navigation_1  (left 001)
		count5++;
 80029c4:	4b91      	ldr	r3, [pc, #580]	; (8002c0c <switches_call+0x7d0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b8f      	ldr	r3, [pc, #572]	; (8002c0c <switches_call+0x7d0>)
 80029ce:	701a      	strb	r2, [r3, #0]
		//with key on condition rest switches work
		if((_info1==2)&&(count5%2==1))
 80029d0:	4b8f      	ldr	r3, [pc, #572]	; (8002c10 <switches_call+0x7d4>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11a      	bne.n	8002a0e <switches_call+0x5d2>
 80029d8:	4b8c      	ldr	r3, [pc, #560]	; (8002c0c <switches_call+0x7d0>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <switches_call+0x5d2>
		{
			Switch_Infovar.navigation=1;
 80029e6:	4a85      	ldr	r2, [pc, #532]	; (8002bfc <switches_call+0x7c0>)
 80029e8:	7813      	ldrb	r3, [r2, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	f361 1347 	bfi	r3, r1, #5, #3
 80029f0:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 80029f2:	4b82      	ldr	r3, [pc, #520]	; (8002bfc <switches_call+0x7c0>)
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
			_info4 = *info;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	4b81      	ldr	r3, [pc, #516]	; (8002c00 <switches_call+0x7c4>)
 80029fc:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 80029fe:	4b80      	ldr	r3, [pc, #512]	; (8002c00 <switches_call+0x7c4>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	4b80      	ldr	r3, [pc, #512]	; (8002c04 <switches_call+0x7c8>)
 8002a04:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x04;
			sendMsg_SWITCHINFO(&Message);
 8002a06:	487f      	ldr	r0, [pc, #508]	; (8002c04 <switches_call+0x7c8>)
 8002a08:	f7ff f864 	bl	8001ad4 <sendMsg_SWITCHINFO>
		{
 8002a0c:	e011      	b.n	8002a32 <switches_call+0x5f6>
			//_info=*info=0;
			//				memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}
		else
		{
			Switch_Infovar.navigation=0;
 8002a0e:	4a7b      	ldr	r2, [pc, #492]	; (8002bfc <switches_call+0x7c0>)
 8002a10:	7813      	ldrb	r3, [r2, #0]
 8002a12:	f36f 1347 	bfc	r3, #5, #3
 8002a16:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002a18:	4b78      	ldr	r3, [pc, #480]	; (8002bfc <switches_call+0x7c0>)
 8002a1a:	623b      	str	r3, [r7, #32]
			_info4 = *info;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	4b77      	ldr	r3, [pc, #476]	; (8002c00 <switches_call+0x7c4>)
 8002a22:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info4;
 8002a24:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <switches_call+0x7c4>)
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <switches_call+0x7c8>)
 8002a2a:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x00;
			sendMsg_SWITCHINFO(&Message);
 8002a2c:	4875      	ldr	r0, [pc, #468]	; (8002c04 <switches_call+0x7c8>)
 8002a2e:	f7ff f851 	bl	8001ad4 <sendMsg_SWITCHINFO>
 8002a32:	4b74      	ldr	r3, [pc, #464]	; (8002c04 <switches_call+0x7c8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	715a      	strb	r2, [r3, #5]
			//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
		}

		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		if(count5>=254)
 8002a38:	4b74      	ldr	r3, [pc, #464]	; (8002c0c <switches_call+0x7d0>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2bfd      	cmp	r3, #253	; 0xfd
 8002a3e:	d902      	bls.n	8002a46 <switches_call+0x60a>
			count5=0;
 8002a40:	4b72      	ldr	r3, [pc, #456]	; (8002c0c <switches_call+0x7d0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
	}

	/* END OF NAVIGATION_1 */

	/* BEGIN OF RIGHT INDICATOR */
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))==1)
 8002a46:	2104      	movs	r1, #4
 8002a48:	4872      	ldr	r0, [pc, #456]	; (8002c14 <switches_call+0x7d8>)
 8002a4a:	f001 fb67 	bl	800411c <HAL_GPIO_ReadPin>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d14e      	bne.n	8002af2 <switches_call+0x6b6>
	{
		//right_indicator
		count10++;
 8002a54:	4b70      	ldr	r3, [pc, #448]	; (8002c18 <switches_call+0x7dc>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	4b6e      	ldr	r3, [pc, #440]	; (8002c18 <switches_call+0x7dc>)
 8002a5e:	701a      	strb	r2, [r3, #0]
				//with key on condition rest switches work
				if((_info1==2)&&(count10%2==1))
 8002a60:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <switches_call+0x7d4>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d121      	bne.n	8002aac <switches_call+0x670>
 8002a68:	4b6b      	ldr	r3, [pc, #428]	; (8002c18 <switches_call+0x7dc>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01a      	beq.n	8002aac <switches_call+0x670>
				{
					Switch_Infovar.indicator=2;
 8002a76:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <switches_call+0x7c0>)
 8002a78:	7813      	ldrb	r3, [r2, #0]
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	f361 03c4 	bfi	r3, r1, #3, #2
 8002a80:	7013      	strb	r3, [r2, #0]
					j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002a82:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <switches_call+0x7c0>)
 8002a84:	61fb      	str	r3, [r7, #28]
					_info4 = *info;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <switches_call+0x7c4>)
 8002a8c:	701a      	strb	r2, [r3, #0]
					Message.Mxe.Data[0]=_info4;
 8002a8e:	4b5c      	ldr	r3, [pc, #368]	; (8002c00 <switches_call+0x7c4>)
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <switches_call+0x7c8>)
 8002a94:	715a      	strb	r2, [r3, #5]
					//Message.Mxe.Data[0]=0x04;
					sendMsg_SWITCHINFO(&Message);
 8002a96:	485b      	ldr	r0, [pc, #364]	; (8002c04 <switches_call+0x7c8>)
 8002a98:	f7ff f81c 	bl	8001ad4 <sendMsg_SWITCHINFO>
					//_info=*info=0;
					//				memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa6:	f001 fb51 	bl	800414c <HAL_GPIO_WritePin>
				{
 8002aaa:	e018      	b.n	8002ade <switches_call+0x6a2>
				}
				else
				{
					Switch_Infovar.indicator=0;
 8002aac:	4a53      	ldr	r2, [pc, #332]	; (8002bfc <switches_call+0x7c0>)
 8002aae:	7813      	ldrb	r3, [r2, #0]
 8002ab0:	f36f 03c4 	bfc	r3, #3, #2
 8002ab4:	7013      	strb	r3, [r2, #0]
					j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <switches_call+0x7c0>)
 8002ab8:	61bb      	str	r3, [r7, #24]
					_info4 = *info;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <switches_call+0x7c4>)
 8002ac0:	701a      	strb	r2, [r3, #0]
					Message.Mxe.Data[0]=_info4;
 8002ac2:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <switches_call+0x7c4>)
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <switches_call+0x7c8>)
 8002ac8:	715a      	strb	r2, [r3, #5]
					//Message.Mxe.Data[0]=0x00;
					sendMsg_SWITCHINFO(&Message);
 8002aca:	484e      	ldr	r0, [pc, #312]	; (8002c04 <switches_call+0x7c8>)
 8002acc:	f7ff f802 	bl	8001ad4 <sendMsg_SWITCHINFO>
					//_info=*info=0;
					//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ada:	f001 fb37 	bl	800414c <HAL_GPIO_WritePin>
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <switches_call+0x7c8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	715a      	strb	r2, [r3, #5]
				}

				memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

				if(count10>=254)
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <switches_call+0x7dc>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2bfd      	cmp	r3, #253	; 0xfd
 8002aea:	d902      	bls.n	8002af2 <switches_call+0x6b6>
					count10=0;
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <switches_call+0x7dc>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
	}

	/* END OF RIGHT INDICATOR */

	/* BEGIN OF INDICATOR MIDDLE */
	if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))==1)
 8002af2:	2101      	movs	r1, #1
 8002af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af8:	f001 fb10 	bl	800411c <HAL_GPIO_ReadPin>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d14b      	bne.n	8002b9a <switches_call+0x75e>
	{
		//indicator_middle
		count11++;
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <switches_call+0x7e0>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <switches_call+0x7e0>)
 8002b0c:	701a      	strb	r2, [r3, #0]
						//with key on condition rest switches work
						if((_info1==2)&&(count11%2==1))
 8002b0e:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <switches_call+0x7d4>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d11f      	bne.n	8002b56 <switches_call+0x71a>
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <switches_call+0x7e0>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d018      	beq.n	8002b56 <switches_call+0x71a>
						{
							Switch_Infovar.indicator=3;
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <switches_call+0x7c0>)
 8002b26:	7813      	ldrb	r3, [r2, #0]
 8002b28:	f043 0318 	orr.w	r3, r3, #24
 8002b2c:	7013      	strb	r3, [r2, #0]
							j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002b2e:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <switches_call+0x7c0>)
 8002b30:	617b      	str	r3, [r7, #20]
							_info4 = *info;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <switches_call+0x7c4>)
 8002b38:	701a      	strb	r2, [r3, #0]
							Message.Mxe.Data[0]=_info4;
 8002b3a:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <switches_call+0x7c4>)
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <switches_call+0x7c8>)
 8002b40:	715a      	strb	r2, [r3, #5]
							//Message.Mxe.Data[0]=0x04;
							sendMsg_SWITCHINFO(&Message);
 8002b42:	4830      	ldr	r0, [pc, #192]	; (8002c04 <switches_call+0x7c8>)
 8002b44:	f7fe ffc6 	bl	8001ad4 <sendMsg_SWITCHINFO>
							//_info=*info=0;
							//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,1);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b50:	f001 fafc 	bl	800414c <HAL_GPIO_WritePin>
						{
 8002b54:	e017      	b.n	8002b86 <switches_call+0x74a>
						}
						else
						{
							Switch_Infovar.indicator=0;
 8002b56:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <switches_call+0x7c0>)
 8002b58:	7813      	ldrb	r3, [r2, #0]
 8002b5a:	f36f 03c4 	bfc	r3, #3, #2
 8002b5e:	7013      	strb	r3, [r2, #0]
							j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002b60:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <switches_call+0x7c0>)
 8002b62:	613b      	str	r3, [r7, #16]
							_info4 = *info;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <switches_call+0x7c4>)
 8002b6a:	701a      	strb	r2, [r3, #0]
							Message.Mxe.Data[0]=_info4;
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <switches_call+0x7c4>)
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <switches_call+0x7c8>)
 8002b72:	715a      	strb	r2, [r3, #5]
							//Message.Mxe.Data[0]=0x00;
							sendMsg_SWITCHINFO(&Message);
 8002b74:	4823      	ldr	r0, [pc, #140]	; (8002c04 <switches_call+0x7c8>)
 8002b76:	f7fe ffad 	bl	8001ad4 <sendMsg_SWITCHINFO>
							//_info=*info=0;
							//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,0);//PA0
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b82:	f001 fae3 	bl	800414c <HAL_GPIO_WritePin>
 8002b86:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <switches_call+0x7c8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	715a      	strb	r2, [r3, #5]
						}

						memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

						if(count11>=254)
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <switches_call+0x7e0>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2bfd      	cmp	r3, #253	; 0xfd
 8002b92:	d902      	bls.n	8002b9a <switches_call+0x75e>
							count11=0;
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <switches_call+0x7e0>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]

	}
	/* END OF INDICATOR MIDDLE */

	/* BEGIN OF FRONT BRAKE */
	if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))==1)
 8002b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b9e:	4820      	ldr	r0, [pc, #128]	; (8002c20 <switches_call+0x7e4>)
 8002ba0:	f001 fabc 	bl	800411c <HAL_GPIO_ReadPin>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d163      	bne.n	8002c72 <switches_call+0x836>
	{
		//brake_front
		count4++;
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <switches_call+0x7e8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <switches_call+0x7e8>)
 8002bb4:	701a      	strb	r2, [r3, #0]
		if((_info1==2)&&(count4%2==1))
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <switches_call+0x7d4>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d138      	bne.n	8002c30 <switches_call+0x7f4>
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <switches_call+0x7e8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d031      	beq.n	8002c30 <switches_call+0x7f4>
		{
			Motorcontroller_commandvar.brake=1;
 8002bcc:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <switches_call+0x7ec>)
 8002bce:	7813      	ldrb	r3, [r2, #0]
 8002bd0:	f043 0304 	orr.w	r3, r3, #4
 8002bd4:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Motorcontroller_commandvar);
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <switches_call+0x7ec>)
 8002bd8:	60fb      	str	r3, [r7, #12]
			_info2=*info;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <switches_call+0x7f0>)
 8002be0:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info2;
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <switches_call+0x7f0>)
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <switches_call+0x7c8>)
 8002be8:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x01;
			sendMsg_MOTORCONTROLLERCOMMANDS(&Message);
 8002bea:	4806      	ldr	r0, [pc, #24]	; (8002c04 <switches_call+0x7c8>)
 8002bec:	f7fe ff3c 	bl	8001a68 <sendMsg_MOTORCONTROLLERCOMMANDS>
			//_info=*info=0;
			//	memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	4807      	ldr	r0, [pc, #28]	; (8002c14 <switches_call+0x7d8>)
 8002bf6:	f001 faa9 	bl	800414c <HAL_GPIO_WritePin>
		{
 8002bfa:	e030      	b.n	8002c5e <switches_call+0x822>
 8002bfc:	20000160 	.word	0x20000160
 8002c00:	2000067c 	.word	0x2000067c
 8002c04:	2000060c 	.word	0x2000060c
 8002c08:	200005d2 	.word	0x200005d2
 8002c0c:	20000622 	.word	0x20000622
 8002c10:	200006cc 	.word	0x200006cc
 8002c14:	48000800 	.word	0x48000800
 8002c18:	2000067d 	.word	0x2000067d
 8002c1c:	200005d0 	.word	0x200005d0
 8002c20:	48000400 	.word	0x48000400
 8002c24:	200005d3 	.word	0x200005d3
 8002c28:	200003cc 	.word	0x200003cc
 8002c2c:	200005d4 	.word	0x200005d4
		}
		else
		{
			Motorcontroller_commandvar.brake=0;
 8002c30:	4a45      	ldr	r2, [pc, #276]	; (8002d48 <switches_call+0x90c>)
 8002c32:	7813      	ldrb	r3, [r2, #0]
 8002c34:	f36f 0382 	bfc	r3, #2, #1
 8002c38:	7013      	strb	r3, [r2, #0]
			j1939_uint8_t *info=(j1939_uint8_t*)(&Motorcontroller_commandvar);
 8002c3a:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <switches_call+0x90c>)
 8002c3c:	60bb      	str	r3, [r7, #8]
			_info2=*info;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <switches_call+0x910>)
 8002c44:	701a      	strb	r2, [r3, #0]
			Message.Mxe.Data[0]=_info2;
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <switches_call+0x910>)
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <switches_call+0x914>)
 8002c4c:	715a      	strb	r2, [r3, #5]
			//Message.Mxe.Data[0]=0x00;
			sendMsg_MOTORCONTROLLERCOMMANDS(&Message);
 8002c4e:	4840      	ldr	r0, [pc, #256]	; (8002d50 <switches_call+0x914>)
 8002c50:	f7fe ff0a 	bl	8001a68 <sendMsg_MOTORCONTROLLERCOMMANDS>
			//				_info=*info=0;
			//	memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	483e      	ldr	r0, [pc, #248]	; (8002d54 <switches_call+0x918>)
 8002c5a:	f001 fa77 	bl	800414c <HAL_GPIO_WritePin>
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	; (8002d50 <switches_call+0x914>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	715a      	strb	r2, [r3, #5]

		}
		memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

		if(count4>=254)
 8002c64:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <switches_call+0x91c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2bfd      	cmp	r3, #253	; 0xfd
 8002c6a:	d902      	bls.n	8002c72 <switches_call+0x836>
			count4=0;
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <switches_call+0x91c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
	}

	/* END OF FRONT BRAKE */

	/* BEGIN OF HIGH BEAM */
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12))==1)
 8002c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c76:	4837      	ldr	r0, [pc, #220]	; (8002d54 <switches_call+0x918>)
 8002c78:	f001 fa50 	bl	800411c <HAL_GPIO_ReadPin>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d106      	bne.n	8002c90 <switches_call+0x854>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,1);
 8002c82:	2201      	movs	r2, #1
 8002c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8c:	f001 fa5e 	bl	800414c <HAL_GPIO_WritePin>

	}

	/* END OF HIGH BEAM */
/* BEGIN OF LEFT INDICATOR */
	if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3))==1)
 8002c90:	2108      	movs	r1, #8
 8002c92:	4830      	ldr	r0, [pc, #192]	; (8002d54 <switches_call+0x918>)
 8002c94:	f001 fa42 	bl	800411c <HAL_GPIO_ReadPin>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d14a      	bne.n	8002d34 <switches_call+0x8f8>
	{
		count11++;
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <switches_call+0x920>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <switches_call+0x920>)
 8002ca8:	701a      	strb	r2, [r3, #0]

						if((_info1==2)&&(count11%2==1))
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <switches_call+0x924>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d11f      	bne.n	8002cf2 <switches_call+0x8b6>
 8002cb2:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <switches_call+0x920>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d018      	beq.n	8002cf2 <switches_call+0x8b6>
						{
							Switch_Infovar.indicator=1;
 8002cc0:	4a28      	ldr	r2, [pc, #160]	; (8002d64 <switches_call+0x928>)
 8002cc2:	7813      	ldrb	r3, [r2, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8002cca:	7013      	strb	r3, [r2, #0]
							j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <switches_call+0x928>)
 8002cce:	607b      	str	r3, [r7, #4]
							_info4 = *info;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <switches_call+0x92c>)
 8002cd6:	701a      	strb	r2, [r3, #0]
							Message.Mxe.Data[0]=_info4;
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <switches_call+0x92c>)
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <switches_call+0x914>)
 8002cde:	715a      	strb	r2, [r3, #5]
							//Message.Mxe.Data[0]=0x04;
							sendMsg_SWITCHINFO(&Message);
 8002ce0:	481b      	ldr	r0, [pc, #108]	; (8002d50 <switches_call+0x914>)
 8002ce2:	f7fe fef7 	bl	8001ad4 <sendMsg_SWITCHINFO>
							//_info=*info=0;
							//				memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,1);
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	2104      	movs	r1, #4
 8002cea:	4820      	ldr	r0, [pc, #128]	; (8002d6c <switches_call+0x930>)
 8002cec:	f001 fa2e 	bl	800414c <HAL_GPIO_WritePin>
						{
 8002cf0:	e016      	b.n	8002d20 <switches_call+0x8e4>
						}
						else
						{
							Switch_Infovar.indicator=0;
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <switches_call+0x928>)
 8002cf4:	7813      	ldrb	r3, [r2, #0]
 8002cf6:	f36f 03c4 	bfc	r3, #3, #2
 8002cfa:	7013      	strb	r3, [r2, #0]
							j1939_uint8_t *info=(j1939_uint8_t*)(&Switch_Infovar);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <switches_call+0x928>)
 8002cfe:	603b      	str	r3, [r7, #0]
							_info4 = *info;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <switches_call+0x92c>)
 8002d06:	701a      	strb	r2, [r3, #0]
							Message.Mxe.Data[0]=_info4;
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <switches_call+0x92c>)
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <switches_call+0x914>)
 8002d0e:	715a      	strb	r2, [r3, #5]
							//Message.Mxe.Data[0]=0x00;
							sendMsg_SWITCHINFO(&Message);
 8002d10:	480f      	ldr	r0, [pc, #60]	; (8002d50 <switches_call+0x914>)
 8002d12:	f7fe fedf 	bl	8001ad4 <sendMsg_SWITCHINFO>
							//_info=*info=0;
							//memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,1);//PD2 OP
 8002d16:	2201      	movs	r2, #1
 8002d18:	2104      	movs	r1, #4
 8002d1a:	4814      	ldr	r0, [pc, #80]	; (8002d6c <switches_call+0x930>)
 8002d1c:	f001 fa16 	bl	800414c <HAL_GPIO_WritePin>
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <switches_call+0x914>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	715a      	strb	r2, [r3, #5]
						}

						memset(Message.Mxe.Data, 0, 1*sizeof(Message.Mxe.Data[0]));

						if(count11>=254)
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <switches_call+0x920>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2bfd      	cmp	r3, #253	; 0xfd
 8002d2c:	d902      	bls.n	8002d34 <switches_call+0x8f8>
							count11=0;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <switches_call+0x920>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
	/* BEGIN OF HIGH  BEAM OP */




	HAL_Delay(100);
 8002d34:	2064      	movs	r0, #100	; 0x64
 8002d36:	f000 f8eb 	bl	8002f10 <HAL_Delay>
	J1939_Poll();
 8002d3a:	f7fd fcab 	bl	8000694 <J1939_Poll>


}
 8002d3e:	bf00      	nop
 8002d40:	3760      	adds	r7, #96	; 0x60
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200003cc 	.word	0x200003cc
 8002d4c:	200005d4 	.word	0x200005d4
 8002d50:	2000060c 	.word	0x2000060c
 8002d54:	48000800 	.word	0x48000800
 8002d58:	200005d3 	.word	0x200005d3
 8002d5c:	200005d0 	.word	0x200005d0
 8002d60:	200006cc 	.word	0x200006cc
 8002d64:	20000160 	.word	0x20000160
 8002d68:	2000067c 	.word	0x2000067c
 8002d6c:	48000c00 	.word	0x48000c00

08002d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <SystemInit+0x5c>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <SystemInit+0x5c>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <SystemInit+0x60>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <SystemInit+0x60>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <SystemInit+0x60>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <SystemInit+0x60>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <SystemInit+0x60>)
 8002d9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002da0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002da4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <SystemInit+0x60>)
 8002da8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <SystemInit+0x60>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <SystemInit+0x60>)
 8002db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <SystemInit+0x60>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000ed00 	.word	0xe000ed00
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dd8:	f7ff ffca 	bl	8002d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ddc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002dde:	e003      	b.n	8002de8 <LoopCopyDataInit>

08002de0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002de2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002de4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002de6:	3104      	adds	r1, #4

08002de8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002dec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002dee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002df0:	d3f6      	bcc.n	8002de0 <CopyDataInit>
	ldr	r2, =_sbss
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002df4:	e002      	b.n	8002dfc <LoopFillZerobss>

08002df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002df6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002df8:	f842 3b04 	str.w	r3, [r2], #4

08002dfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <LoopForever+0x16>)
	cmp	r2, r3
 8002dfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e00:	d3f9      	bcc.n	8002df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e02:	f003 fce7 	bl	80067d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e06:	f7fe feef 	bl	8001be8 <main>

08002e0a <LoopForever>:

LoopForever:
    b LoopForever
 8002e0a:	e7fe      	b.n	8002e0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e0c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8002e10:	08006914 	.word	0x08006914
	ldr	r0, =_sdata
 8002e14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e18:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002e1c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002e20:	200006d4 	.word	0x200006d4

08002e24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC1_IRQHandler>

08002e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e30:	2003      	movs	r0, #3
 8002e32:	f000 ffb7 	bl	8003da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e36:	2000      	movs	r0, #0
 8002e38:	f000 f80e 	bl	8002e58 <HAL_InitTick>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	71fb      	strb	r3, [r7, #7]
 8002e46:	e001      	b.n	8002e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e48:	f7ff f986 	bl	8002158 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_InitTick+0x6c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d023      	beq.n	8002eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_InitTick+0x70>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_InitTick+0x6c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 ffc3 	bl	8003e0e <HAL_SYSTICK_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b0f      	cmp	r3, #15
 8002e92:	d809      	bhi.n	8002ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e94:	2200      	movs	r2, #0
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f000 ff8d 	bl	8003dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <HAL_InitTick+0x74>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e007      	b.n	8002eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	e004      	b.n	8002eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
 8002eb2:	e001      	b.n	8002eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_IncTick+0x20>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x24>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <HAL_IncTick+0x24>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	200006d0 	.word	0x200006d0

08002ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return uwTick;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_GetTick+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200006d0 	.word	0x200006d0

08002f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f18:	f7ff ffee 	bl	8002ef8 <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d005      	beq.n	8002f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_Delay+0x44>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f36:	bf00      	nop
 8002f38:	f7ff ffde 	bl	8002ef8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d8f7      	bhi.n	8002f38 <HAL_Delay+0x28>
  {
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000008 	.word	0x20000008

08002f58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e11c      	b.n	80031a4 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d131      	bne.n	8002fda <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a8c      	ldr	r2, [pc, #560]	; (80031ac <HAL_CAN_Init+0x254>)
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a8c      	ldr	r2, [pc, #560]	; (80031b0 <HAL_CAN_Init+0x258>)
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a8b      	ldr	r2, [pc, #556]	; (80031b4 <HAL_CAN_Init+0x25c>)
 8002f86:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a8b      	ldr	r2, [pc, #556]	; (80031b8 <HAL_CAN_Init+0x260>)
 8002f8c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a8a      	ldr	r2, [pc, #552]	; (80031bc <HAL_CAN_Init+0x264>)
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a8a      	ldr	r2, [pc, #552]	; (80031c0 <HAL_CAN_Init+0x268>)
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a89      	ldr	r2, [pc, #548]	; (80031c4 <HAL_CAN_Init+0x26c>)
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a89      	ldr	r2, [pc, #548]	; (80031c8 <HAL_CAN_Init+0x270>)
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a88      	ldr	r2, [pc, #544]	; (80031cc <HAL_CAN_Init+0x274>)
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a88      	ldr	r2, [pc, #544]	; (80031d0 <HAL_CAN_Init+0x278>)
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a87      	ldr	r2, [pc, #540]	; (80031d4 <HAL_CAN_Init+0x27c>)
 8002fb6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a87      	ldr	r2, [pc, #540]	; (80031d8 <HAL_CAN_Init+0x280>)
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a86      	ldr	r2, [pc, #536]	; (80031dc <HAL_CAN_Init+0x284>)
 8002fc2:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a84      	ldr	r2, [pc, #528]	; (80031e0 <HAL_CAN_Init+0x288>)
 8002fd0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0202 	bic.w	r2, r2, #2
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fea:	f7ff ff85 	bl	8002ef8 <HAL_GetTick>
 8002fee:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ff0:	e012      	b.n	8003018 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ff2:	f7ff ff81 	bl	8002ef8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b0a      	cmp	r3, #10
 8002ffe:	d90b      	bls.n	8003018 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2205      	movs	r2, #5
 8003010:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0c5      	b.n	80031a4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1e5      	bne.n	8002ff2 <HAL_CAN_Init+0x9a>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003036:	f7ff ff5f 	bl	8002ef8 <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800303c:	e012      	b.n	8003064 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800303e:	f7ff ff5b 	bl	8002ef8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b0a      	cmp	r3, #10
 800304a:	d90b      	bls.n	8003064 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2205      	movs	r2, #5
 800305c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e09f      	b.n	80031a4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0e5      	beq.n	800303e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7e1b      	ldrb	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d108      	bne.n	800308c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e007      	b.n	800309c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7e5b      	ldrb	r3, [r3, #25]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d108      	bne.n	80030b6 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e007      	b.n	80030c6 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7e9b      	ldrb	r3, [r3, #26]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d108      	bne.n	80030e0 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0220 	orr.w	r2, r2, #32
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e007      	b.n	80030f0 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0220 	bic.w	r2, r2, #32
 80030ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7edb      	ldrb	r3, [r3, #27]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d108      	bne.n	800310a <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0210 	bic.w	r2, r2, #16
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e007      	b.n	800311a <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0210 	orr.w	r2, r2, #16
 8003118:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7f1b      	ldrb	r3, [r3, #28]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d108      	bne.n	8003134 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0208 	orr.w	r2, r2, #8
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e007      	b.n	8003144 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0208 	bic.w	r2, r2, #8
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7f5b      	ldrb	r3, [r3, #29]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d108      	bne.n	800315e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0204 	orr.w	r2, r2, #4
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e007      	b.n	800316e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0204 	bic.w	r2, r2, #4
 800316c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	ea42 0103 	orr.w	r1, r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	0800198d 	.word	0x0800198d
 80031b0:	08003ba1 	.word	0x08003ba1
 80031b4:	08003bb5 	.word	0x08003bb5
 80031b8:	08003bc9 	.word	0x08003bc9
 80031bc:	080018f1 	.word	0x080018f1
 80031c0:	08001925 	.word	0x08001925
 80031c4:	08001959 	.word	0x08001959
 80031c8:	08003b65 	.word	0x08003b65
 80031cc:	08003b79 	.word	0x08003b79
 80031d0:	08003b8d 	.word	0x08003b8d
 80031d4:	08003bdd 	.word	0x08003bdd
 80031d8:	08003bf1 	.word	0x08003bf1
 80031dc:	080019d9 	.word	0x080019d9
 80031e0:	080021a1 	.word	0x080021a1

080031e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d003      	beq.n	800320a <HAL_CAN_ConfigFilter+0x26>
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b02      	cmp	r3, #2
 8003206:	f040 80aa 	bne.w	800335e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2201      	movs	r2, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43db      	mvns	r3, r3
 8003234:	401a      	ands	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d123      	bne.n	800328c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43db      	mvns	r3, r3
 800324e:	401a      	ands	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003266:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3248      	adds	r2, #72	; 0x48
 800326c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003280:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003282:	6979      	ldr	r1, [r7, #20]
 8003284:	3348      	adds	r3, #72	; 0x48
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d122      	bne.n	80032da <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	431a      	orrs	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3248      	adds	r2, #72	; 0x48
 80032ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032d0:	6979      	ldr	r1, [r7, #20]
 80032d2:	3348      	adds	r3, #72	; 0x48
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	401a      	ands	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032f4:	e007      	b.n	8003306 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	431a      	orrs	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	401a      	ands	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003320:	e007      	b.n	8003332 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	431a      	orrs	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	431a      	orrs	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003350:	f023 0201 	bic.w	r2, r3, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e006      	b.n	800336c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d12e      	bne.n	80033ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033a4:	f7ff fda8 	bl	8002ef8 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033aa:	e012      	b.n	80033d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033ac:	f7ff fda4 	bl	8002ef8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b0a      	cmp	r3, #10
 80033b8:	d90b      	bls.n	80033d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2205      	movs	r2, #5
 80033ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e012      	b.n	80033f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e006      	b.n	80033f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
  }
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003414:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800341e:	7ffb      	ldrb	r3, [r7, #31]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d003      	beq.n	800342c <HAL_CAN_AddTxMessage+0x2c>
 8003424:	7ffb      	ldrb	r3, [r7, #31]
 8003426:	2b02      	cmp	r3, #2
 8003428:	f040 80b8 	bne.w	800359c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a0 	beq.w	800358c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	0e1b      	lsrs	r3, r3, #24
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d907      	bls.n	800346c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e09e      	b.n	80035aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800346c:	2201      	movs	r2, #1
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	409a      	lsls	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	6809      	ldr	r1, [r1, #0]
 800348c:	431a      	orrs	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3318      	adds	r3, #24
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	440b      	add	r3, r1
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e00f      	b.n	80034ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80034ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3318      	adds	r3, #24
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	440b      	add	r3, r1
 80034b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3318      	adds	r3, #24
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	440b      	add	r3, r1
 80034ca:	3304      	adds	r3, #4
 80034cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	7d1b      	ldrb	r3, [r3, #20]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d111      	bne.n	80034fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3318      	adds	r3, #24
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	6811      	ldr	r1, [r2, #0]
 80034ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3318      	adds	r3, #24
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	440b      	add	r3, r1
 80034f6:	3304      	adds	r3, #4
 80034f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3307      	adds	r3, #7
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	061a      	lsls	r2, r3, #24
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3306      	adds	r3, #6
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3305      	adds	r3, #5
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	4313      	orrs	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	3204      	adds	r2, #4
 800351a:	7812      	ldrb	r2, [r2, #0]
 800351c:	4610      	mov	r0, r2
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6811      	ldr	r1, [r2, #0]
 8003522:	ea43 0200 	orr.w	r2, r3, r0
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	440b      	add	r3, r1
 800352c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003530:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3303      	adds	r3, #3
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	061a      	lsls	r2, r3, #24
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3302      	adds	r3, #2
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3301      	adds	r3, #1
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	4313      	orrs	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	4610      	mov	r0, r2
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	6811      	ldr	r1, [r2, #0]
 8003558:	ea43 0200 	orr.w	r2, r3, r0
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	440b      	add	r3, r1
 8003562:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003566:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3318      	adds	r3, #24
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4413      	add	r3, r2
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	6811      	ldr	r1, [r2, #0]
 800357a:	f043 0201 	orr.w	r2, r3, #1
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3318      	adds	r3, #24
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	440b      	add	r3, r1
 8003586:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	e00e      	b.n	80035aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e006      	b.n	80035aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d003      	beq.n	80035da <HAL_CAN_GetRxMessage+0x24>
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	f040 80f3 	bne.w	80037c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10e      	bne.n	80035fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d116      	bne.n	800361c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0e7      	b.n	80037ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d8      	b.n	80037ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	331b      	adds	r3, #27
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	4413      	add	r3, r2
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0204 	and.w	r2, r3, #4
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10c      	bne.n	8003654 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	331b      	adds	r3, #27
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0d5b      	lsrs	r3, r3, #21
 800364a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e00b      	b.n	800366c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	331b      	adds	r3, #27
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	4413      	add	r3, r2
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	331b      	adds	r3, #27
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4413      	add	r3, r2
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0202 	and.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	331b      	adds	r3, #27
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	4413      	add	r3, r2
 800368e:	3304      	adds	r3, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	331b      	adds	r3, #27
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	331b      	adds	r3, #27
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4413      	add	r3, r2
 80036be:	3304      	adds	r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	0c1b      	lsrs	r3, r3, #16
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0a1a      	lsrs	r2, r3, #8
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	4413      	add	r3, r2
 8003704:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0c1a      	lsrs	r2, r3, #16
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	3302      	adds	r3, #2
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4413      	add	r3, r2
 800371e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e1a      	lsrs	r2, r3, #24
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3303      	adds	r3, #3
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	3304      	adds	r3, #4
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4413      	add	r3, r2
 8003750:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	0a1a      	lsrs	r2, r3, #8
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	3305      	adds	r3, #5
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	4413      	add	r3, r2
 800376a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0c1a      	lsrs	r2, r3, #16
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	3306      	adds	r3, #6
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4413      	add	r3, r2
 8003784:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0e1a      	lsrs	r2, r3, #24
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	3307      	adds	r3, #7
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d108      	bne.n	80037ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0220 	orr.w	r2, r2, #32
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	e007      	b.n	80037bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e006      	b.n	80037ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8083 	beq.w	8003928 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d025      	beq.n	8003878 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2201      	movs	r2, #1
 8003832:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
 8003846:	e017      	b.n	8003878 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	e00d      	b.n	8003878 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e003      	b.n	8003878 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d026      	beq.n	80038d0 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800388a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
 800389e:	e017      	b.n	80038d0 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	e00d      	b.n	80038d0 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	e003      	b.n	80038d0 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d026      	beq.n	8003928 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e017      	b.n	8003928 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	e00d      	b.n	8003928 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	e003      	b.n	8003928 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003942:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2210      	movs	r2, #16
 800394a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2208      	movs	r2, #8
 8003966:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2210      	movs	r2, #16
 80039b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2210      	movs	r2, #16
 8003a12:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00c      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2208      	movs	r2, #8
 8003a36:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d07b      	beq.n	8003b42 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d072      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	f043 0304 	orr.w	r3, r3, #4
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d043      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03e      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac2:	2b60      	cmp	r3, #96	; 0x60
 8003ac4:	d02b      	beq.n	8003b1e <HAL_CAN_IRQHandler+0x344>
 8003ac6:	2b60      	cmp	r3, #96	; 0x60
 8003ac8:	d82e      	bhi.n	8003b28 <HAL_CAN_IRQHandler+0x34e>
 8003aca:	2b50      	cmp	r3, #80	; 0x50
 8003acc:	d022      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x33a>
 8003ace:	2b50      	cmp	r3, #80	; 0x50
 8003ad0:	d82a      	bhi.n	8003b28 <HAL_CAN_IRQHandler+0x34e>
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d019      	beq.n	8003b0a <HAL_CAN_IRQHandler+0x330>
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d826      	bhi.n	8003b28 <HAL_CAN_IRQHandler+0x34e>
 8003ada:	2b30      	cmp	r3, #48	; 0x30
 8003adc:	d010      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x326>
 8003ade:	2b30      	cmp	r3, #48	; 0x30
 8003ae0:	d822      	bhi.n	8003b28 <HAL_CAN_IRQHandler+0x34e>
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d002      	beq.n	8003aec <HAL_CAN_IRQHandler+0x312>
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d005      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003aea:	e01d      	b.n	8003b28 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f043 0308 	orr.w	r3, r3, #8
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003af4:	e019      	b.n	8003b2a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	f043 0310 	orr.w	r3, r3, #16
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003afe:	e014      	b.n	8003b2a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f043 0320 	orr.w	r3, r3, #32
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b08:	e00f      	b.n	8003b2a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b12:	e00a      	b.n	8003b2a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b1c:	e005      	b.n	8003b2a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b26:	e000      	b.n	8003b2a <HAL_CAN_IRQHandler+0x350>
            break;
 8003b28:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b38:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c36:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	60d3      	str	r3, [r2, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	; (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	; (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	; (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d70:	d301      	bcc.n	8003d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00f      	b.n	8003d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <SysTick_Config+0x40>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7e:	210f      	movs	r1, #15
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	f7ff ff8e 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <SysTick_Config+0x40>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <SysTick_Config+0x40>)
 8003d90:	2207      	movs	r2, #7
 8003d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	e000e010 	.word	0xe000e010

08003da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff29 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dcc:	f7ff ff3e 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	f7ff ff8e 	bl	8003cf8 <NVIC_EncodePriority>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff5d 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff31 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ffa2 	bl	8003d60 <SysTick_Config>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e36:	e154      	b.n	80040e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8146 	beq.w	80040dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d00b      	beq.n	8003e70 <HAL_GPIO_Init+0x48>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d007      	beq.n	8003e70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e64:	2b11      	cmp	r3, #17
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b12      	cmp	r3, #18
 8003e6e:	d130      	bne.n	8003ed2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0201 	and.w	r2, r3, #1
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0xea>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b12      	cmp	r3, #18
 8003f10:	d123      	bne.n	8003f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	08da      	lsrs	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3208      	adds	r2, #8
 8003f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	220f      	movs	r2, #15
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	08da      	lsrs	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3208      	adds	r2, #8
 8003f54:	6939      	ldr	r1, [r7, #16]
 8003f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	2203      	movs	r2, #3
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0203 	and.w	r2, r3, #3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80a0 	beq.w	80040dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9c:	4b58      	ldr	r3, [pc, #352]	; (8004100 <HAL_GPIO_Init+0x2d8>)
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	4a57      	ldr	r2, [pc, #348]	; (8004100 <HAL_GPIO_Init+0x2d8>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6613      	str	r3, [r2, #96]	; 0x60
 8003fa8:	4b55      	ldr	r3, [pc, #340]	; (8004100 <HAL_GPIO_Init+0x2d8>)
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fb4:	4a53      	ldr	r2, [pc, #332]	; (8004104 <HAL_GPIO_Init+0x2dc>)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	3302      	adds	r3, #2
 8003fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	220f      	movs	r2, #15
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fde:	d019      	beq.n	8004014 <HAL_GPIO_Init+0x1ec>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a49      	ldr	r2, [pc, #292]	; (8004108 <HAL_GPIO_Init+0x2e0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_GPIO_Init+0x1e8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a48      	ldr	r2, [pc, #288]	; (800410c <HAL_GPIO_Init+0x2e4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00d      	beq.n	800400c <HAL_GPIO_Init+0x1e4>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a47      	ldr	r2, [pc, #284]	; (8004110 <HAL_GPIO_Init+0x2e8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <HAL_GPIO_Init+0x1e0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a46      	ldr	r2, [pc, #280]	; (8004114 <HAL_GPIO_Init+0x2ec>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <HAL_GPIO_Init+0x1dc>
 8004000:	2304      	movs	r3, #4
 8004002:	e008      	b.n	8004016 <HAL_GPIO_Init+0x1ee>
 8004004:	2307      	movs	r3, #7
 8004006:	e006      	b.n	8004016 <HAL_GPIO_Init+0x1ee>
 8004008:	2303      	movs	r3, #3
 800400a:	e004      	b.n	8004016 <HAL_GPIO_Init+0x1ee>
 800400c:	2302      	movs	r3, #2
 800400e:	e002      	b.n	8004016 <HAL_GPIO_Init+0x1ee>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_GPIO_Init+0x1ee>
 8004014:	2300      	movs	r3, #0
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	f002 0203 	and.w	r2, r2, #3
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	4093      	lsls	r3, r2
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004026:	4937      	ldr	r1, [pc, #220]	; (8004104 <HAL_GPIO_Init+0x2dc>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004034:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004058:	4a2f      	ldr	r2, [pc, #188]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800405e:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004082:	4a25      	ldr	r2, [pc, #148]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040ac:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040b2:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040d6:	4a10      	ldr	r2, [pc, #64]	; (8004118 <HAL_GPIO_Init+0x2f0>)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3301      	adds	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f aea3 	bne.w	8003e38 <HAL_GPIO_Init+0x10>
  }
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40021000 	.word	0x40021000
 8004104:	40010000 	.word	0x40010000
 8004108:	48000400 	.word	0x48000400
 800410c:	48000800 	.word	0x48000800
 8004110:	48000c00 	.word	0x48000c00
 8004114:	48001000 	.word	0x48001000
 8004118:	40010400 	.word	0x40010400

0800411c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e001      	b.n	800413e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
 8004158:	4613      	mov	r3, r2
 800415a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004168:	e002      	b.n	8004170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4013      	ands	r3, r2
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	43d9      	mvns	r1, r3
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	400b      	ands	r3, r1
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40007000 	.word	0x40007000

080041cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041da:	d130      	bne.n	800423e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041dc:	4b23      	ldr	r3, [pc, #140]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e8:	d038      	beq.n	800425c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ea:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041f2:	4a1e      	ldr	r2, [pc, #120]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041fa:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2232      	movs	r2, #50	; 0x32
 8004200:	fb02 f303 	mul.w	r3, r2, r3
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	0c9b      	lsrs	r3, r3, #18
 800420c:	3301      	adds	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004210:	e002      	b.n	8004218 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b01      	subs	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004224:	d102      	bne.n	800422c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f2      	bne.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004238:	d110      	bne.n	800425c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e00f      	b.n	800425e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424a:	d007      	beq.n	800425c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800424c:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004254:	4a05      	ldr	r2, [pc, #20]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800425a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40007000 	.word	0x40007000
 8004270:	20000000 	.word	0x20000000
 8004274:	431bde83 	.word	0x431bde83

08004278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f000 bc11 	b.w	8004aae <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428c:	4ba0      	ldr	r3, [pc, #640]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004296:	4b9e      	ldr	r3, [pc, #632]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80e4 	beq.w	8004476 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4c>
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	f040 808b 	bne.w	80043d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	f040 8087 	bne.w	80043d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042c4:	4b92      	ldr	r3, [pc, #584]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_OscConfig+0x64>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e3e8      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	4b8b      	ldr	r3, [pc, #556]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <HAL_RCC_OscConfig+0x7e>
 80042ec:	4b88      	ldr	r3, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f4:	e005      	b.n	8004302 <HAL_RCC_OscConfig+0x8a>
 80042f6:	4b86      	ldr	r3, [pc, #536]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80042f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004302:	4293      	cmp	r3, r2
 8004304:	d223      	bcs.n	800434e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fd7a 	bl	8004e04 <RCC_SetFlashLatencyFromMSIRange>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e3c9      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800431a:	4b7d      	ldr	r3, [pc, #500]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7c      	ldr	r2, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004320:	f043 0308 	orr.w	r3, r3, #8
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b7a      	ldr	r3, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4977      	ldr	r1, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004338:	4b75      	ldr	r3, [pc, #468]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	4972      	ldr	r1, [pc, #456]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
 800434c:	e025      	b.n	800439a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434e:	4b70      	ldr	r3, [pc, #448]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6f      	ldr	r2, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b6d      	ldr	r3, [pc, #436]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	496a      	ldr	r1, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436c:	4b68      	ldr	r3, [pc, #416]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	4965      	ldr	r1, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fd3a 	bl	8004e04 <RCC_SetFlashLatencyFromMSIRange>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e389      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800439a:	f000 fc6f 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b5b      	ldr	r3, [pc, #364]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	495a      	ldr	r1, [pc, #360]	; (8004514 <HAL_RCC_OscConfig+0x29c>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	fa22 f303 	lsr.w	r3, r2, r3
 80043b6:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_RCC_OscConfig+0x2a0>)
 80043b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043ba:	4b58      	ldr	r3, [pc, #352]	; (800451c <HAL_RCC_OscConfig+0x2a4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe fd4a 	bl	8002e58 <HAL_InitTick>
 80043c4:	4603      	mov	r3, r0
 80043c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d052      	beq.n	8004474 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	e36d      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d032      	beq.n	8004440 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043da:	4b4d      	ldr	r3, [pc, #308]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a4c      	ldr	r2, [pc, #304]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043e6:	f7fe fd87 	bl	8002ef8 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ee:	f7fe fd83 	bl	8002ef8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e356      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004400:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440c:	4b40      	ldr	r3, [pc, #256]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3f      	ldr	r2, [pc, #252]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004412:	f043 0308 	orr.w	r3, r3, #8
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	493a      	ldr	r1, [pc, #232]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	4935      	ldr	r1, [pc, #212]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
 800443e:	e01a      	b.n	8004476 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004440:	4b33      	ldr	r3, [pc, #204]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a32      	ldr	r2, [pc, #200]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800444c:	f7fe fd54 	bl	8002ef8 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004454:	f7fe fd50 	bl	8002ef8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e323      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004466:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x1dc>
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d073      	beq.n	800456a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d005      	beq.n	8004494 <HAL_RCC_OscConfig+0x21c>
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b0c      	cmp	r3, #12
 800448c:	d10e      	bne.n	80044ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d10b      	bne.n	80044ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004494:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d063      	beq.n	8004568 <HAL_RCC_OscConfig+0x2f0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d15f      	bne.n	8004568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e300      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b4:	d106      	bne.n	80044c4 <HAL_RCC_OscConfig+0x24c>
 80044b6:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a15      	ldr	r2, [pc, #84]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e01d      	b.n	8004500 <HAL_RCC_OscConfig+0x288>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x270>
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e00b      	b.n	8004500 <HAL_RCC_OscConfig+0x288>
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a05      	ldr	r2, [pc, #20]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01b      	beq.n	8004540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fe fcf6 	bl	8002ef8 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	e010      	b.n	8004532 <HAL_RCC_OscConfig+0x2ba>
 8004510:	40021000 	.word	0x40021000
 8004514:	080068bc 	.word	0x080068bc
 8004518:	20000000 	.word	0x20000000
 800451c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7fe fcea 	bl	8002ef8 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e2bd      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004532:	4baf      	ldr	r3, [pc, #700]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x2a8>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fe fcda 	bl	8002ef8 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fe fcd6 	bl	8002ef8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e2a9      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800455a:	4ba5      	ldr	r3, [pc, #660]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x2d0>
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d060      	beq.n	8004638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d005      	beq.n	8004588 <HAL_RCC_OscConfig+0x310>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b0c      	cmp	r3, #12
 8004580:	d119      	bne.n	80045b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d116      	bne.n	80045b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004588:	4b99      	ldr	r3, [pc, #612]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_OscConfig+0x328>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e286      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a0:	4b93      	ldr	r3, [pc, #588]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	4990      	ldr	r1, [pc, #576]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b4:	e040      	b.n	8004638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d023      	beq.n	8004606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045be:	4b8c      	ldr	r3, [pc, #560]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a8b      	ldr	r2, [pc, #556]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ca:	f7fe fc95 	bl	8002ef8 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d2:	f7fe fc91 	bl	8002ef8 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e264      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e4:	4b82      	ldr	r3, [pc, #520]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f0:	4b7f      	ldr	r3, [pc, #508]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	497c      	ldr	r1, [pc, #496]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	e018      	b.n	8004638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004606:	4b7a      	ldr	r3, [pc, #488]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a79      	ldr	r2, [pc, #484]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800460c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fe fc71 	bl	8002ef8 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461a:	f7fe fc6d 	bl	8002ef8 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e240      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800462c:	4b70      	ldr	r3, [pc, #448]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d03c      	beq.n	80046be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01c      	beq.n	8004686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464c:	4b68      	ldr	r3, [pc, #416]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004652:	4a67      	ldr	r2, [pc, #412]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fe fc4c 	bl	8002ef8 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004664:	f7fe fc48 	bl	8002ef8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e21b      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004676:	4b5e      	ldr	r3, [pc, #376]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ef      	beq.n	8004664 <HAL_RCC_OscConfig+0x3ec>
 8004684:	e01b      	b.n	80046be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004686:	4b5a      	ldr	r3, [pc, #360]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468c:	4a58      	ldr	r2, [pc, #352]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004696:	f7fe fc2f 	bl	8002ef8 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469e:	f7fe fc2b 	bl	8002ef8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e1fe      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b0:	4b4f      	ldr	r3, [pc, #316]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ef      	bne.n	800469e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80a6 	beq.w	8004818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046d0:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10d      	bne.n	80046f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b44      	ldr	r3, [pc, #272]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	4a43      	ldr	r2, [pc, #268]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e6:	6593      	str	r3, [r2, #88]	; 0x58
 80046e8:	4b41      	ldr	r3, [pc, #260]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f8:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <HAL_RCC_OscConfig+0x57c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d118      	bne.n	8004736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004704:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCC_OscConfig+0x57c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a3a      	ldr	r2, [pc, #232]	; (80047f4 <HAL_RCC_OscConfig+0x57c>)
 800470a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004710:	f7fe fbf2 	bl	8002ef8 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004718:	f7fe fbee 	bl	8002ef8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1c1      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472a:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <HAL_RCC_OscConfig+0x57c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d108      	bne.n	8004750 <HAL_RCC_OscConfig+0x4d8>
 800473e:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800474e:	e024      	b.n	800479a <HAL_RCC_OscConfig+0x522>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b05      	cmp	r3, #5
 8004756:	d110      	bne.n	800477a <HAL_RCC_OscConfig+0x502>
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	4a24      	ldr	r2, [pc, #144]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004768:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476e:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004778:	e00f      	b.n	800479a <HAL_RCC_OscConfig+0x522>
 800477a:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800478a:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fe fba9 	bl	8002ef8 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fe fba5 	bl	8002ef8 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e176      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ed      	beq.n	80047aa <HAL_RCC_OscConfig+0x532>
 80047ce:	e01a      	b.n	8004806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fe fb92 	bl	8002ef8 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d6:	e00f      	b.n	80047f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7fe fb8e 	bl	8002ef8 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d906      	bls.n	80047f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e15f      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f8:	4baa      	ldr	r3, [pc, #680]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e8      	bne.n	80047d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004806:	7ffb      	ldrb	r3, [r7, #31]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480c:	4ba5      	ldr	r3, [pc, #660]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	4aa4      	ldr	r2, [pc, #656]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004816:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d03c      	beq.n	800489e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01c      	beq.n	8004866 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800482c:	4b9d      	ldr	r3, [pc, #628]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 800482e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004832:	4a9c      	ldr	r2, [pc, #624]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fe fb5c 	bl	8002ef8 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004844:	f7fe fb58 	bl	8002ef8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e12b      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004856:	4b93      	ldr	r3, [pc, #588]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0ef      	beq.n	8004844 <HAL_RCC_OscConfig+0x5cc>
 8004864:	e01b      	b.n	800489e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004866:	4b8f      	ldr	r3, [pc, #572]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486c:	4a8d      	ldr	r2, [pc, #564]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fe fb3f 	bl	8002ef8 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800487e:	f7fe fb3b 	bl	8002ef8 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e10e      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004890:	4b84      	ldr	r3, [pc, #528]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1ef      	bne.n	800487e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8102 	beq.w	8004aac <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	f040 80c5 	bne.w	8004a3c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048b2:	4b7c      	ldr	r3, [pc, #496]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0203 	and.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d12c      	bne.n	8004920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	3b01      	subs	r3, #1
 80048d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d123      	bne.n	8004920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d11b      	bne.n	8004920 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d113      	bne.n	8004920 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	3b01      	subs	r3, #1
 8004906:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d109      	bne.n	8004920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	3b01      	subs	r3, #1
 800491a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d067      	beq.n	80049f0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b0c      	cmp	r3, #12
 8004924:	d062      	beq.n	80049ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004926:	4b5f      	ldr	r3, [pc, #380]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0bb      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004936:	4b5b      	ldr	r3, [pc, #364]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a5a      	ldr	r2, [pc, #360]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 800493c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004940:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004942:	f7fe fad9 	bl	8002ef8 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494a:	f7fe fad5 	bl	8002ef8 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e0a8      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495c:	4b51      	ldr	r3, [pc, #324]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004968:	4b4e      	ldr	r3, [pc, #312]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	4b4e      	ldr	r3, [pc, #312]	; (8004aa8 <HAL_RCC_OscConfig+0x830>)
 800496e:	4013      	ands	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004978:	3a01      	subs	r2, #1
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004982:	0212      	lsls	r2, r2, #8
 8004984:	4311      	orrs	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800498a:	0852      	lsrs	r2, r2, #1
 800498c:	3a01      	subs	r2, #1
 800498e:	0552      	lsls	r2, r2, #21
 8004990:	4311      	orrs	r1, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004996:	0852      	lsrs	r2, r2, #1
 8004998:	3a01      	subs	r2, #1
 800499a:	0652      	lsls	r2, r2, #25
 800499c:	4311      	orrs	r1, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a2:	06d2      	lsls	r2, r2, #27
 80049a4:	430a      	orrs	r2, r1
 80049a6:	493f      	ldr	r1, [pc, #252]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049ac:	4b3d      	ldr	r3, [pc, #244]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b8:	4b3a      	ldr	r3, [pc, #232]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a39      	ldr	r2, [pc, #228]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80049be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c4:	f7fe fa98 	bl	8002ef8 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fe fa94 	bl	8002ef8 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e067      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ea:	e05f      	b.n	8004aac <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e05e      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f0:	4b2c      	ldr	r3, [pc, #176]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d157      	bne.n	8004aac <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049fc:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a28      	ldr	r2, [pc, #160]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a08:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a14:	f7fe fa70 	bl	8002ef8 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fe fa6c 	bl	8002ef8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e03f      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x7a4>
 8004a3a:	e037      	b.n	8004aac <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d02d      	beq.n	8004a9e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a60:	f023 0303 	bic.w	r3, r3, #3
 8004a64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fe fa3f 	bl	8002ef8 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fe fa3b 	bl	8002ef8 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e00e      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a90:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <HAL_RCC_OscConfig+0x82c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCC_OscConfig+0x806>
 8004a9c:	e006      	b.n	8004aac <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e005      	b.n	8004aae <HAL_RCC_OscConfig+0x836>
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop

08004ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0c8      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b66      	ldr	r3, [pc, #408]	; (8004c68 <HAL_RCC_ClockConfig+0x1b0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b63      	ldr	r3, [pc, #396]	; (8004c68 <HAL_RCC_ClockConfig+0x1b0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 0207 	bic.w	r2, r3, #7
 8004ae2:	4961      	ldr	r1, [pc, #388]	; (8004c68 <HAL_RCC_ClockConfig+0x1b0>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b5f      	ldr	r3, [pc, #380]	; (8004c68 <HAL_RCC_ClockConfig+0x1b0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b0      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d04c      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b10:	4b56      	ldr	r3, [pc, #344]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d121      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e09e      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b28:	4b50      	ldr	r3, [pc, #320]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d115      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e092      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d107      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b40:	4b4a      	ldr	r3, [pc, #296]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e086      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b50:	4b46      	ldr	r3, [pc, #280]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e07e      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b60:	4b42      	ldr	r3, [pc, #264]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f023 0203 	bic.w	r2, r3, #3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	493f      	ldr	r1, [pc, #252]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b72:	f7fe f9c1 	bl	8002ef8 <HAL_GetTick>
 8004b76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b78:	e00a      	b.n	8004b90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7a:	f7fe f9bd 	bl	8002ef8 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e066      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b90:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 020c 	and.w	r2, r3, #12
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d1eb      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bae:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	492c      	ldr	r1, [pc, #176]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b29      	ldr	r3, [pc, #164]	; (8004c68 <HAL_RCC_ClockConfig+0x1b0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d210      	bcs.n	8004bf0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <HAL_RCC_ClockConfig+0x1b0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 0207 	bic.w	r2, r3, #7
 8004bd6:	4924      	ldr	r1, [pc, #144]	; (8004c68 <HAL_RCC_ClockConfig+0x1b0>)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <HAL_RCC_ClockConfig+0x1b0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e036      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4918      	ldr	r1, [pc, #96]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4910      	ldr	r1, [pc, #64]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c2e:	f000 f825 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c32:	4602      	mov	r2, r0
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <HAL_RCC_ClockConfig+0x1b4>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	490c      	ldr	r1, [pc, #48]	; (8004c70 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	5ccb      	ldrb	r3, [r1, r3]
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe f900 	bl	8002e58 <HAL_InitTick>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c5c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40022000 	.word	0x40022000
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	080068bc 	.word	0x080068bc
 8004c74:	20000000 	.word	0x20000000
 8004c78:	20000004 	.word	0x20000004

08004c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b089      	sub	sp, #36	; 0x24
 8004c80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8a:	4b3e      	ldr	r3, [pc, #248]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c94:	4b3b      	ldr	r3, [pc, #236]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b0c      	cmp	r3, #12
 8004ca8:	d121      	bne.n	8004cee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d11e      	bne.n	8004cee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cb0:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d107      	bne.n	8004ccc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc2:	0a1b      	lsrs	r3, r3, #8
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e005      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ccc:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cf4:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e004      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d00:	4b23      	ldr	r3, [pc, #140]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b0c      	cmp	r3, #12
 8004d08:	d134      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d003      	beq.n	8004d22 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d003      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0xac>
 8004d20:	e005      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d22:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004d24:	617b      	str	r3, [r7, #20]
      break;
 8004d26:	e005      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d2a:	617b      	str	r3, [r7, #20]
      break;
 8004d2c:	e002      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	617b      	str	r3, [r7, #20]
      break;
 8004d32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d34:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	3301      	adds	r3, #1
 8004d40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	fb02 f203 	mul.w	r2, r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	0e5b      	lsrs	r3, r3, #25
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	3301      	adds	r3, #1
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d74:	69bb      	ldr	r3, [r7, #24]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3724      	adds	r7, #36	; 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	080068d4 	.word	0x080068d4
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	007a1200 	.word	0x007a1200

08004d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000000 	.word	0x20000000

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004db0:	f7ff fff0 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	080068cc 	.word	0x080068cc

08004dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ddc:	f7ff ffda 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	0adb      	lsrs	r3, r3, #11
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	4904      	ldr	r1, [pc, #16]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	080068cc 	.word	0x080068cc

08004e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e1c:	f7ff f9c8 	bl	80041b0 <HAL_PWREx_GetVoltageRange>
 8004e20:	6178      	str	r0, [r7, #20]
 8004e22:	e014      	b.n	8004e4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	4a24      	ldr	r2, [pc, #144]	; (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e30:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e3c:	f7ff f9b8 	bl	80041b0 <HAL_PWREx_GetVoltageRange>
 8004e40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	d10b      	bne.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b80      	cmp	r3, #128	; 0x80
 8004e5a:	d919      	bls.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2ba0      	cmp	r3, #160	; 0xa0
 8004e60:	d902      	bls.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e62:	2302      	movs	r3, #2
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	e013      	b.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e68:	2301      	movs	r3, #1
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	e010      	b.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d902      	bls.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e74:	2303      	movs	r3, #3
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e00a      	b.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b80      	cmp	r3, #128	; 0x80
 8004e7e:	d102      	bne.n	8004e86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e80:	2302      	movs	r3, #2
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	e004      	b.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b70      	cmp	r3, #112	; 0x70
 8004e8a:	d101      	bne.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f023 0207 	bic.w	r2, r3, #7
 8004e98:	4909      	ldr	r1, [pc, #36]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d001      	beq.n	8004eb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40022000 	.word	0x40022000

08004ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ecc:	2300      	movs	r3, #0
 8004ece:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d031      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ee8:	d01a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004eea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eee:	d814      	bhi.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d009      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef8:	d10f      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004efa:	4b5d      	ldr	r3, [pc, #372]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f04:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f06:	e00c      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fa44 	bl	800539c <RCCEx_PLLSAI1_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f18:	e003      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f1e:	e000      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f28:	4b51      	ldr	r3, [pc, #324]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	494e      	ldr	r1, [pc, #312]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f3e:	e001      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 809e 	beq.w	800508e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f52:	2300      	movs	r3, #0
 8004f54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f56:	4b46      	ldr	r3, [pc, #280]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6c:	4b40      	ldr	r3, [pc, #256]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	4a3f      	ldr	r2, [pc, #252]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f76:	6593      	str	r3, [r2, #88]	; 0x58
 8004f78:	4b3d      	ldr	r3, [pc, #244]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f84:	2301      	movs	r3, #1
 8004f86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f88:	4b3a      	ldr	r3, [pc, #232]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a39      	ldr	r2, [pc, #228]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f94:	f7fd ffb0 	bl	8002ef8 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f9a:	e009      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9c:	f7fd ffac 	bl	8002ef8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d902      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	74fb      	strb	r3, [r7, #19]
        break;
 8004fae:	e005      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fb0:	4b30      	ldr	r3, [pc, #192]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0ef      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d15a      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fc2:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01e      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d019      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fde:	4b24      	ldr	r3, [pc, #144]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fea:	4b21      	ldr	r3, [pc, #132]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800500a:	4a19      	ldr	r2, [pc, #100]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d016      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fd ff6c 	bl	8002ef8 <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005022:	e00b      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005024:	f7fd ff68 	bl	8002ef8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005032:	4293      	cmp	r3, r2
 8005034:	d902      	bls.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	74fb      	strb	r3, [r7, #19]
            break;
 800503a:	e006      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ec      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800504a:	7cfb      	ldrb	r3, [r7, #19]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505e:	4904      	ldr	r1, [pc, #16]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005066:	e009      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	74bb      	strb	r3, [r7, #18]
 800506c:	e006      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507c:	7c7b      	ldrb	r3, [r7, #17]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d105      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005082:	4b9e      	ldr	r3, [pc, #632]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	4a9d      	ldr	r2, [pc, #628]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800509a:	4b98      	ldr	r3, [pc, #608]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f023 0203 	bic.w	r2, r3, #3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	4994      	ldr	r1, [pc, #592]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050bc:	4b8f      	ldr	r3, [pc, #572]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f023 020c 	bic.w	r2, r3, #12
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	498c      	ldr	r1, [pc, #560]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050de:	4b87      	ldr	r3, [pc, #540]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	4983      	ldr	r1, [pc, #524]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005100:	4b7e      	ldr	r3, [pc, #504]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	497b      	ldr	r1, [pc, #492]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005122:	4b76      	ldr	r3, [pc, #472]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005128:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	4972      	ldr	r1, [pc, #456]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005144:	4b6d      	ldr	r3, [pc, #436]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	496a      	ldr	r1, [pc, #424]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005174:	4961      	ldr	r1, [pc, #388]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005188:	4b5c      	ldr	r3, [pc, #368]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	4959      	ldr	r1, [pc, #356]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051aa:	4b54      	ldr	r3, [pc, #336]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	4950      	ldr	r1, [pc, #320]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051cc:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	4948      	ldr	r1, [pc, #288]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051ee:	4b43      	ldr	r3, [pc, #268]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051f4:	f023 0203 	bic.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	493f      	ldr	r1, [pc, #252]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d028      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005210:	4b3a      	ldr	r3, [pc, #232]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521e:	4937      	ldr	r1, [pc, #220]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800522e:	d106      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a31      	ldr	r2, [pc, #196]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800523a:	60d3      	str	r3, [r2, #12]
 800523c:	e011      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005246:	d10c      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	2101      	movs	r1, #1
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f8a4 	bl	800539c <RCCEx_PLLSAI1_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d028      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527c:	491f      	ldr	r1, [pc, #124]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800528c:	d106      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800528e:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005298:	60d3      	str	r3, [r2, #12]
 800529a:	e011      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052a4:	d10c      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3304      	adds	r3, #4
 80052aa:	2101      	movs	r1, #1
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f875 	bl	800539c <RCCEx_PLLSAI1_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02b      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052da:	4908      	ldr	r1, [pc, #32]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ea:	d109      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4a02      	ldr	r2, [pc, #8]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f6:	60d3      	str	r3, [r2, #12]
 80052f8:	e014      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005308:	d10c      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f843 	bl	800539c <RCCEx_PLLSAI1_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800531a:	7cfb      	ldrb	r3, [r7, #19]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01c      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005330:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533e:	4916      	ldr	r1, [pc, #88]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800534e:	d10c      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	2102      	movs	r1, #2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f820 	bl	800539c <RCCEx_PLLSAI1_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005384:	4904      	ldr	r1, [pc, #16]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800538c:	7cbb      	ldrb	r3, [r7, #18]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000

0800539c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053aa:	4b74      	ldr	r3, [pc, #464]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d018      	beq.n	80053e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053b6:	4b71      	ldr	r3, [pc, #452]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0203 	and.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d10d      	bne.n	80053e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
       ||
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053ce:	4b6b      	ldr	r3, [pc, #428]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	091b      	lsrs	r3, r3, #4
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
       ||
 80053de:	429a      	cmp	r2, r3
 80053e0:	d047      	beq.n	8005472 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
 80053e6:	e044      	b.n	8005472 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d018      	beq.n	8005422 <RCCEx_PLLSAI1_Config+0x86>
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d825      	bhi.n	8005440 <RCCEx_PLLSAI1_Config+0xa4>
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d002      	beq.n	80053fe <RCCEx_PLLSAI1_Config+0x62>
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d009      	beq.n	8005410 <RCCEx_PLLSAI1_Config+0x74>
 80053fc:	e020      	b.n	8005440 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053fe:	4b5f      	ldr	r3, [pc, #380]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d11d      	bne.n	8005446 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800540e:	e01a      	b.n	8005446 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005410:	4b5a      	ldr	r3, [pc, #360]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	2b00      	cmp	r3, #0
 800541a:	d116      	bne.n	800544a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005420:	e013      	b.n	800544a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005422:	4b56      	ldr	r3, [pc, #344]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10f      	bne.n	800544e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800542e:	4b53      	ldr	r3, [pc, #332]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800543e:	e006      	b.n	800544e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e004      	b.n	8005450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005446:	bf00      	nop
 8005448:	e002      	b.n	8005450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800544a:	bf00      	nop
 800544c:	e000      	b.n	8005450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800544e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10d      	bne.n	8005472 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005456:	4b49      	ldr	r3, [pc, #292]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	3b01      	subs	r3, #1
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	430b      	orrs	r3, r1
 800546c:	4943      	ldr	r1, [pc, #268]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d17c      	bne.n	8005572 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005478:	4b40      	ldr	r3, [pc, #256]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a3f      	ldr	r2, [pc, #252]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 800547e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005484:	f7fd fd38 	bl	8002ef8 <HAL_GetTick>
 8005488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800548a:	e009      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800548c:	f7fd fd34 	bl	8002ef8 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d902      	bls.n	80054a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	73fb      	strb	r3, [r7, #15]
        break;
 800549e:	e005      	b.n	80054ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054a0:	4b36      	ldr	r3, [pc, #216]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1ef      	bne.n	800548c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d15f      	bne.n	8005572 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d110      	bne.n	80054da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054b8:	4b30      	ldr	r3, [pc, #192]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80054c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6892      	ldr	r2, [r2, #8]
 80054c8:	0211      	lsls	r1, r2, #8
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68d2      	ldr	r2, [r2, #12]
 80054ce:	06d2      	lsls	r2, r2, #27
 80054d0:	430a      	orrs	r2, r1
 80054d2:	492a      	ldr	r1, [pc, #168]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	610b      	str	r3, [r1, #16]
 80054d8:	e027      	b.n	800552a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d112      	bne.n	8005506 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054e0:	4b26      	ldr	r3, [pc, #152]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6892      	ldr	r2, [r2, #8]
 80054f0:	0211      	lsls	r1, r2, #8
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6912      	ldr	r2, [r2, #16]
 80054f6:	0852      	lsrs	r2, r2, #1
 80054f8:	3a01      	subs	r2, #1
 80054fa:	0552      	lsls	r2, r2, #21
 80054fc:	430a      	orrs	r2, r1
 80054fe:	491f      	ldr	r1, [pc, #124]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	610b      	str	r3, [r1, #16]
 8005504:	e011      	b.n	800552a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005506:	4b1d      	ldr	r3, [pc, #116]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800550e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6892      	ldr	r2, [r2, #8]
 8005516:	0211      	lsls	r1, r2, #8
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6952      	ldr	r2, [r2, #20]
 800551c:	0852      	lsrs	r2, r2, #1
 800551e:	3a01      	subs	r2, #1
 8005520:	0652      	lsls	r2, r2, #25
 8005522:	430a      	orrs	r2, r1
 8005524:	4915      	ldr	r1, [pc, #84]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005526:	4313      	orrs	r3, r2
 8005528:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800552a:	4b14      	ldr	r3, [pc, #80]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005534:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005536:	f7fd fcdf 	bl	8002ef8 <HAL_GetTick>
 800553a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800553c:	e009      	b.n	8005552 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800553e:	f7fd fcdb 	bl	8002ef8 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d902      	bls.n	8005552 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	73fb      	strb	r3, [r7, #15]
          break;
 8005550:	e005      	b.n	800555e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0ef      	beq.n	800553e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	4903      	ldr	r1, [pc, #12]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 800556e:	4313      	orrs	r3, r2
 8005570:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40021000 	.word	0x40021000

08005580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e049      	b.n	8005626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fc fe5e 	bl	8002268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f000 face 	bl	8005b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e040      	b.n	80056ca <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_TIM_Base_Start_IT+0xa8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00e      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0x58>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d009      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0x58>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a18      	ldr	r2, [pc, #96]	; (80056dc <HAL_TIM_Base_Start_IT+0xac>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0x58>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a17      	ldr	r2, [pc, #92]	; (80056e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d115      	bne.n	80056b4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b06      	cmp	r3, #6
 8005698:	d015      	beq.n	80056c6 <HAL_TIM_Base_Start_IT+0x96>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	d011      	beq.n	80056c6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	e008      	b.n	80056c6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e000      	b.n	80056c8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	00010007 	.word	0x00010007

080056e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	f241 1311 	movw	r3, #4369	; 0x1111
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10f      	bne.n	8005730 <HAL_TIM_Base_Stop_IT+0x48>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	f240 4344 	movw	r3, #1092	; 0x444
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d107      	bne.n	8005730 <HAL_TIM_Base_Stop_IT+0x48>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	d122      	bne.n	80057a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b02      	cmp	r3, #2
 8005768:	d11b      	bne.n	80057a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0202 	mvn.w	r2, #2
 8005772:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f9cb 	bl	8005b24 <HAL_TIM_IC_CaptureCallback>
 800578e:	e005      	b.n	800579c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f9bd 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f9ce 	bl	8005b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d122      	bne.n	80057f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d11b      	bne.n	80057f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f06f 0204 	mvn.w	r2, #4
 80057c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f9a1 	bl	8005b24 <HAL_TIM_IC_CaptureCallback>
 80057e2:	e005      	b.n	80057f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f993 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9a4 	bl	8005b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b08      	cmp	r3, #8
 8005802:	d122      	bne.n	800584a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b08      	cmp	r3, #8
 8005810:	d11b      	bne.n	800584a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f06f 0208 	mvn.w	r2, #8
 800581a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2204      	movs	r2, #4
 8005820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f977 	bl	8005b24 <HAL_TIM_IC_CaptureCallback>
 8005836:	e005      	b.n	8005844 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f969 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f97a 	bl	8005b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b10      	cmp	r3, #16
 8005856:	d122      	bne.n	800589e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b10      	cmp	r3, #16
 8005864:	d11b      	bne.n	800589e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0210 	mvn.w	r2, #16
 800586e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2208      	movs	r2, #8
 8005874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f94d 	bl	8005b24 <HAL_TIM_IC_CaptureCallback>
 800588a:	e005      	b.n	8005898 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f93f 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f950 	bl	8005b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d10e      	bne.n	80058ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f06f 0201 	mvn.w	r2, #1
 80058c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fc fc17 	bl	80020f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d4:	2b80      	cmp	r3, #128	; 0x80
 80058d6:	d10e      	bne.n	80058f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d107      	bne.n	80058f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fab5 	bl	8005e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005904:	d10e      	bne.n	8005924 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005910:	2b80      	cmp	r3, #128	; 0x80
 8005912:	d107      	bne.n	8005924 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 faa8 	bl	8005e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d10e      	bne.n	8005950 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d107      	bne.n	8005950 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8fe 	bl	8005b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b20      	cmp	r3, #32
 800595c:	d10e      	bne.n	800597c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b20      	cmp	r3, #32
 800596a:	d107      	bne.n	800597c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0220 	mvn.w	r2, #32
 8005974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa68 	bl	8005e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIM_ConfigClockSource+0x18>
 8005998:	2302      	movs	r3, #2
 800599a:	e0b5      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x184>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d8:	d03e      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0xd4>
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	f200 8087 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	f000 8085 	beq.w	8005af4 <HAL_TIM_ConfigClockSource+0x170>
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d87f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 80059f0:	2b70      	cmp	r3, #112	; 0x70
 80059f2:	d01a      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xa6>
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d87b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d050      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x11a>
 80059fc:	2b60      	cmp	r3, #96	; 0x60
 80059fe:	d877      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a00:	2b50      	cmp	r3, #80	; 0x50
 8005a02:	d03c      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0xfa>
 8005a04:	2b50      	cmp	r3, #80	; 0x50
 8005a06:	d873      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d058      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x13a>
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d86f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d064      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15a>
 8005a14:	2b30      	cmp	r3, #48	; 0x30
 8005a16:	d86b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d060      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15a>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d867      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15a>
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d05a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a28:	e062      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f000 f979 	bl	8005d30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e04e      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6899      	ldr	r1, [r3, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f000 f962 	bl	8005d30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a7a:	609a      	str	r2, [r3, #8]
      break;
 8005a7c:	e03b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 f8d6 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2150      	movs	r1, #80	; 0x50
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f92f 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e02b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 f8f5 	bl	8005c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2160      	movs	r1, #96	; 0x60
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f91f 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005abc:	e01b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 f8b6 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f90f 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005adc:	e00b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f000 f906 	bl	8005cfa <TIM_ITRx_SetConfig>
        break;
 8005aee:	e002      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005af0:	bf00      	nop
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005af4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <TIM_Base_SetConfig+0xcc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_Base_SetConfig+0x28>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0x28>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <TIM_Base_SetConfig+0xd0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d108      	bne.n	8005b9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a23      	ldr	r2, [pc, #140]	; (8005c2c <TIM_Base_SetConfig+0xcc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00f      	beq.n	8005bc2 <TIM_Base_SetConfig+0x62>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d00b      	beq.n	8005bc2 <TIM_Base_SetConfig+0x62>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <TIM_Base_SetConfig+0xd0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d007      	beq.n	8005bc2 <TIM_Base_SetConfig+0x62>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <TIM_Base_SetConfig+0xd4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_Base_SetConfig+0x62>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <TIM_Base_SetConfig+0xd8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d108      	bne.n	8005bd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <TIM_Base_SetConfig+0xcc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_Base_SetConfig+0xb0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a0c      	ldr	r2, [pc, #48]	; (8005c34 <TIM_Base_SetConfig+0xd4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0xb0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a0b      	ldr	r2, [pc, #44]	; (8005c38 <TIM_Base_SetConfig+0xd8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d103      	bne.n	8005c18 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	615a      	str	r2, [r3, #20]
}
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40014400 	.word	0x40014400

08005c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0201 	bic.w	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 030a 	bic.w	r3, r3, #10
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0210 	bic.w	r2, r3, #16
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	031b      	lsls	r3, r3, #12
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f043 0307 	orr.w	r3, r3, #7
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e054      	b.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a24      	ldr	r2, [pc, #144]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005db8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00e      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df0:	d009      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d10c      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40014000 	.word	0x40014000

08005e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e040      	b.n	8005f1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc fa1c 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f8c0 	bl	800604c <UART_SetConfig>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e022      	b.n	8005f1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fb10 	bl	8006504 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fb97 	bl	8006648 <UART_CheckIdleState>
 8005f1a:	4603      	mov	r3, r0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	; 0x28
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	f040 8082 	bne.w	8006042 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_UART_Transmit+0x26>
 8005f44:	88fb      	ldrh	r3, [r7, #6]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e07a      	b.n	8006044 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_UART_Transmit+0x38>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e073      	b.n	8006044 <HAL_UART_Transmit+0x120>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2221      	movs	r2, #33	; 0x21
 8005f70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f72:	f7fc ffc1 	bl	8002ef8 <HAL_GetTick>
 8005f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f90:	d108      	bne.n	8005fa4 <HAL_UART_Transmit+0x80>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d104      	bne.n	8005fa4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	e003      	b.n	8005fac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005fb4:	e02d      	b.n	8006012 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2180      	movs	r1, #128	; 0x80
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fb8a 	bl	80066da <UART_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e039      	b.n	8006044 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	881a      	ldrh	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	3302      	adds	r3, #2
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e008      	b.n	8006000 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	b292      	uxth	r2, r2
 8005ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1cb      	bne.n	8005fb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	2140      	movs	r1, #64	; 0x40
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fb56 	bl	80066da <UART_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e005      	b.n	8006044 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	e000      	b.n	8006044 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006042:	2302      	movs	r3, #2
  }
}
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800604c:	b5b0      	push	{r4, r5, r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	4313      	orrs	r3, r2
 800606e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4ba4      	ldr	r3, [pc, #656]	; (8006308 <UART_SetConfig+0x2bc>)
 8006078:	4013      	ands	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	69f9      	ldr	r1, [r7, #28]
 8006080:	430b      	orrs	r3, r1
 8006082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a99      	ldr	r2, [pc, #612]	; (800630c <UART_SetConfig+0x2c0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a90      	ldr	r2, [pc, #576]	; (8006310 <UART_SetConfig+0x2c4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d121      	bne.n	8006116 <UART_SetConfig+0xca>
 80060d2:	4b90      	ldr	r3, [pc, #576]	; (8006314 <UART_SetConfig+0x2c8>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d8:	f003 0303 	and.w	r3, r3, #3
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d817      	bhi.n	8006110 <UART_SetConfig+0xc4>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0x9c>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	08006105 	.word	0x08006105
 80060f0:	080060ff 	.word	0x080060ff
 80060f4:	0800610b 	.word	0x0800610b
 80060f8:	2301      	movs	r3, #1
 80060fa:	76fb      	strb	r3, [r7, #27]
 80060fc:	e0bc      	b.n	8006278 <UART_SetConfig+0x22c>
 80060fe:	2302      	movs	r3, #2
 8006100:	76fb      	strb	r3, [r7, #27]
 8006102:	e0b9      	b.n	8006278 <UART_SetConfig+0x22c>
 8006104:	2304      	movs	r3, #4
 8006106:	76fb      	strb	r3, [r7, #27]
 8006108:	e0b6      	b.n	8006278 <UART_SetConfig+0x22c>
 800610a:	2308      	movs	r3, #8
 800610c:	76fb      	strb	r3, [r7, #27]
 800610e:	e0b3      	b.n	8006278 <UART_SetConfig+0x22c>
 8006110:	2310      	movs	r3, #16
 8006112:	76fb      	strb	r3, [r7, #27]
 8006114:	e0b0      	b.n	8006278 <UART_SetConfig+0x22c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a7f      	ldr	r2, [pc, #508]	; (8006318 <UART_SetConfig+0x2cc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d132      	bne.n	8006186 <UART_SetConfig+0x13a>
 8006120:	4b7c      	ldr	r3, [pc, #496]	; (8006314 <UART_SetConfig+0x2c8>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006126:	f003 030c 	and.w	r3, r3, #12
 800612a:	2b0c      	cmp	r3, #12
 800612c:	d828      	bhi.n	8006180 <UART_SetConfig+0x134>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <UART_SetConfig+0xe8>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	08006169 	.word	0x08006169
 8006138:	08006181 	.word	0x08006181
 800613c:	08006181 	.word	0x08006181
 8006140:	08006181 	.word	0x08006181
 8006144:	08006175 	.word	0x08006175
 8006148:	08006181 	.word	0x08006181
 800614c:	08006181 	.word	0x08006181
 8006150:	08006181 	.word	0x08006181
 8006154:	0800616f 	.word	0x0800616f
 8006158:	08006181 	.word	0x08006181
 800615c:	08006181 	.word	0x08006181
 8006160:	08006181 	.word	0x08006181
 8006164:	0800617b 	.word	0x0800617b
 8006168:	2300      	movs	r3, #0
 800616a:	76fb      	strb	r3, [r7, #27]
 800616c:	e084      	b.n	8006278 <UART_SetConfig+0x22c>
 800616e:	2302      	movs	r3, #2
 8006170:	76fb      	strb	r3, [r7, #27]
 8006172:	e081      	b.n	8006278 <UART_SetConfig+0x22c>
 8006174:	2304      	movs	r3, #4
 8006176:	76fb      	strb	r3, [r7, #27]
 8006178:	e07e      	b.n	8006278 <UART_SetConfig+0x22c>
 800617a:	2308      	movs	r3, #8
 800617c:	76fb      	strb	r3, [r7, #27]
 800617e:	e07b      	b.n	8006278 <UART_SetConfig+0x22c>
 8006180:	2310      	movs	r3, #16
 8006182:	76fb      	strb	r3, [r7, #27]
 8006184:	e078      	b.n	8006278 <UART_SetConfig+0x22c>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a64      	ldr	r2, [pc, #400]	; (800631c <UART_SetConfig+0x2d0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d120      	bne.n	80061d2 <UART_SetConfig+0x186>
 8006190:	4b60      	ldr	r3, [pc, #384]	; (8006314 <UART_SetConfig+0x2c8>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800619a:	2b30      	cmp	r3, #48	; 0x30
 800619c:	d013      	beq.n	80061c6 <UART_SetConfig+0x17a>
 800619e:	2b30      	cmp	r3, #48	; 0x30
 80061a0:	d814      	bhi.n	80061cc <UART_SetConfig+0x180>
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d009      	beq.n	80061ba <UART_SetConfig+0x16e>
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d810      	bhi.n	80061cc <UART_SetConfig+0x180>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <UART_SetConfig+0x168>
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d006      	beq.n	80061c0 <UART_SetConfig+0x174>
 80061b2:	e00b      	b.n	80061cc <UART_SetConfig+0x180>
 80061b4:	2300      	movs	r3, #0
 80061b6:	76fb      	strb	r3, [r7, #27]
 80061b8:	e05e      	b.n	8006278 <UART_SetConfig+0x22c>
 80061ba:	2302      	movs	r3, #2
 80061bc:	76fb      	strb	r3, [r7, #27]
 80061be:	e05b      	b.n	8006278 <UART_SetConfig+0x22c>
 80061c0:	2304      	movs	r3, #4
 80061c2:	76fb      	strb	r3, [r7, #27]
 80061c4:	e058      	b.n	8006278 <UART_SetConfig+0x22c>
 80061c6:	2308      	movs	r3, #8
 80061c8:	76fb      	strb	r3, [r7, #27]
 80061ca:	e055      	b.n	8006278 <UART_SetConfig+0x22c>
 80061cc:	2310      	movs	r3, #16
 80061ce:	76fb      	strb	r3, [r7, #27]
 80061d0:	e052      	b.n	8006278 <UART_SetConfig+0x22c>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a52      	ldr	r2, [pc, #328]	; (8006320 <UART_SetConfig+0x2d4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d120      	bne.n	800621e <UART_SetConfig+0x1d2>
 80061dc:	4b4d      	ldr	r3, [pc, #308]	; (8006314 <UART_SetConfig+0x2c8>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061e6:	2bc0      	cmp	r3, #192	; 0xc0
 80061e8:	d013      	beq.n	8006212 <UART_SetConfig+0x1c6>
 80061ea:	2bc0      	cmp	r3, #192	; 0xc0
 80061ec:	d814      	bhi.n	8006218 <UART_SetConfig+0x1cc>
 80061ee:	2b80      	cmp	r3, #128	; 0x80
 80061f0:	d009      	beq.n	8006206 <UART_SetConfig+0x1ba>
 80061f2:	2b80      	cmp	r3, #128	; 0x80
 80061f4:	d810      	bhi.n	8006218 <UART_SetConfig+0x1cc>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <UART_SetConfig+0x1b4>
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d006      	beq.n	800620c <UART_SetConfig+0x1c0>
 80061fe:	e00b      	b.n	8006218 <UART_SetConfig+0x1cc>
 8006200:	2300      	movs	r3, #0
 8006202:	76fb      	strb	r3, [r7, #27]
 8006204:	e038      	b.n	8006278 <UART_SetConfig+0x22c>
 8006206:	2302      	movs	r3, #2
 8006208:	76fb      	strb	r3, [r7, #27]
 800620a:	e035      	b.n	8006278 <UART_SetConfig+0x22c>
 800620c:	2304      	movs	r3, #4
 800620e:	76fb      	strb	r3, [r7, #27]
 8006210:	e032      	b.n	8006278 <UART_SetConfig+0x22c>
 8006212:	2308      	movs	r3, #8
 8006214:	76fb      	strb	r3, [r7, #27]
 8006216:	e02f      	b.n	8006278 <UART_SetConfig+0x22c>
 8006218:	2310      	movs	r3, #16
 800621a:	76fb      	strb	r3, [r7, #27]
 800621c:	e02c      	b.n	8006278 <UART_SetConfig+0x22c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a3a      	ldr	r2, [pc, #232]	; (800630c <UART_SetConfig+0x2c0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d125      	bne.n	8006274 <UART_SetConfig+0x228>
 8006228:	4b3a      	ldr	r3, [pc, #232]	; (8006314 <UART_SetConfig+0x2c8>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006236:	d017      	beq.n	8006268 <UART_SetConfig+0x21c>
 8006238:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800623c:	d817      	bhi.n	800626e <UART_SetConfig+0x222>
 800623e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006242:	d00b      	beq.n	800625c <UART_SetConfig+0x210>
 8006244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006248:	d811      	bhi.n	800626e <UART_SetConfig+0x222>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <UART_SetConfig+0x20a>
 800624e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006252:	d006      	beq.n	8006262 <UART_SetConfig+0x216>
 8006254:	e00b      	b.n	800626e <UART_SetConfig+0x222>
 8006256:	2300      	movs	r3, #0
 8006258:	76fb      	strb	r3, [r7, #27]
 800625a:	e00d      	b.n	8006278 <UART_SetConfig+0x22c>
 800625c:	2302      	movs	r3, #2
 800625e:	76fb      	strb	r3, [r7, #27]
 8006260:	e00a      	b.n	8006278 <UART_SetConfig+0x22c>
 8006262:	2304      	movs	r3, #4
 8006264:	76fb      	strb	r3, [r7, #27]
 8006266:	e007      	b.n	8006278 <UART_SetConfig+0x22c>
 8006268:	2308      	movs	r3, #8
 800626a:	76fb      	strb	r3, [r7, #27]
 800626c:	e004      	b.n	8006278 <UART_SetConfig+0x22c>
 800626e:	2310      	movs	r3, #16
 8006270:	76fb      	strb	r3, [r7, #27]
 8006272:	e001      	b.n	8006278 <UART_SetConfig+0x22c>
 8006274:	2310      	movs	r3, #16
 8006276:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a23      	ldr	r2, [pc, #140]	; (800630c <UART_SetConfig+0x2c0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	f040 8084 	bne.w	800638c <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006284:	7efb      	ldrb	r3, [r7, #27]
 8006286:	2b08      	cmp	r3, #8
 8006288:	d823      	bhi.n	80062d2 <UART_SetConfig+0x286>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x244>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062d3 	.word	0x080062d3
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062d3 	.word	0x080062d3
 80062a0:	080062c3 	.word	0x080062c3
 80062a4:	080062d3 	.word	0x080062d3
 80062a8:	080062d3 	.word	0x080062d3
 80062ac:	080062d3 	.word	0x080062d3
 80062b0:	080062cb 	.word	0x080062cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b4:	f7fe fd7a 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 80062b8:	6178      	str	r0, [r7, #20]
        break;
 80062ba:	e00f      	b.n	80062dc <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <UART_SetConfig+0x2d8>)
 80062be:	617b      	str	r3, [r7, #20]
        break;
 80062c0:	e00c      	b.n	80062dc <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c2:	f7fe fcdb 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 80062c6:	6178      	str	r0, [r7, #20]
        break;
 80062c8:	e008      	b.n	80062dc <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	617b      	str	r3, [r7, #20]
        break;
 80062d0:	e004      	b.n	80062dc <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	76bb      	strb	r3, [r7, #26]
        break;
 80062da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8102 	beq.w	80064e8 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	4613      	mov	r3, r2
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	4413      	add	r3, r2
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d305      	bcc.n	8006300 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d913      	bls.n	8006328 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	76bb      	strb	r3, [r7, #26]
 8006304:	e0f0      	b.n	80064e8 <UART_SetConfig+0x49c>
 8006306:	bf00      	nop
 8006308:	efff69f3 	.word	0xefff69f3
 800630c:	40008000 	.word	0x40008000
 8006310:	40013800 	.word	0x40013800
 8006314:	40021000 	.word	0x40021000
 8006318:	40004400 	.word	0x40004400
 800631c:	40004800 	.word	0x40004800
 8006320:	40004c00 	.word	0x40004c00
 8006324:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4618      	mov	r0, r3
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	020b      	lsls	r3, r1, #8
 800633a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800633e:	0202      	lsls	r2, r0, #8
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	6849      	ldr	r1, [r1, #4]
 8006344:	0849      	lsrs	r1, r1, #1
 8006346:	4608      	mov	r0, r1
 8006348:	f04f 0100 	mov.w	r1, #0
 800634c:	1814      	adds	r4, r2, r0
 800634e:	eb43 0501 	adc.w	r5, r3, r1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	461a      	mov	r2, r3
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	4620      	mov	r0, r4
 800635e:	4629      	mov	r1, r5
 8006360:	f7f9 ff38 	bl	80001d4 <__aeabi_uldivmod>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4613      	mov	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006372:	d308      	bcc.n	8006386 <UART_SetConfig+0x33a>
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637a:	d204      	bcs.n	8006386 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	e0b0      	b.n	80064e8 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	76bb      	strb	r3, [r7, #26]
 800638a:	e0ad      	b.n	80064e8 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006394:	d15c      	bne.n	8006450 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006396:	7efb      	ldrb	r3, [r7, #27]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d828      	bhi.n	80063ee <UART_SetConfig+0x3a2>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0x358>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063d1 	.word	0x080063d1
 80063ac:	080063d9 	.word	0x080063d9
 80063b0:	080063ef 	.word	0x080063ef
 80063b4:	080063df 	.word	0x080063df
 80063b8:	080063ef 	.word	0x080063ef
 80063bc:	080063ef 	.word	0x080063ef
 80063c0:	080063ef 	.word	0x080063ef
 80063c4:	080063e7 	.word	0x080063e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c8:	f7fe fcf0 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 80063cc:	6178      	str	r0, [r7, #20]
        break;
 80063ce:	e013      	b.n	80063f8 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d0:	f7fe fd02 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 80063d4:	6178      	str	r0, [r7, #20]
        break;
 80063d6:	e00f      	b.n	80063f8 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d8:	4b49      	ldr	r3, [pc, #292]	; (8006500 <UART_SetConfig+0x4b4>)
 80063da:	617b      	str	r3, [r7, #20]
        break;
 80063dc:	e00c      	b.n	80063f8 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063de:	f7fe fc4d 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 80063e2:	6178      	str	r0, [r7, #20]
        break;
 80063e4:	e008      	b.n	80063f8 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ea:	617b      	str	r3, [r7, #20]
        break;
 80063ec:	e004      	b.n	80063f8 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	76bb      	strb	r3, [r7, #26]
        break;
 80063f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d074      	beq.n	80064e8 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	005a      	lsls	r2, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	441a      	add	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006412:	b29b      	uxth	r3, r3
 8006414:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b0f      	cmp	r3, #15
 800641a:	d916      	bls.n	800644a <UART_SetConfig+0x3fe>
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006422:	d212      	bcs.n	800644a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f023 030f 	bic.w	r3, r3, #15
 800642c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	b29b      	uxth	r3, r3
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	b29a      	uxth	r2, r3
 800643a:	89fb      	ldrh	r3, [r7, #14]
 800643c:	4313      	orrs	r3, r2
 800643e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	89fa      	ldrh	r2, [r7, #14]
 8006446:	60da      	str	r2, [r3, #12]
 8006448:	e04e      	b.n	80064e8 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	76bb      	strb	r3, [r7, #26]
 800644e:	e04b      	b.n	80064e8 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006450:	7efb      	ldrb	r3, [r7, #27]
 8006452:	2b08      	cmp	r3, #8
 8006454:	d827      	bhi.n	80064a6 <UART_SetConfig+0x45a>
 8006456:	a201      	add	r2, pc, #4	; (adr r2, 800645c <UART_SetConfig+0x410>)
 8006458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645c:	08006481 	.word	0x08006481
 8006460:	08006489 	.word	0x08006489
 8006464:	08006491 	.word	0x08006491
 8006468:	080064a7 	.word	0x080064a7
 800646c:	08006497 	.word	0x08006497
 8006470:	080064a7 	.word	0x080064a7
 8006474:	080064a7 	.word	0x080064a7
 8006478:	080064a7 	.word	0x080064a7
 800647c:	0800649f 	.word	0x0800649f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006480:	f7fe fc94 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8006484:	6178      	str	r0, [r7, #20]
        break;
 8006486:	e013      	b.n	80064b0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006488:	f7fe fca6 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 800648c:	6178      	str	r0, [r7, #20]
        break;
 800648e:	e00f      	b.n	80064b0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006490:	4b1b      	ldr	r3, [pc, #108]	; (8006500 <UART_SetConfig+0x4b4>)
 8006492:	617b      	str	r3, [r7, #20]
        break;
 8006494:	e00c      	b.n	80064b0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006496:	f7fe fbf1 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 800649a:	6178      	str	r0, [r7, #20]
        break;
 800649c:	e008      	b.n	80064b0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800649e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a2:	617b      	str	r3, [r7, #20]
        break;
 80064a4:	e004      	b.n	80064b0 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	76bb      	strb	r3, [r7, #26]
        break;
 80064ae:	bf00      	nop
    }

    if (pclk != 0U)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d018      	beq.n	80064e8 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	085a      	lsrs	r2, r3, #1
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	441a      	add	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b0f      	cmp	r3, #15
 80064d0:	d908      	bls.n	80064e4 <UART_SetConfig+0x498>
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d8:	d204      	bcs.n	80064e4 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	60da      	str	r2, [r3, #12]
 80064e2:	e001      	b.n	80064e8 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bdb0      	pop	{r4, r5, r7, pc}
 80064fe:	bf00      	nop
 8006500:	00f42400 	.word	0x00f42400

08006504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01a      	beq.n	800661a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006602:	d10a      	bne.n	800661a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]
  }
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006658:	f7fc fc4e 	bl	8002ef8 <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b08      	cmp	r3, #8
 800666a:	d10e      	bne.n	800668a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f82d 	bl	80066da <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e023      	b.n	80066d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b04      	cmp	r3, #4
 8006696:	d10e      	bne.n	80066b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f817 	bl	80066da <UART_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e00d      	b.n	80066d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	603b      	str	r3, [r7, #0]
 80066e6:	4613      	mov	r3, r2
 80066e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ea:	e05e      	b.n	80067aa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d05a      	beq.n	80067aa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f4:	f7fc fc00 	bl	8002ef8 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	429a      	cmp	r2, r3
 8006702:	d302      	bcc.n	800670a <UART_WaitOnFlagUntilTimeout+0x30>
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11b      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006718:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0201 	bic.w	r2, r2, #1
 8006728:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e043      	b.n	80067ca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d02c      	beq.n	80067aa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800675a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800675e:	d124      	bne.n	80067aa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006768:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006778:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2220      	movs	r2, #32
 800679a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e00f      	b.n	80067ca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69da      	ldr	r2, [r3, #28]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4013      	ands	r3, r2
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	bf0c      	ite	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	2300      	movne	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d091      	beq.n	80066ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <__libc_init_array>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	4d0d      	ldr	r5, [pc, #52]	; (800680c <__libc_init_array+0x38>)
 80067d8:	4c0d      	ldr	r4, [pc, #52]	; (8006810 <__libc_init_array+0x3c>)
 80067da:	1b64      	subs	r4, r4, r5
 80067dc:	10a4      	asrs	r4, r4, #2
 80067de:	2600      	movs	r6, #0
 80067e0:	42a6      	cmp	r6, r4
 80067e2:	d109      	bne.n	80067f8 <__libc_init_array+0x24>
 80067e4:	4d0b      	ldr	r5, [pc, #44]	; (8006814 <__libc_init_array+0x40>)
 80067e6:	4c0c      	ldr	r4, [pc, #48]	; (8006818 <__libc_init_array+0x44>)
 80067e8:	f000 f820 	bl	800682c <_init>
 80067ec:	1b64      	subs	r4, r4, r5
 80067ee:	10a4      	asrs	r4, r4, #2
 80067f0:	2600      	movs	r6, #0
 80067f2:	42a6      	cmp	r6, r4
 80067f4:	d105      	bne.n	8006802 <__libc_init_array+0x2e>
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fc:	4798      	blx	r3
 80067fe:	3601      	adds	r6, #1
 8006800:	e7ee      	b.n	80067e0 <__libc_init_array+0xc>
 8006802:	f855 3b04 	ldr.w	r3, [r5], #4
 8006806:	4798      	blx	r3
 8006808:	3601      	adds	r6, #1
 800680a:	e7f2      	b.n	80067f2 <__libc_init_array+0x1e>
 800680c:	0800690c 	.word	0x0800690c
 8006810:	0800690c 	.word	0x0800690c
 8006814:	0800690c 	.word	0x0800690c
 8006818:	08006910 	.word	0x08006910

0800681c <memset>:
 800681c:	4402      	add	r2, r0
 800681e:	4603      	mov	r3, r0
 8006820:	4293      	cmp	r3, r2
 8006822:	d100      	bne.n	8006826 <memset+0xa>
 8006824:	4770      	bx	lr
 8006826:	f803 1b01 	strb.w	r1, [r3], #1
 800682a:	e7f9      	b.n	8006820 <memset+0x4>

0800682c <_init>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr

08006838 <_fini>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr
